head	1.5;
access;
symbols
	105alpha:1.5
	104alpha:1.5
	103alpha:1.5
	102alpha:1.5
	101alpha:1.5
	100alpha:1.5
	DIKU_0:1.5
	carlton_start:1.4
	immel_start:1.2;
locks; strict;


1.5
date	94.08.17.16.51.48;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	92.12.10.17.07.44;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.58.12;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.58.11;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.5
log
@Checkpoint of DIKU August 94 changes
@
text
@export Subscript

const subscript <- class Subscript (Tree) [xxtarget : Tree, xxexp : Tree]
    field target : Tree <- xxtarget
    field exp : Tree <- xxexp

    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- target
      elseif i = 1 then
	r <- exp
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	target <- r
      elseif i = 1 then
	exp <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var ntarget, nexp : Tree
      if target !== nil then ntarget <- target.copy[i] end if
      if exp !== nil then nexp <- exp.copy[i] end if
      r <- subscript.create[ln, ntarget, nexp]
    end copy
    export operation removeSugarOnLeft [a : Tree] -> [r : Tree]
      exp.rappend[a]
      r <- invoc.create[ln, target, OpName.Literal["setelement"], exp]
    end removeSugarOnLeft
    operation iremoveSugar -> [r : Tree]
      r <- invoc.create[ln, target, OpName.Literal["getelement"], exp]
    end iremoveSugar

  export operation removeSugar [ob : Tree] -> [r : Tree]
    r <- self.iremoveSugar[]
    r <- FTree.removeSugar[r, ob]
  end removeSugar

  export function asString -> [r : String]
    r <- "subscript"
  end asString
end Subscript
@


1.4
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@a30 2
      const nid <- Environment.getEnv.getITable.lookup["setelement", 999]
      const t <- opname.create[ln, nid]
d32 1
a32 1
      r <- invoc.create[ln, target, t, exp]
d35 1
a35 3
      const nid <- Environment.getEnv.getITable.lookup["getelement", 999]
      const t <- opname.create[ln, nid]
      r <- invoc.create[ln, target, t, exp]
@


1.3
log
@Removed all monitors
@
text
@d43 1
a43 1
    r <- iremoveSugar[]
@


1.2
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a40 1
  end monitor
@


1.1
log
@Initial revision
@
text
@d1 1
a1 6
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import Environment from "Jekyll"
import OpName from "Jekyll"
import Invoc from "Jekyll"
export Subscript to "Jekyll"
@
