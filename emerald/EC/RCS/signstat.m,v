head	1.4;
access;
symbols
	105alpha:1.4
	104alpha:1.4
	103alpha:1.4
	102alpha:1.4
	101alpha:1.4
	100alpha:1.4
	DIKU_0:1.4
	immel_start:1.3;
locks; strict;


1.4
date	94.06.10.05.21.58;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.57.52;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.57.51;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.57.50;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.4
log
@Reinstalled support for monitored objects and conditions
@
text
@export Signalstat

const signalstat <- class Signalstat (Tree) [xxexp : Tree]
  field useSignalAndExit : Integer <- -1
  field exp : Tree <- xxexp

  export function upperbound -> [r : Integer]
    r <- 0
  end upperbound
  export function getElement [i : Integer] -> [r : Tree]
    if i = 0 then
      r <- exp
    end if
  end getElement
  export operation setElement [i : Integer, r : Tree]
    if i = 0 then
      exp <- r
    end if
  end setElement
  export operation copy [i : Integer] -> [r : Tree]
    var nexp : Tree
    if exp !== nil then nexp <- exp.copy[i] end if
    r <- signalstat.create[ln, nexp]
  end copy

  export operation removeSugar [ob : Tree] -> [r : Tree]
    const realob <- view ob as Monitorable
    if !realob$isMonitored then
      Environment.getEnv.SemanticError[ln, "Signal statements must be in monitored objects", nil]
    end if
    r <- FTree.removeSugar[self, ob]
  end removeSugar

  export operation generate [xct : Printable]
    if Environment$env$generateconcurrent then
      const bc <- view xct as ByteCode
      bc.lineNumber[ln]
      bc.pushSize[4]
      exp.generate[xct]
      bc.popSize
      if useSignalAndExit >= 0 then      
	bc.addCode["CONDSIGNALANDEXIT"]
	bc.addValue[useSignalAndExit, 1]
      else
	bc.addCode["CONDSIGNAL"]
      end if
    end if
  end generate

  export function asString -> [r : String]
    r <- "signalstat"
  end asString
end Signalstat
@


1.3
log
@type -> typeobject sed
@
text
@d4 2
a5 3
  monitor
    field useSignalAndExit : Boolean <- false
    field exp : Tree <- xxexp
d7 26
a32 19
    export function upperbound -> [r : Integer]
      r <- 0
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- exp
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	exp <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nexp : Tree
      if exp !== nil then nexp <- exp.copy[i] end if
      r <- signalstat.create[ln, nexp]
    end copy
  end monitor
d34 1
a34 1
  export operation generate [xct : Printable] -> [rct : None]
d36 2
a37 8
      var junk : Any
      const bc <- view xct as typeobject T
	  op addCode[String]
	  op pushSize[Integer]
	  op popSize
	  op lineNumber[Integer]
	end T
      bc.lineNumber[self$ln]
d39 1
a39 1
      junk <- self$exp.generate[xct]
d41 6
a46 1
      bc.addCode["CONDSIGNAL"]
@


1.2
log
@Implemented (a first cut at) concurrency
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
export Signalstat to "Jekyll"
d31 1
a31 1
      const bc <- view xct as type T
@


1.1
log
@Initial revision
@
text
@d30 17
@
