head	1.9;
access;
symbols
	105alpha:1.9
	104alpha:1.9
	103alpha:1.9
	102alpha:1.9
	101alpha:1.9
	100alpha:1.9
	DIKU_0:1.7
	carlton_start:1.4;
locks; strict;
comment	@# @;


1.9
date	94.12.06.20.12.48;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.08.17.16.51.30;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	93.12.20.21.09.40;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	93.06.09.22.16.12;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	93.06.05.07.45.34;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	93.03.11.20.38.50;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	93.03.11.01.03.51;	author norm;	state Exp;
branches;
next	;


desc
@Deal with .? invocations (typecheck at runtime).
@


1.9
log
@Clean up generating the second things in references
@
text
@const questinvoc <- class Questinvoc (Tree) [xxtarget : Tree, xxopname : Ident, xxargs : Tree]
    const ln : Integer  <- xxtarget$ln
    field target : Tree <- xxtarget
    field xopname : Ident <- xxopname
    field args  : Tree <- xxargs
    field nress : Integer <- 1

    export operation getIsNotManifest -> [r : Boolean]
      r <- true
    end getIsNotManifest
    export operation setIsNotManifest [r : Boolean]
      assert r
    end setIsNotManifest
    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- target
      elseif i = 1 then
	r <- args
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	target <- r
      elseif i = 1 then
	args <- r
      end if
    end setElement

    export function getnargs -> [r : Integer]
      if args == nil then
	r <- 0
      else
	r <- args.upperbound + 1
      end if
    end getnargs

    export operation copy [i : Integer] -> [newt : Tree]
      var ntarget, nargs : Tree
      if target !== nil then ntarget <- target.copy[i] end if
      if args !== nil then nargs <- args.copy[i] end if
      newt <- questinvoc.create[ln, ntarget, xopname, nargs]
    end copy

    export operation resolveSymbols [st : SymbolTable, nexp : Integer]
      nress <- nexp
      target.resolveSymbols[st, 1]
      if args !== nil then args.resolveSymbols[st, 1] end if
    end resolveSymbols

  export operation assignTypes
    FTree.assignTypes[self]
  end assignTypes

  function isSelf -> [r : Boolean] 
    const t <- nameof self$target

    if t = "aselflit" then
      r <- true
    elseif t = "asym" then
      const ts <- view self$target as Sym
      r <- ts$mySym$isSelf
    else
      r <- false
    end if
  end isSelf

  export operation generate [xct : Printable]
    const bc <- view xct as ByteCode

    var targetType, targetCT : Tree

    bc.lineNumber[self$ln]

    % We need to generate:
    % if typeof target *> typeobject with one operation end then
    %   regular invoke
    % else
    %   assert false
    % end if
%    for i : Integer <- 0 while i < self$nress by i <- i + 1
%      bc.addCode["PUSHNILV"]
%    end for

%    bc.pushSize[8]
%    if self$args !== nil then 
%      self$args.generate[xct]
%    end if
%    self$target.generate[xct]
%    bc.popSize

    begin
      var name : String <- xopname$name
      if self$args == nil then
        name <- name || "@@0"
      else
	name <- name || "@@" || (self$args.upperbound + 1).asString
      end if
      name <- name || "@@" || self$nress.asString
%      bc.addValue[opnametooid.Lookup[name], 2]

      bc.addCode["LDIB"]
      bc.addValue[0, 1]
      bc.addCode["TRAPF"]
    end
  end generate

  export operation getAT -> [r : Tree]
    
  end getAT

  export operation getCT -> [r : Tree]
    
  end getCT

  export function asString -> [r : String]
    r <- "questinvoc"
  end asString
end Questinvoc

export Questinvoc
@


1.8
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@a107 1
%    if bc$size == 4 and self$nress = 1 then bc.addCode["POOP"] end if
@


1.7
log
@Checkpoint of DIKU August 94 changes
@
text
@d2 1
a51 3
    initially
      ln <- target$ln
    end initially
d95 1
a95 1
      const name <- xopname$name
@


1.6
log
@First attempt at abcons
@
text
@d1 1
a1 1
const questinvoc <- class Questinvoc (Tree) [xxtarget : Tree, xxopname : Tree, xxargs : Tree]
d3 1
a3 1
    field xopname : Tree <- xxopname
d14 1
a14 1
      r <- 2
a19 2
	r <- xopname
      elseif i = 2 then
a26 2
	xopname <- r
      elseif i = 2 then
d40 1
a40 1
      var ntarget, nopname, nargs : Tree
a41 1
      if xopname !== nil then nopname <- xopname.copy[i] end if
d43 1
a43 1
      newt <- questinvoc.create[ln, ntarget, nopname, nargs]
d97 1
a97 2
      const ashasId <- view xopname as hasIdent
      const name <- ashasId$id.asString
@


1.5
log
@Finalized merge with Mark Immels version
@
text
@d78 1
a78 8
    const bc <- view xct as typeobject T
	op addCode[String]
	op addValue [Integer, Integer]
	op pushSize[Integer]
	op popSize
	op getSize -> [Integer]
	op lineNumber [Integer]
      end T
d102 1
a102 1
      const ashasId <- view xopname as typeobject t op getid -> [Ident] end t
@


1.4
log
@Fix type checking errors
@
text
@d111 3
a113 1
      if self$args !== nil then 
d116 1
@


1.3
log
@Byte load/stores, literals on CT basis
@
text
@d109 1
a109 1
      const ashasId <- xopname
@


1.2
log
@Start implementing .? invocations
@
text
@d116 2
a117 2
      bc.addCode["LDIS"]
      bc.addValue[0, 2]
@


1.1
log
@Initial revision
@
text
@a89 3
    for i : Integer <- 0 while i < self$nress by i <- i + 1
      bc.addCode["PUSHNILV"]
    end for
d91 9
a99 6
    bc.pushSize[8]
    if self$args !== nil then 
      self$args.generate[xct]
    end if
    self$target.generate[xct]
    bc.popSize
d101 7
d114 7
a120 9
      if Environment$env$usecalloids then
	bc.addCode["CALLOIDSQ"]
	bc.addValue[opnametooid.Lookup[name], 2]
      else
	bc.addCode["CALLOID"]
	bc.addValue[opnametooid.Lookup[name], 4]
      end if
    end if
    if bc$size == 4 and self$nress = 1 then bc.addCode["POOP"] end if
@
