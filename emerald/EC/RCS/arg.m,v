head	1.4;
access;
symbols
	105alpha:1.4
	104alpha:1.4
	103alpha:1.4
	102alpha:1.4
	101alpha:1.4
	100alpha:1.4
	DIKU_0:1.4
	carlton_start:1.4
	immel_start:1.3;
locks; strict;


1.4
date	92.12.10.17.06.38;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.50.02;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.50.00;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.49.59;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.4
log
@Removed all monitors
@
text
@export Arg

const arg <- class Arg (Tree) [xxexp : Tree]
% If doing move/visit
%    field isMove : Boolean <- false
%    field isVisit : Boolean <- false
    field exp : Tree <- xxexp

    export function upperbound -> [r : Integer]
      r <- 0
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- exp
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	exp <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nexp : Tree
      var narg : Arg
      if exp !== nil then nexp <- exp.copy[i] end if
      narg <- arg.create[ln, nexp]
% If doing move/visit
%      narg$isMove <- isMove
%      narg$isVisit <- isVisit
      r <- narg
    end copy

  export function asString -> [r : String]
    r <- "arg"
  end asString
end Arg
@


1.3
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a31 1
  end monitor
@


1.2
log
@Don't waste space on move/visit/attached
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
export Arg to "Jekyll"
@


1.1
log
@Initial revision
@
text
@d7 3
a9 2
    field isMove : Boolean <- false
    field isVisit : Boolean <- false
d30 3
a32 2
      narg$isMove <- isMove
      narg$isVisit <- isVisit
@
