head	1.7;
access;
symbols
	105alpha:1.7
	104alpha:1.7
	103alpha:1.7
	102alpha:1.7
	101alpha:1.7
	100alpha:1.7
	DIKU_0:1.6
	carlton_start:1.5
	immel_start:1.3;
locks; strict;


1.7
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.17.06.39;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.50.08;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.50.06;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.50.05;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.7
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@export Assertstat

const assertstat <- class Assertstat (Tree) [xxexp : Tree]
    const ln : Integer <- xxexp$ln

    field exp : Tree <- xxexp

    export function upperbound -> [r : Integer]
      r <- 0
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- exp
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	exp <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nexp : Tree
      if exp !== nil then nexp <- exp.copy[i] end if
      r <- assertstat.create[ln, nexp]
    end copy

  export operation resolveSymbols[pst : SymbolTable, nexp : Integer]
    self$exp.resolveSymbols[pst, 1]
  end resolveSymbols

  export operation generate [xct : Printable]
    const bc <- view xct as ByteCode
    bc.lineNumber[self$ln]
    bc.pushSize[4]
    self$exp.generate[xct]
    bc.popSize
    bc.addCode["TRAPF"]
  end generate

  export function asString -> [r : String]
    r <- "assertstat"
  end asString
end Assertstat
@


1.6
log
@First attempt at abcons
@
text
@d4 2
a25 3
    initially
      ln <- exp$ln
    end initially
@


1.5
log
@Get rid of return on generate
@
text
@d33 1
a33 6
    const bc <- view xct as typeobject T
	op addCode[String]
	op pushSize[Integer]
	op popSize
	op lineNumber[Integer]
      end T
@


1.4
log
@Removed all monitors
@
text
@d32 1
a32 2
  export operation generate [xct : Printable] -> [rct : None]
    var junk : Any
d41 1
a41 1
    junk <- self$exp.generate[xct]
@


1.3
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a26 1
  end monitor
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
export Assertstat to "Jekyll"
d36 1
a36 1
    const bc <- view xct as type T
@


1.1
log
@Initial revision
@
text
@d36 2
a37 1
  export operation generate [xct : Printable]
d46 1
a46 1
    self$exp.generate[xct]
@
