head	1.20;
access;
symbols
	105alpha:1.20
	104alpha:1.20
	103alpha:1.20
	102alpha:1.20
	101alpha:1.20
	100alpha:1.20
	DIKU_0:1.18
	carlton_start:1.15
	immel_start:1.7;
locks; strict;


1.20
date	98.03.24.16.09.00;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.08.22.23.44.17;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	94.08.17.16.51.52;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	93.06.25.15.50.57;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.03.11.20.40.13;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	92.12.12.04.13.21;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.10.17.07.46;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	91.05.14.15.54.57;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	91.04.22.22.59.15;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.04.22.22.59.14;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.59.12;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.59.11;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.59.10;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.59.08;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.20
log
@'.'
@
text
@export Vardecl

const vardecl <- class Vardecl (Tree) [xxsym : Tree, xxtype : Tree, xxvalue : Tree]
    const ln : Integer <- xxsym$ln
% If doing move/visit
    field isAttached : Boolean <- false
    field xsym : Tree <- xxsym
    field xtype : Tree <- xxtype
    field value  : Tree <- xxvalue
    export function upperbound -> [r : Integer]
      r <- 2
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- xsym
      elseif i = 1 then
	r <- xtype
      elseif i = 2 then
	r <- value
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	xsym <- r
      elseif i = 1 then
	xtype <- r
      elseif i = 2 then
	value <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nxsym, nxtype, nvalue : Tree
      if xsym !== nil then nxsym <- xsym.copy[i] end if
      if xtype !== nil then nxtype <- xtype.copy[i] end if
      if value !== nil then nvalue <- value.copy[i] end if
      r <- vardecl.create[ln, nxsym, nxtype, nvalue]
      (view r as Attachable)$isAttached <- isAttached
    end copy
    operation iDefineSymbols [st : SymbolTable]
      const id <- (view xsym as hasIdent)$id
% If doing move/visit
      const xxx <- st.Define[ln, id, SVar, isAttached]
% else
%     const xxx <- st.Define[ln, id, SVar, false]
    end iDefineSymbols
    export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
      xsym.resolveSymbols[pst, 0]
      xtype.resolveSymbols[pst, 1]
      if value !== nil then value.resolveSymbols[pst, 1] end if
    end resolveSymbols

  export operation assignTypes 
    var thetype : Tree
    const env <- Environment$env
    if self$xtype$isNotManifest then
      env.SemanticError[self$ln,
	"Type of the variable \"%s\" must be manifest",
	{(view self$xsym as hasIdent)$id.asString}]
    else
      theType <- self$xtype
      if env$traceassignTypes then env.printf["Type is %S on line %d\n", { theType, self$ln }] end if
      theType <- theType.execute
      if env$traceassignTypes then env.printf["  type.execute is %S\n", { theType }] end if
      theType <- theType.asType
      if env$traceassignTypes then env.printf["  type.execute.asType is %S\n", { theType }] end if
    end if
    if thetype == nil then
      if env$traceassignTypes then
	env.printf["Couldn't find a type for var %s on line %d\n",
	  { self$xsym.asString, self$ln}]
      end if
      env.SemanticError[ln, "Non type in variable declaration", nil]
    end if
    (view self$xsym as Sym)$mysym$ATinfo <- thetype
    FTree.assignTypes[self]
  end assignTypes

  export operation typeCheck
    if self$value !== nil then
      const rexp <- self$value
      const rtype <- view rexp.getAT as hasConforms
      const lsym <- (view self$xsym as Sym)$mysym
      const ltype  <- view lsym$ATInfo as Tree
      if ltype == nil then
	Environment$env.ttypeCheck["var.typeCheck on %d: type of id (%s) is nil\n", 
	  { self$ln, lsym.asString }]
      elseif rtype == nil then
	Environment$env.ttypeCheck["var.typeCheck on %d: type of value (%s) is nil\n", 
	  { self$ln, rexp.asString }]
      elseif ! rtype.conformsTo[self$ln, ltype] then
	Environment$env.SemanticError[self$ln, "The initializer type doesn't conform to that declared for the variable", nil]
      end if
    end if
    FTree.typeCheck[self]
  end typeCheck

  export operation generate [ct : Printable]
    const s <- view self$xsym as Sym
    const bc <- view ct as ByteCode

    if self$value !== nil or bc.fetchNest !== nil then
      const size : Integer <- s$mysym$size
      bc.pushSize[size]
      if self$value == nil then
	bc.lineNumber[self$ln]
	if size == 4 then
	  bc.addCode["PUSHNIL"]
	else
	  bc.addCode["PUSHNILV"]
	end if
      else
	bc.lineNumber[self$value$ln]
	self$value.generate[ct]
      end if
      s.generateLValue[ct]
      bc.popSize
    end if
  end generate

  export operation findManifests -> [changed : Boolean]
    changed <- false
    if ! self$xsym$isNotManifest then
      self$xsym$isNotManifest <- true
      changed <- true
    end if
    changed <- FTree.findManifests[self] | changed
  end findManifests

  export operation defineSymbols [st : SymbolTable]
    self.iDefineSymbols[st]
    FTree.defineSymbols[st, self]
  end defineSymbols

  export function same [o : Tree] -> [r : Boolean]
    r <- false
    if nameof o = "avardecl" then
      r <- self$xsym.same[(view o as VarDecl)$xsym]
    end if
  end same

  export function asString -> [r : String]
    r <- "vardecl"
  end asString
end Vardecl
@


1.19
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d37 1
@


1.18
log
@August 94 Checkpoint II
@
text
@d4 1
a49 3
    initially
      ln <- xsym$ln
    end initially
d71 1
d101 1
a101 1
      const size <- s$mysym$size
@


1.17
log
@Checkpoint of DIKU August 94 changes
@
text
@d45 1
a45 1
      xsym.resolveSymbols[pst, nexp]
d91 1
a91 1
	Environment$env.SemanticError[self$ln, "type mismatch", nil]
@


1.16
log
@First attempt at abcons
@
text
@d40 1
a40 1
      const xxx <- st.Define[id, SVar, isAttached]
d42 1
a42 5
%     const xxx <- st.Define[id, SVar, false]
      if xxx == nil then
	Environment.getEnv.SemanticError[ln, "Redefinition of symbol \"%s\"",
	  { id.asString } ]
      end if
d55 1
d57 1
a57 1
      Environment$env.SemanticError[self$ln,
d62 1
a62 1
      Environment$env.tassignTypes["Type is %S on line %d\n", { theType, self$ln }]
d64 1
a64 1
      Environment$env.tassignTypes["  type.execute is %S\n", { theType }]
d66 1
a66 1
      Environment$env.tassignTypes["  type.execute.asType is %S\n", { theType }]
d69 4
a72 2
      Environment$env.tassignTypes["Couldn't find a type for var %s on line %d\n",
        { self$xsym.asString, self$ln}]
@


1.15
log
@Cleaned up the definition of nesting in bytecodes.  Generate code to nil
variables without initializers that occur within loops.
@
text
@d38 1
a38 1
      const id <- (view xsym as hasId)$id
d62 1
a62 1
	{(view self$xsym as hasId)$id.asString}]
a81 1
      const hasConforms <- typeobject t op conformsTo[Integer, Tree]->[Boolean] end t
d100 2
a101 7
    const bc <- view ct as typeobject T
      op pushSize[Integer]
      op popSize 
      op addCode[String]
      op lineNumber[Integer]
      function fetchNest -> [Integer] 
    end T
@


1.14
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d106 1
d108 1
a108 1
    if self$value !== nil then
d111 11
a121 2
      bc.lineNumber[self$value$ln]
      self$value.generate[ct]
@


1.13
log
@Avoid re-nilling of variables
@
text
@d127 1
a127 1
    iDefineSymbols[st]
@


1.12
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d107 3
a109 9
    const size <- s$mysym$size
    bc.pushSize[size]
    if self$value == nil then
      if size == 4 then
	bc.addCode["PUSHNIL"]
      else
	bc.addCode["PUSHNILV"]
      end if
    else
d112 2
a114 2
    s.generateLValue[ct]
    bc.popSize
@


1.11
log
@Use nameof rather than asString
@
text
@d40 1
a40 1
      const xxx <- st.Define[id, STKind.SVar, isAttached]
d42 1
a42 1
%     const xxx <- st.Define[id, STKind.SVar, false]
@


1.10
log
@Get rid of return on generate
@
text
@d105 1
d116 1
d139 1
a139 1
    if o.asString = "constdecl" then
@


1.9
log
@Fix parsing of operations, initiallies and recoveries
@
text
@d99 1
a99 1
  export operation generate [ct : Printable] -> [rct : None]
d115 1
a115 1
      const junk <- self$value.generate[ct]
@


1.8
log
@Removed all monitors
@
text
@d64 6
a69 1
      thetype <- self$xtype.execute.asType
@


1.7
log
@Enabled attach declarations
@
text
@a3 1
  monitor
d38 1
d40 1
a40 1
      const xxx <- st.Define[(view xsym as hasId)$id, STKind.SVar, isAttached]
d42 5
a46 1
%     const xxx <- st.Define[(view xsym as hasId)$id, STKind.SVar, false]
a55 1
  end monitor
@


1.6
log
@type -> typeobject sed
@
text
@d6 1
a6 1
%    field isAttached : Boolean <- false
d40 1
a40 1
%      const xxx <- st.Define[(view xsym as hasId)$id, STKind.SVar, isAttached]
d42 1
a42 1
      const xxx <- st.Define[(view xsym as hasId)$id, STKind.SVar, false]
@


1.5
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 6
import Tree, FTree, Printable from "Jekyll"
import SymbolTable, STKind from "Jekyll"
import hasId from "Jekyll"
import Sym from "Jekyll"
import Environment from "Jekyll"
export Vardecl to "Jekyll"
d74 1
a74 1
      const hasConforms <- type t op conformsTo[Integer, Tree]->[Boolean] end t
d93 1
a93 1
    const bc <- view ct as type T
@


1.4
log
@Fixed a little bug in iDefineSymbols
@
text
@d96 1
a96 1
  export operation generate [ct : Printable]
d112 1
a112 1
      self$value.generate[ct]
@


1.3
log
@Don't waste space on move/visit/attached
@
text
@d47 1
a47 1
%      const xxx <- st.Define[(view xsym as hasId)$id, STKind.SVar, false]
@


1.2
log
@Fixed setting of line numbers
@
text
@d10 2
a11 1
    field isAttached : Boolean <- false
d44 4
a47 1
      const xxx <- st.Define[(view xsym as hasId)$id, STKind.SVar, isAttached]
@


1.1
log
@Initial revision
@
text
@d50 3
@
