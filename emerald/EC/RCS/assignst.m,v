head	1.17;
access;
symbols
	105alpha:1.17
	104alpha:1.17
	103alpha:1.17
	102alpha:1.17
	101alpha:1.17
	100alpha:1.17
	DIKU_0:1.14
	carlton_start:1.11
	immel_start:1.5;
locks; strict;


1.17
date	97.01.22.00.03.20;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	95.06.12.17.28.08;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	94.08.22.23.43.40;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	94.08.17.16.50.30;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.10.17.06.40;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.04.22.22.50.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.50.14;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.50.13;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.50.11;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.50.10;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.17
log
@Many changes
@
text
@export Assignstat

const assignstat <- class Assignstat (Tree) [xxleft : Tree, xxright : Tree]
    field left : Tree <- xxleft
    field right  : Tree <- xxright
    const ln : Integer <- left[0]$ln

    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- left
      elseif i = 1 then
	r <- right
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	left <- r
      elseif i = 1 then
	right <- r
      end if
    end setElement
    operation iremoveSugar -> [r : Tree]
      const onleft <- typeobject onleft
	operation removesugaronleft [Tree] -> [Tree]
      end onleft
      
      r <- self
      if left !== nil and left.upperbound = 0 then
	const e <- left[0]
	const s <- nameof e
	if s = "afieldsel" or s = "asubscript" then
	  const f <- view e as onleft
	  r <- f.removeSugarOnLeft[right]
	end if
      end if
    end iremoveSugar

    export operation resolveSymbols [st : SymbolTable, nexp : Integer]
      if left !== nil then
	left.resolveSymbols[st, 0]
	if right.upperbound = 0 then
	  right.resolveSymbols[st, left.upperbound + 1]
	else
	  right.resolveSymbols[st, 1]
	end if
      else
	right.resolveSymbols[st, 0]
      end if
    end resolveSymbols
    export operation copy [i : Integer] -> [r : Tree]
      var nleft, nright : Tree
      if left !== nil then nleft <- left.copy[i] end if
      if right !== nil then nright <- right.copy[i] end if
      r <- assignstat.create[ln, nleft, nright]
    end copy

  export operation typeCheck
    const l <- self$left
    const r <- self$right
    const limit <- l.upperbound
    var theRightTypes : Tree <- nil

    if limit != r.upperbound then
      % This has to worry about the right being an invocation that returns
      % multiple results.  For now, only generate the error if length of
      % right is > 1
      if r.upperbound = 0 and nameof r[0] = "aninvoc" then
	theRightTypes <- r[0].getAT
	if therighttypes == nil then
	  % the operation is not defined, but an error will come later
	  FTree.typeCheck[self]
	  return
	end if
	assert nameof theRightTypes = "aseq"
	assert limit = theRightTypes.upperbound
      else
	Environment$env.SemanticError[self$ln, 
	  "expected %d expressions in assignment, found %d", 
	  { limit + 1, r.upperbound + 1}]
	return
      end if
    end if

    for i : Integer <- 0 while i <= limit by i <- i + 1
      const anl <- l[i]
      const anlname <- nameof anl
      var rtype : hasConforms

      if anlname = "asym" then
	if theRightTypes == nil then
	  const rexp <- r[i]
	  rtype <- view rexp.getAT as hasConforms
	else
	  rtype <- view theRightTypes[i] as hasConforms
	end if
	const lsym : Symbol <- (view l[i] as Sym)$mysym
	const ltype  <- view lsym$ATInfo as Tree
	const itskind : Integer <- lsym$mykind
	if itskind = SConst or itskind = SParam then
	  Environment$env.SemanticError[ln, "Attempt to store into constant symbol %S", { lsym$myident}]
	elseif ltype == nil then
	  if Environment$env$tracetypecheck then
	    Environment$env.printf[
	      "assign.typeCheck on %d: type of left (%s) is nil\n", 
	      { self$ln, lsym.asString }]
	  end if
	elseif rtype == nil then
	  if Environment$env$tracetypecheck then 
	    Environment$env.printf[
	      "assign.typeCheck on %d: type of right (%S) is nil\n", 
	      { self$ln, r[i] }]
	  end if
	elseif ! rtype.conformsTo[self$ln, ltype] then
	  if i == 0 and limit == 0 then
	    Environment$env.SemanticError[self$ln, 
	      "type of rhs does not conform to lhs", nil]
	  else
	    Environment$env.SemanticError[self$ln,
	      "type of rhs expression %d does not conform to lhs", { i + 1 }]
	  end if
	end if
      else
	if i == 0 and limit == 0 then
	  Environment$env.SemanticError[self$ln, 
	    "left side of assignment is not a symbol", nil]
	else
	  Environment$env.SemanticError[self$ln, 
	    "left side of assignment (expression #%d) is not a symbol", 
	    { i + 1 }]
	end if
      end if
    end for
    FTree.typeCheck[self]
  end typeCheck

  export operation generate [xct : Printable]
    const bc <- view xct as ByteCode
    const hasGenerateLValue <- typeobject hasGenerateLValue
      operation generateLValue[Printable]
    end hasGenerateLValue
    var lv : hasGenerateLValue

    bc.lineNumber[self$ln]
    if self$left.upperbound = 0 then
      const sr <- view self$left[0] as Sym
      const s : Symbol  <- sr$mysym
%      Environment$env.pass["assign.generate: left is %s size is %d\n",
%	{s.asString, s$size}]
      bc.pushSize[s$size]
    else
      bc.pushSize[8]
    end if
    self$right.generate[xct]

    if self$left !== nil then
      % store the results to the vars
      % This has to go backwards through the vars
      for i: Integer <- self$left.upperbound while i >= 0 by i <- i - 1
	lv <- view self$left[i] as hasGenerateLValue
	lv.generateLValue[xct]
      end for
    end if
    bc.popSize
  end generate
  export operation removeSugar [ob : Tree] -> [r : Tree]
    r <- self.iremoveSugar[]
    r <- FTree.removeSugar[r, ob]
  end removeSugar

  export function asString -> [r : String]
    r <- "assignstat"
  end asString
end Assignstat
@


1.16
log
@Type check children of assignment statements even when op lookup fails
@
text
@d44 5
a48 1
	right.resolveSymbols[st, left.upperbound + 1]
@


1.15
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d70 1
@


1.14
log
@August 94 Checkpoint II
@
text
@d6 2
a54 3
    initially
      ln <- left[0]$ln
    end initially
d94 1
a94 1
	const lsym <- (view l[i] as Sym)$mysym
d96 4
a99 1
	if ltype == nil then
d144 1
a144 1
      const s  <- sr$mysym
@


1.13
log
@Checkpoint of DIKU August 94 changes
@
text
@d61 2
d67 9
a75 1
      if r.upperbound != 0 then
d79 1
d81 9
a89 5
    else
      for i : Integer <- 0 while i <= limit by i <- i + 1
	const anl <- l[i]
	const anlname <- nameof anl
	if anlname = "asym" then
d91 11
a101 17
	  const rtype <- view rexp.getAT as hasConforms
	  const lsym <- (view l[i] as Sym)$mysym
	  const ltype  <- view lsym$ATInfo as Tree
	  if ltype == nil then
	    if Environment$env$tracetypecheck then
	      Environment$env.printf[
		"assign.typeCheck on %d: type of left (%s) is nil\n", 
		{ self$ln, lsym.asString }]
	    end if
	  elseif rtype == nil then
	    if Environment$env$tracetypecheck then 
	      Environment$env.printf[
		"assign.typeCheck on %d: type of right (%s) is nil\n", 
		{ self$ln, rexp.asString }]
	    end if
	  elseif ! rtype.conformsTo[self$ln, ltype] then
	    Environment$env.SemanticError[self$ln, "type mismatch, position #%d", { i + 1 } ]
d103 7
a109 1
	else
d112 1
a112 1
	      "left side of assignment is not a symbol", nil]
d114 2
a115 3
	    Environment$env.SemanticError[self$ln, 
	      "left side of assignment (expression #%d) is not a symbol", 
	      { i + 1 }]
d118 11
a128 2
      end for
    end if
@


1.12
log
@First attempt at abcons
@
text
@d80 5
a84 3
	    Environment$env.ttypeCheck[
	      "assign.typeCheck on %d: type of left (%s) is nil\n", 
	      { self$ln, lsym.asString }]
d86 5
a90 3
	    Environment$env.ttypeCheck[
	      "assign.typeCheck on %d: type of right (%s) is nil\n", 
	      { self$ln, rexp.asString }]
d92 1
a92 1
	    Environment$env.SemanticError[self$ln, "type mismatch", nil]
@


1.11
log
@Convert to the new subscript syntax a[b]
@
text
@a75 3
	  const hasConforms <- typeobject t 
	    op conformsTo[Integer, Tree]->[Boolean] 
	  end t
d106 1
a106 6
    const bc <- view xct as typeobject T
	operation addCode[String]
	op pushSize[Integer]
	op popSize
	op LineNumber[Integer]
      end T
@


1.10
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d30 1
a30 1
	const e <- left(0)
d54 1
a54 1
      ln <- left(0)$ln
d72 1
a72 1
	const anl <- l(i)
d75 1
a75 1
	  const rexp <- r(i)
d80 1
a80 1
	  const lsym <- (view l(i) as Sym)$mysym
d122 1
a122 1
      const sr <- view self$left(0) as Sym
d136 1
a136 1
	lv <- view self$left(i) as hasGenerateLValue
@


1.9
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d143 1
a143 1
    r <- iremoveSugar[]
@


1.8
log
@Use nameof rather than asString
@
text
@d74 1
a74 1
	if anlname = "asym" and !(view anl as Sym)$isDef then
@


1.7
log
@Get rid of return on generate
@
text
@d31 2
a32 2
	const s <- e.asString
	if s = "fieldsel" or s = "subscript" then
d54 1
a54 1
      ln <- left$ln
d73 2
a74 2
	const anlname <- anl.asString
	if anlname.length > 6 and anlname.getSlice[0, 6] = "symref" then
@


1.6
log
@Removed all monitors
@
text
@d108 1
a108 2
  export operation generate [xct : Printable] -> [rct : None]
    var junk : Any
d130 1
a130 1
    junk <- self$right.generate[xct]
@


1.5
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a55 1
  end monitor
@


1.4
log
@Took out the error message for invocations returning >1 result
@
text
@d1 1
a1 5
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import Sym from "Jekyll"
import Environment from "Jekyll"
export Assignstat to "Jekyll"
d25 1
a25 1
      const onleft <- type onleft
d78 1
a78 1
	  const hasConforms <- type t 
d112 1
a112 1
    const bc <- view xct as type T
d118 1
a118 1
    const hasGenerateLValue <- type hasGenerateLValue
@


1.3
log
@Check that the left hand side contains only symbols
@
text
@d68 8
a75 3
      Environment$env.SemanticError[self$ln, 
	"expected %d expressions in assignment, found %d", 
        { limit + 1, r.upperbound + 1}]
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d66 39
a104 15
    if l.upperbound == 0 and r.upperbound == 0 then
      const rexp <- r(0)
      const hasConforms <- type t op conformsTo[Integer, Tree]->[Boolean] end t
      const rtype <- view rexp.getAT as hasConforms
      const lsym <- (view l(0) as Sym)$mysym
      const ltype  <- view lsym$ATInfo as Tree
      if ltype == nil then
	Environment$env.ttypeCheck["assign.typeCheck on %d: type of left (%s) is nil\n", 
	  { self$ln, lsym.asString }]
      elseif rtype == nil then
	Environment$env.ttypeCheck["assign.typeCheck on %d: type of right (%s) is nil\n", 
	  { self$ln, rexp.asString }]
      elseif ! rtype.conformsTo[self$ln, ltype] then
	Environment$env.SemanticError[self$ln, "type mismatch", nil]
      end if
@


1.1
log
@Initial revision
@
text
@d85 2
a86 1
  export operation generate [xct : Printable]
d108 1
a108 1
    self$right.generate[xct]
@
