head	1.8;
access;
symbols
	105alpha:1.8
	104alpha:1.8
	103alpha:1.8
	102alpha:1.8
	101alpha:1.8
	100alpha:1.8
	DIKU_0:1.7
	carlton_start:1.6
	immel_start:1.3;
locks; strict;


1.8
date	95.06.22.04.45.16;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.08.17.16.51.55;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.17.07.52;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.23.00.16;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.23.00.14;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.23.00.13;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.8
log
@Implement unavailable handers
@
text
@export Xunavail

const xunavail <- class Xunavail (Tree) [xxdecl : Tree, xxbody : Tree]
    field decl : Tree <- xxdecl
    field body : Tree <- xxbody
    field st   : SymbolTable
    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- decl
      elseif i = 1 then
	r <- body
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	decl <- r
      elseif i = 1 then
	body <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var ndecl, nbody : Tree
      if decl !== nil then ndecl <- decl.copy[i] end if
      if body !== nil then nbody <- body.copy[i] end if
      r <- xunavail.create[ln, ndecl, nbody]
    end copy

  export operation defineSymbols[pst : SymbolTable]
    self$st <- SymbolTable.create[pst, CUnavailableHandler]
    self$st$myTree <- self
    FTree.defineSymbols[self$st, self]
  end defineSymbols

  export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
    FTree.resolveSymbols[self$st, self, 0]
  end resolveSymbols

  export function asString -> [r : String]
    r <- "xunavail"
  end asString

  export operation generate [xct : Printable]
    body.generate[xct]
  end generate
end Xunavail
@


1.7
log
@Checkpoint of DIKU August 94 changes
@
text
@d46 1
a46 1

@


1.6
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d33 1
@


1.5
log
@Get rid of return on generate
@
text
@d32 1
a32 1
    self$st <- SymbolTable.create[pst, STContext.CUnavailableHandler]
@


1.4
log
@Removed all monitors
@
text
@d44 1
a44 1
  export operation generate [xct : Printable] -> [rct : None]
@


1.3
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a29 1
  end monitor
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable, STContext from "Jekyll"
export Xunavail to "Jekyll"
@


1.1
log
@Initial revision
@
text
@d48 1
a48 1
  export operation generate [xct : Printable]
@
