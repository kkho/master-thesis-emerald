head	1.12;
access;
symbols
	105alpha:1.12
	104alpha:1.12
	103alpha:1.12
	102alpha:1.12
	101alpha:1.12
	100alpha:1.12
	DIKU_0:1.8
	carlton_start:1.5
	immel_start:1.2;
locks; strict;


1.12
date	98.02.09.18.15.37;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	96.03.28.23.05.29;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	95.06.22.04.45.16;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	94.08.23.11.43.27;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.08.17.16.50.32;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	93.02.16.01.01.53;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	92.12.10.17.06.48;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.50.36;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.50.35;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.12
log
@Cleaned up
@
text
@export Block

const block <- class Block (Tree) [xxstats : Tree, xxunavailablehandler : Tree, xxfailurehandler : Tree]
    field stats : Tree <- xxstats
    field unavailablehandler : Tree <- xxunavailablehandler
    field failurehandler  : Tree <- xxfailurehandler
    field st  : SymbolTable

    export function upperbound -> [r : Integer]
      r <- 2
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- stats
      elseif i = 1 then
	r <- unavailablehandler
      elseif i = 2 then
	r <- failurehandler
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	stats <- r
      elseif i = 1 then
	unavailablehandler <- r
      elseif i = 2 then
	failurehandler <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nstats, nunavailablehandler, nfailurehandler : Tree
      if stats !== nil then nstats <- stats.copy[i] end if
      if unavailablehandler !== nil then 
	nunavailablehandler <- unavailablehandler.copy[i] end if
      if failurehandler !== nil then
	nfailurehandler <- failurehandler.copy[i] end if
      r <- block.create[ln, nstats, nunavailablehandler, nfailurehandler]
    end copy

  export operation defineSymbols[pst : SymbolTable]
    self$st <- SymbolTable.create[pst, CBlock]
    self$st$myTree <- self
    FTree.defineSymbols[self$st, self]
  end defineSymbols

  export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
    FTree.resolveSymbols[self$st, self, 0]
  end resolveSymbols

  export operation generate [xct : Printable]
    const ct <- view xct as ByteCode
    
    var fh : HandlerRecord
    var uh : HandlerRecord
    const label : Integer <- ct.fetchnest
    if false and label !== nil and (failurehandler !== nil or unavailablehandler !== nil)then
      Environment.getEnv.SemanticError[ln, "Failure/Unavailable handers in loops are not supported", nil]
    end if

    if failurehandler !== nil then
      fh <- ct.beginHandlerBlock[failurehandler]
    end if
    if unavailablehandler !== nil then
      uh <- ct.beginHandlerBlock[unavailablehandler]
      uh$name <- 1
      if unavailablehandler[0] !== nil then
	const thesym : Symbol <- (view unavailablehandler[0][0] as Sym)$mysym
	uh$varOffset <- thesym$offset
      end if
    end if
    stats.generate[xct]
    if uh !== nil then ct.endHandlerBlock end if
    if fh !== nil then ct.endHandlerBlock end if
  end generate

  export function asString -> [r : String]
    r <- "block"
  end asString
end Block
@


1.11
log
@Flatten invocations to reduce jibberish on the stack
@
text
@d55 5
@


1.10
log
@Implement unavailable handers
@
text
@a49 27
  export operation typeCheck 
    var lastLineNumber : Integer <- 0
    for i : Integer <- 0 while i <= stats.upperbound by i <- i + 1
      const it <- stats[i]
      if it$ln != 0 then
	lastLineNumber <- it$ln
      else
	lastLineNumber <- lastLineNumber + 1
      end if
      const itsname <- nameof it
      if itsname = "aninvoc" or 
	  itsname = "astarinvoc" or 
	  itsname = "aquestinvoc" then
	const junk <- it.getAT
      elseif itsname = "anexp" or
	  itsname = "anunaryexp" or
	  itsname = "aliteral" or
	  itsname = "anxview" or
	  itsname = "anewexp" or
	  itsname = "asym" then
	Environment$env.SemanticError[lastLineNumber,
	  "Found an expression where a statement was expected", nil]
      end if
    end for
    FTree.typeCheck[self]
  end typeCheck

@


1.9
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d78 1
d80 4
a83 7
    if failurehandler == nil then
      stats.generate[xct]
    else
      const ct <- view xct as ByteCode
      ct.beginHandlerBlock[failurehandler]
      stats.generate[xct]
      ct.endHandlerBlock
d85 11
@


1.8
log
@Catch expressions in statement contexts
@
text
@d52 1
a52 1
    for i : Integer <- 0 while i < stats.upperbound by i <- i + 1
@


1.7
log
@Checkpoint of DIKU August 94 changes
@
text
@d50 27
@


1.6
log
@First attempt at abcons
@
text
@d42 1
@


1.5
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d54 1
a54 4
      const ct <- view xct as typeobject t
	operation beginHandlerBlock[Tree]
	operation endHandlerBlock
      end t
@


1.4
log
@Implemented failure handling
@
text
@d41 1
a41 1
    self$st <- SymbolTable.create[pst, STContext.CBlock]
@


1.3
log
@Removed all monitors
@
text
@a3 1
    field needsNoInvokeQueue : Boolean <- false
d33 4
a36 2
      if unavailablehandler !== nil then nunavailablehandler <- unavailablehandler.copy[i] end if
      if failurehandler !== nil then nfailurehandler <- failurehandler.copy[i] end if
d48 15
@


1.2
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a37 1
  end monitor
@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable, STContext from "Jekyll"
export Block to "Jekyll"
@
