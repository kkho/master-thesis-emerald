head	1.15;
access;
symbols
	105alpha:1.15
	104alpha:1.15
	103alpha:1.15
	102alpha:1.15
	101alpha:1.15
	100alpha:1.15
	DIKU_0:1.13
	carlton_start:1.9
	immel_start:1.5;
locks; strict;


1.15
date	95.04.04.05.08.43;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	94.08.17.16.50.37;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	94.03.02.19.00.09;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	93.12.20.21.09.00;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	93.06.10.15.51.27;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	93.03.02.18.32.43;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.10.17.06.55;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.05.17.01.21.42;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.05.14.23.15.07;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.51.56;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.51.52;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.51.51;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.15
log
@Fix serious GC bugs, add a new builtin
@
text
@const OIDWriter <- immutable object OIDWriter
  export operation Out [Seq : Integer, File : OutStream]
    file.writeInt[0, 4]   % IPAddress
    file.writeInt[0, 1]   % Emerald Instance
    file.writeInt[0, 1]   % Unused
    file.writeInt[0, 2]   % Epoch
    file.writeInt[Seq, 4] % Sequence
  end Out
  export operation OutX [seq : Integer, unused : Integer, file : OutStream]
    file.writeInt[0, 4]   % IPAddress
    file.writeInt[0, 1]   % Emerald Instance
    file.writeInt[unused, 1]   % Unused
    file.writeInt[0, 2]   % Epoch
    file.writeInt[Seq, 4] % Sequence
  end OutX
end OIDWriter

export OIDWriter

const CStringCT <- immutable object CStringCT
  const obj <- "-OB-"
  const stringCTOID <- 0x180b
  const myind <- object x
      field myind : Integer <- ~1
      field myq : CPQueue
  end x
  export operation fetchIndex -> [r : Integer]
    r <- myind$myind
  end fetchIndex
  
  export operation getIndex [start : Integer, q : CPQueue]
    if myind$myq !== q then
      myind$myq <- q
      q.addUpper[self]
      myind$myind <- q.upperbound
    end if
  end getIndex
  
  export operation CPoint [file : OutStream]
    file.putString[obj]
    OIDWriter.Out[stringCTOID, file]
  end CPoint
end CStringCT

const CString <- class CString
    field others : aoa
    field s : String <- ""
    var myind : Integer <- ~1
    field myid : Integer
    const stringId <- 38
    const obj <- "+OB+"
    const objxid <- "+OB-"

    export operation getAnID 
      myid <- nextOID.nextOID
      if Environment$env$generateBuiltin then
	primitive "INSTALLINOID" [] <- [myid, s]
      end if
    end getAnID

    export operation fetchIndex -> [r : Integer]
      r <- myind
    end fetchIndex

    export operation getIndex [start : Integer, q : CPQueue]
      if myind < 0 then
	q.addUpper[self]
	myind <- q.upperbound
	CStringCT.getIndex[start, q]
	if others !== nil then
	  for i : Integer <- 0 while i <= others.upperbound by i <- i + 1
	    const y : CPAble <- view others[i] as CPAble
	    y.getIndex[start, q]
	  end for
	end if
      end if
    end getIndex

    export operation cpoint [file : OutStream]
      var rest : Integer
      if myid !== nil then
	file.putString[obj]
	file.writeInt[16 + 4 + (s.length + 3) / 4 * 4, 4]
	OIDWriter.Out[myid, file]
 	file.writeInt[0x40000000 + CStringCT.fetchIndex, 4]
      else
	file.putString[objxid]
	file.writeInt[4 + 4 + (s.length + 3) / 4 * 4, 4]
 	file.writeInt[0x00000000 + CStringCT.fetchIndex, 4]
      end if
      file.writeInt[s.length, 4]
      file.putstring[s]
      rest <- 4 - s.length # 4
      if rest = 4 then rest <- 0 end if
      loop
	exit when rest = 0
	file.putchar['*']
	rest <- rest - 1
      end loop
    end cpoint
end CString

export CString


const CIntsCT <- immutable object CIntsCT
  const obj <- "-OB-"
  const instctOID <- 0x1827
  const myind <- object x
      field myind : Integer <- ~1
      field myq : CPQueue
  end x
  export operation fetchIndex -> [r : Integer]
    r <- myind$myind
  end fetchIndex
  
  export operation getIndex [start : Integer, q : CPQueue]
    if myind$myq !== q then
      myind$myq <- q
      q.addUpper[self]
      myind$myind <- q.upperbound
    end if
  end getIndex
  
  export operation CPoint [file : OutStream]
    file.putString[obj]
    OIDWriter.Out[instctOID, file]
  end CPoint
end CIntsCT

const IntPair <- class IntPair[pfirst : Integer, psecond : Integer]
  export function first -> [r : Integer]
    r <- pfirst
  end first
  export function second -> [r : Integer]
    r <- psecond
  end second
  export function = [o : IntPair] -> [r : Boolean]
    r <- pfirst = o.first and psecond = o.second
  end =
end IntPair

const aoip <- Array.of[IntPair]
export IntPair
export aoip

const CInts <- class CInts[ps : aoip]
    const s : aoip <- ps
    var myind : Integer <- ~1
    const objxid <- "+OB-"

    export operation fetchIndex -> [r : Integer]
      r <- myind
    end fetchIndex

    export operation getIndex [start : Integer, q : CPQueue]
      if myind < 0 then
	q.addUpper[self]
	myind <- q.upperbound
	CIntsCT.getIndex[start, q]
      end if
    end getIndex

    export operation cpoint [file : OutStream]
      file.putString[objxid]
      file.writeInt[4 + 4 + (s.upperbound + 1) * 16, 4]
      file.writeInt[0x00000000 + CIntsCT.fetchIndex, 4]
      file.writeInt[(s.upperbound + 1) * 4, 4]
      for i : Integer <- 0 while i <= s.upperbound by i <- i + 1
        OIDWriter.OutX[s[i].first, s[i].second, file]
	file.writeInt[0x80000000, 4]
      end for
    end cpoint
end CInts

export CInts

@


1.14
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d108 1
a108 1
  const instctOID <- 0x1823
a164 1
      const stars <- "****"
d171 1
a171 1
	file.putString[stars]
@


1.13
log
@Checkpoint of DIKU August 94 changes
@
text
@d72 1
a72 2
	    const x <- others[i]
	    const y <- view x as CPAble
@


1.12
log
@First attempt at abcons
@
text
@a44 2
const aoa <- Array.of[Any]

@


1.11
log
@Prepare to generate ab/cons and invokes by index
@
text
@d75 1
a75 1
	    const y <- view x as typeobject t op getIndex[Integer, CPQueue] end t
@


1.10
log
@Finalized merge with Mark Immels version
@
text
@d9 7
d18 2
d134 11
a144 1
const aoi <- Array.of[Integer]
d146 6
a151 2
const CInts <- class CInts[ps : aoi]
    const s : aoi <- ps
d174 1
a174 1
        OIDWriter.Out[s[i], file]
@


1.9
log
@Convert to the new subscript syntax a[b]
@
text
@d1 9
a12 1
  const stars <- "****"
d32 1
a32 2
    file.putString[stars]
    file.writeInt[stringCTOID, 4]
d36 2
d39 1
a39 1
    field others : Array.of[Any]
a45 1
    const stars <- "****"
d75 1
a75 1
      if myid !== nil then      
d77 3
a79 4
	file.writeInt[8 + 4 + 4 + (s.length + 3) / 4 * 4, 4]
	file.putString[stars]
	file.writeInt[myid, 4]
	file.writeInt[0x40000000 + CStringCT.fetchIndex, 4]
d83 1
a83 1
	file.writeInt[0x00000000 + CStringCT.fetchIndex, 4]
d90 1
a90 1
	exit when rest == 0
a101 1
  const stars <- "****"
d121 1
a121 2
    file.putString[stars]
    file.writeInt[instctOID, 4]
a130 1
    const stars <- "****"
d145 1
d147 3
a149 3
      file.writeInt[4 + 4 + (s.upperbound + 1) * 12, 4]
      file.writeInt[CIntsCT.fetchIndex, 4]
      file.writeInt[(s.upperbound + 1) * 3, 4]
d151 1
a151 2
	file.putString[stars]
	file.writeInt[s[i], 4]
@


1.8
log
@Implement external dictionary for symbol lookups
@
text
@d57 1
a57 1
	    const x <- others(i)
d147 1
a147 1
	file.writeInt[s(i), 4]
@


1.7
log
@Optimized checkpoint file format for objects without ids
@
text
@a28 1

d91 64
@


1.6
log
@Removed all monitors
@
text
@d37 1
d68 4
a71 4
      file.putString[obj]
      file.writeInt[8 + 4 + 4 + (s.length + 3) / 4 * 4, 4]
      file.putString[stars]
      if myid !== nil then
d75 2
a76 1
	file.putString[stars]
@


1.5
log
@Conditionally install id
@
text
@a6 1
    monitor
a8 1
    end monitor
a30 1
  monitor
a86 1
  end monitor
@


1.4
log
@Do not set HASOID for objects without interesting ids
@
text
@d44 3
a46 1
      primitive "INSTALLINOID" [] <- [myid, s]
@


1.3
log
@type -> typeobject sed
@
text
@d73 1
d76 1
a77 1
      file.writeInt[0x40000000 + CStringCT.fetchIndex, 4]
@


1.2
log
@Implemented executenow
@
text
@a0 2
import CPQueue from "Jekyll"
import nextOID from "Jekyll"
d59 1
a59 1
	    const y <- view x as type t op getIndex[Integer, CPQueue] end t
d90 1
a90 1
export CString to "Jekyll"
@


1.1
log
@Initial revision
@
text
@d46 1
@
