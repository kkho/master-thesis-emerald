head	1.8;
access;
symbols
	105alpha:1.8
	104alpha:1.8
	103alpha:1.8
	102alpha:1.8
	101alpha:1.8
	100alpha:1.8
	DIKU_0:1.8
	carlton_start:1.5
	immel_start:1.4;
locks; strict;


1.8
date	94.08.22.23.43.54;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.05.23.16.25.58;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.58.08;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.58.06;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.58.05;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.8
log
@August 94 Checkpoint II
@
text
@export Stringlit

const stringlit <- class Stringlit (Tree) [xxstr : String]
  const myindex <- 0x0b
  const field str : String <- xxstr

  export operation copy [i : Integer] -> [r : Tree]
    r <- self
  end copy

  export function asString -> [r : String]
    var s : String
    if str.length < 20 then
      s <- str
    else
      s <- str[0, 20] || "..."
    end if
    r <- "stringlit (" || s || ")"
  end asString

  export operation getIsNotManifest -> [r : Boolean]
    r <- false
  end getIsNotManifest
  export operation execute -> [r : Tree]
    r <- self
  end execute
  export operation getAT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstAT
  end getAT
  export operation getCT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstCT
  end getCT
  export operation generate [ct : Printable]
    const mycs <- CString.create
    const bc <- view ct as ByteCode

    mycs$s <- str
    mycs.getAnID
    bc.fetchLiteral[mycs$myid]
    if bc$size != 4 then
      bc.fetchVariableSecondThing[0x1800 + myindex, 0x1600 + myindex] 
    end if
    bc.addOther[mycs]
  end generate
end Stringlit
@


1.7
log
@First attempt at abcons
@
text
@d16 1
a16 1
      s <- str.getslice[0, 20] || "..."
@


1.6
log
@Preparatory work for Ab/Cons
@
text
@d35 2
a36 8
    const bc <- view ct as typeobject BCType
      operation addCode[String]
      operation addValue[Integer, Integer]
      function  getSize -> [Integer]
      operation addOther[Any]
      operation fetchLiteral [Integer]
      operation fetchVariableSecondThing[Integer, Integer]
    end BCType
@


1.5
log
@Get rid of return on generate
@
text
@d41 1
d46 3
a48 1
    if bc$size != 4 then bc.fetchLiteral[0x1800 + myindex] end if
@


1.4
log
@Clean up literals
@
text
@d33 1
a33 1
  export operation generate [ct : Printable]-> [rct : None]
@


1.3
log
@type -> typeobject sed
@
text
@d4 2
a5 2
  monitor
    const field str : String <- xxstr
d7 3
a9 10
    export function upperbound -> [r : Integer]
      r <- ~1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
    end getElement
    export operation setElement [i : Integer, r : Tree]
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      r <- self
    end copy
d11 9
a19 10
    export function asString -> [r : String]
      var s : String
      if str.length < 20 then
	s <- str
      else
	s <- str.getslice[0, 20] || "..."
      end if
      r <- "stringlit (" || s || ")"
    end asString
  end monitor
d28 1
a28 1
    r <- builtinlit.create[self$ln, 0x0b].getInstAT
d31 1
a31 1
    r <- builtinlit.create[self$ln, 0x0b].getInstCT
d42 1
a42 1
    mycs$s <- self$str
d45 1
a45 1
    if bc$size != 4 then bc.fetchLiteral[0x180b] end if
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 5
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import BuiltinLit from "Jekyll"
import CString from "Jekyll"
export Stringlit to "Jekyll"
d43 1
a43 1
    const bc <- view ct as type BCType
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
  export operation generate [ct : Printable]
@
