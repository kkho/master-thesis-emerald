head	1.7;
access;
symbols
	105alpha:1.6
	104alpha:1.6
	103alpha:1.6
	102alpha:1.6
	101alpha:1.6
	100alpha:1.6
	DIKU_0:1.5;
locks; strict;
comment	@# @;


1.7
date	2007.06.11.01.36.42;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	95.09.26.15.25.49;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	94.08.22.23.43.46;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	94.08.17.16.50.41;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	94.06.10.05.21.58;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	94.03.11.00.18.31;	author norm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Check in current version
@
text
@const hasIdent <- typeobject hasIdent
  function getID -> [Ident]
end hasIdent

const hasID <- typeobject hasID
  function getID -> [Integer]
end hasID

const hasConforms <- typeobject hasConforms
  op conformsTo[Integer, Tree] -> [Boolean]
  op asType -> [Tree]
end hasConforms

const hasStr <- typeobject hasStr
  function getStr -> [String]
end hasStr

const hasInstCT <- typeobject hasInstCT
  function asString -> [String]
  function getInstCT -> [Tree]
end hasInstCT

const hasInstAT <- typeobject hasInstAT
  function getInstAT -> [Tree]
end hasInstAT

const hasVariableSize <- typeobject hasVariableSize
  function getBrand -> [Character]
  function variableSize -> [Integer]
end hasVariableSize

const hasInstSize <- typeobject hasInstSize
  function getInstanceSize -> [Integer]
end hasInstSize

const hasIDs <- typeobject hasIDs
    function getid -> [Integer]
    function getATOID -> [Integer]
    function getcodeOID -> [Integer]
    function getinstCTOID -> [Integer]
    function getinstATOID -> [Integer]
end hasIDs

const hasThisObject <- typeobject hasThisObject
  function getThisObject -> [Tree]
end hasThisObject

const Attachable <- typeobject Attachable
  operation setIsAttached [Boolean]
end Attachable
const Monitorable <- typeobject Monitorable
  function  getIsMonitored -> [Boolean]
  operation setIsMonitored [Boolean]
  function  getIsSynchronized -> [Boolean]
  operation setIsSynchronized [Boolean]
end Monitorable
const hasName <- typeobject hasName
  function getName -> [ Ident ]
end hasName
const TreeMaker <- immutable typeobject TreeMaker
  operation create[Integer, Tree, Tree, Tree] -> [Tree]
end TreeMaker
const InvocType <- immutable typeobject InvocType
  operation create[Integer, Tree, Ident, Tree] -> [Tree]
end InvocType
const AtlitType <- immutable typeobject AtlitType
  operation create[Integer, Tree, Tree, Tree] -> [Tree]
end AtlitType

const aoa <- Array.of[Any]
const aoi <- Array.of[Integer]
const aoc <- Array.of[Character]
const aot <- Array.of[Tree]

export hasIdent, hasID, hasConforms, hasStr, hasInstCT, hasInstAT,
       hasVariableSize, hasIDs, hasThisObject, hasInstSize, InvocType,
       AtlitType,
       attachable, monitorable, hasName, TreeMaker, aoa, aoi, aoc, aot
@


1.6
log
@Make type stuff work
@
text
@d54 2
@


1.5
log
@August 94 Checkpoint II
@
text
@d64 3
d75 1
@


1.4
log
@Checkpoint of DIKU August 94 changes
@
text
@a10 1
  op conformsTo[Integer, Tree]->[Boolean]
@


1.3
log
@Reinstalled support for monitored objects and conditions
@
text
@d39 1
d57 1
a57 1
  function getName -> [ Tree ]
d62 3
d66 5
d72 2
a73 2
       hasVariableSize, hasIDs, hasThisObject, hasInstSize,
       attachable, monitorable, hasName, TreeMaker
@


1.2
log
@First attempt at abcons
@
text
@d51 4
d64 1
a64 1
       attachable, hasName, TreeMaker
@


1.1
log
@Initial revision
@
text
@d1 60
@
