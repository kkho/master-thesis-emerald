head	1.10;
access;
symbols
	105alpha:1.10
	104alpha:1.10
	103alpha:1.10
	102alpha:1.10
	101alpha:1.10
	100alpha:1.10
	DIKU_0:1.8
	carlton_start:1.6
	immel_start:1.3;
locks; strict;


1.10
date	96.03.28.23.05.29;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	94.08.17.16.51.24;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.17.07.16;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.54.27;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.54.26;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.54.25;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.10
log
@Flatten invocations to reduce jibberish on the stack
@
text
@export Loopstat

const loopstat <- class Loopstat (Tree) [xxstats : Tree]
    field stats : Tree <- xxstats
    field st  : SymbolTable

    export function upperbound -> [r : Integer]
      r <- 0
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- stats
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	stats <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nstats : Tree
      if stats !== nil then nstats <- stats.copy[i] end if
      r <- loopstat.create[ln, nstats]
    end copy

    export operation generate [xct : Printable]
      const bc <- view xct as ByteCode
      const top : Integer <- bc.declareLabel
      const bottom : Integer <- bc.declareLabel
      bc.defineLabel[top]
      if stats !== nil then
	bc.nest[bottom]
	stats.generate[xct]
	bc.unnest
      end if
      bc.addCode["BR"]
      bc.addLabelReference[top, 2]
      bc.defineLabel[bottom]
    end generate

  export operation defineSymbols[pst : SymbolTable]
    self$st <- SymbolTable.create[pst, CBlock]
    self$st$mytree <- self
    FTree.defineSymbols[self$st, self]
  end defineSymbols

  export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
    FTree.resolveSymbols[self$st, self, 0]
  end resolveSymbols

  export function asString -> [r : String]
    r <- "loopstat"
  end asString
end Loopstat
@


1.9
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@a25 27
  export operation typeCheck 
    var lastLineNumber : Integer <- 0
    for i : Integer <- 0 while i <= stats.upperbound by i <- i + 1
      const it <- stats[i]
      if it$ln != 0 then
	lastLineNumber <- it$ln
      else
	lastLineNumber <- lastLineNumber + 1
      end if
      const itsname <- nameof it
      if itsname = "aninvoc" or 
	  itsname = "astarinvoc" or 
	  itsname = "aquestinvoc" then
	const junk <- it.getAT
      elseif itsname = "anexp" or
	  itsname = "anunaryexp" or
	  itsname = "aliteral" or
	  itsname = "anxview" or
	  itsname = "anewexp" or
	  itsname = "asym" then
	Environment$env.SemanticError[lastLineNumber,
	  "Found an expression where a statement was expected", nil]
      end if
    end for
    FTree.typeCheck[self]
  end typeCheck

@


1.8
log
@Checkpoint of DIKU August 94 changes
@
text
@d25 28
d55 2
a56 2
      const top <- bc.declareLabel
      const bottom <- bc.declareLabel
@


1.7
log
@First attempt at abcons
@
text
@d42 1
@


1.6
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d26 1
a26 8
      const bc <- view xct as typeobject T
	  operation declareLabel -> [Integer]
	  operation addLabelReference [label: Integer, size : Integer]
	  operation addCode[String]
	  operation defineLabel[Integer]
	  operation nest [Integer]
	  operation unnest
	end T
@


1.5
log
@Get rid of return on generate
@
text
@d48 1
a48 1
    self$st <- SymbolTable.create[pst, STContext.CBlock]
@


1.4
log
@Removed all monitors
@
text
@d25 1
a25 2
    export operation generate [xct : Printable] -> [rct : None]
      var junk : Any
d39 1
a39 1
	junk <- stats.generate[xct]
@


1.3
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a46 1
  end monitor
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable, STContext from "Jekyll"
export Loopstat to "Jekyll"
d28 1
a28 1
      const bc <- view xct as type T
@


1.1
log
@Initial revision
@
text
@d28 2
a29 1
    export operation generate [xct : Printable]
d43 1
a43 1
	stats.generate[xct]
@
