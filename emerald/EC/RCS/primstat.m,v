head	1.12;
access;
symbols
	105alpha:1.12
	104alpha:1.12
	103alpha:1.12
	102alpha:1.12
	101alpha:1.12
	100alpha:1.12
	DIKU_0:1.10
	carlton_start:1.9
	immel_start:1.4;
locks; strict;


1.12
date	97.01.22.00.03.20;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	93.03.11.00.14.51;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.10.17.07.28;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.04.07.18.09.23;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.56.03;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.56.01;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.56.00;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.12
log
@Many changes
@
text
@export Primstat

const primstat <- class Primstat (Tree) [xxself : Tree, xxvar : Tree, xxnumber : Tree, xxvars : Tree, xxvals : Tree]
    field xself  : Tree <- xxself
    field xvar   : Tree <- xxvar
    field number : Tree <- xxnumber
    field vars   : Tree <- xxvars
    field vals   : Tree <- xxvals

    export function upperbound -> [r : Integer]
      r <- 4
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- xself
      elseif i = 1 then
	r <- xvar
      elseif i = 2 then
	r <- number
      elseif i = 3 then
	r <- vars
      elseif i = 4 then
	r <- vals
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	xself <- r
      elseif i = 1 then
	xvar <- r
      elseif i = 2 then
	number <- r
      elseif i = 3 then
	vars <- r
      elseif i = 4 then
	vals <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nxself, nxvar, nnumber, nvars, nvals : Tree
      if xself !== nil then nxself <- xself.copy[i] end if
      if xvar !== nil then nxvar <- xvar.copy[i] end if
      if number !== nil then nnumber <- number.copy[i] end if
      if vars !== nil then nvars <- vars.copy[i] end if
      if vals !== nil then nvals <- vals.copy[i] end if
      r <- primstat.create[ln, nxself, nxvar, nnumber, nvars, nvals]
    end copy

    export operation typeCheck
      if vars !== nil then
	for i: Integer <- 0 while i <= vars.upperbound by i <- i + 1
	  const lv <- view vars[i] as Sym
	  const thesym <- lv$mysym
	  const thekind <- thesym$mykind
	  if thekind = SConst or thekind = SParam then
	    Environment$env.SemanticError[ln, "Attempt to store into constant symbol %S", { thesym$myident }]
	  end if
	end for
      end if
      FTree.typeCheck[self]
    end typeCheck

    export operation generate [x : Printable]
      const bc <- view x as ByteCode
      const hasGenerateLValue <- typeobject hasGenerateLValue
	operation generateLValue[Printable]
      end hasGenerateLValue
      var lv : hasGenerateLValue
      var first : String
      var instSize : Integer <- 0
      const thisobj <- (view Environment$env as hasThisObject)$thisObject
      if nameof thisobj = "anoblit" then
	instSize <- (view thisObj as hasInstSize)$instanceSize  
      end if
      bc.lineNumber[self$ln]
      bc$usedPrimitive <- true

      if xvar !== nil then
	% all things are assumed vars
	bc.pushSize[8]	
      else
	bc.pushSize[4]
      end if
      if xself !== nil then
	% generate self
	if bc$size = 4 then
	  bc.addCode["LDSELF"]
	else
	  bc.addCode["LDSELFV"]
	end if
      end if

      if instSize == ~8 then
	if number !== nil then
	  first <- (view number[0] as hasStr)$str
	  if first = "SET" then
	    assert vals.upperbound = 1
	    vals[0].generate[x]
	    bc.pushSize[8]
	    vals[1].generate[x]
	    bc.popSize
	  else
	    % generate the vals on the stack
	    if vals !== nil then vals.generate[x] end if
	  end if
	else
	  % generate the vals on the stack
	  if vals !== nil then vals.generate[x] end if
	end if
      else
	% generate the vals on the stack
	if vals !== nil then vals.generate[x] end if
      end if
      
      if number !== nil then
	const limit <- number.upperbound
	for i : Integer <- 0 while i <= limit by i <- i + 1
	  const v <- view number[i] as hasStr
	  const s : String <- v$str
	  if s[0] >= '0' and s[0] <= '9' then
	    const primno <- Integer.Literal[s]
	    bc.addValue[primno, 1]
	  else
	    if s = "SET" and instSize = ~8 then
	      bc.addCode["SETV"]
	    elseif s = "GET" and instSize = ~8 then
	      bc.addCode["GETV"]
	    else
	      bc.addCode[s]
	      if s = "LDIS" then
		bc.alignTo[2]
	      end if
	    end if
	  end if

	end for
      end if

      % store the results back to the vars
      % This has to go backwards through the vars
      if vars !== nil then
	for i: Integer <- vars.upperbound while i >= 0 by i <- i - 1
	  lv <- view vars[i] as hasGenerateLValue
	  if instSize = ~8 and first = "GET" then
	    bc.pushSize[8]
	    lv.generateLValue[bc]
	    bc.popSize
	  else
	    lv.generateLValue[bc]
	  end if
	end for
      end if
      bc.popSize
    end generate

  export function asString -> [r : String]
    r <- "primstat"
  end asString
end Primstat
@


1.11
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d86 5
a90 1
	bc.addCode["LDSELF"]
@


1.10
log
@First attempt at abcons
@
text
@d48 15
d115 1
a115 1
	  const s <- v$str
@


1.9
log
@Convert to the new subscript syntax a[b]
@
text
@a52 1
      const hasGetStr <- typeobject X function getStr -> [String] end X
a54 1
      const hasInstSize <- typeobject t function getInstanceSize -> [Integer] end t
a55 1
      const hasThisObject <- typeobject t function getThisObject -> [Tree] end t
d76 1
a76 1
	  first <- (view number[0] as hasGetStr)$str
d99 1
a99 1
	  const v <- view number[i] as hasGetStr
@


1.8
log
@Optimize away setting of result CT on some invocs
@
text
@d79 1
a79 1
	  first <- (view number(0) as hasGetStr)$str
d82 1
a82 1
	    vals(0).generate[x]
d84 1
a84 1
	    vals(1).generate[x]
d102 1
a102 1
	  const v <- view number(i) as hasGetStr
d104 1
a104 1
	  if s(0) >= '0' and s(0) <= '9' then
d127 1
a127 1
	  lv <- view vars(i) as hasGenerateLValue
@


1.7
log
@Use nameof rather than asString
@
text
@d64 1
@


1.6
log
@Get rid of return on generate
@
text
@d60 1
a60 1
      if thisobj.asString = "oblit" then
@


1.5
log
@Removed all monitors
@
text
@d48 1
a48 2
    export operation generate [x : Printable] -> [rct : None]
      var junk : Any
d81 1
a81 1
	    junk <- vals(0).generate[x]
d83 1
a83 1
	    junk <- vals(1).generate[x]
d87 1
a87 1
	    if vals !== nil then junk <- vals.generate[x] end if
d91 1
a91 1
	  if vals !== nil then junk <- vals.generate[x] end if
d95 1
a95 1
	if vals !== nil then junk <- vals.generate[x] end if
@


1.4
log
@Implement padded bytecodes (operands aligned)
@
text
@a3 1
  monitor
a138 1
  end monitor
@


1.3
log
@type -> typeobject sed
@
text
@d115 3
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 6
import ByteCode from "Jekyll"
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import Seq from "Jekyll"
import Environment from "Jekyll"
export Primstat to "Jekyll"
d52 1
a52 1
      const hasGenerateLValue <- type hasGenerateLValue
d55 1
a55 1
      const hasGetStr <- type X function getStr -> [String] end X
d58 1
a58 1
      const hasInstSize <- type t function getInstanceSize -> [Integer] end t
d60 1
a60 1
      const hasThisObject <- type t function getThisObject -> [Tree] end t
@


1.1
log
@Initial revision
@
text
@d54 2
a55 1
    export operation generate [x : Printable]
d88 1
a88 1
	    vals(0).generate[x]
d90 1
a90 1
	    vals(1).generate[x]
d94 1
a94 1
	    if vals !== nil then vals.generate[x] end if
d98 1
a98 1
	  if vals !== nil then vals.generate[x] end if
d102 1
a102 1
	if vals !== nil then vals.generate[x] end if
@
