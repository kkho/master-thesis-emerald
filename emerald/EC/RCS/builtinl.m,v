head	1.25;
access;
symbols
	105alpha:1.25
	104alpha:1.25
	103alpha:1.25
	102alpha:1.25
	101alpha:1.25
	100alpha:1.25
	DIKU_0:1.18
	carlton_start:1.14
	immel_start:1.6;
locks; strict;


1.25
date	98.02.09.17.55.34;	author norm;	state Exp;
branches;
next	1.24;

1.24
date	97.01.22.00.03.20;	author norm;	state Exp;
branches;
next	1.23;

1.23
date	95.11.23.17.14.17;	author norm;	state Exp;
branches;
next	1.22;

1.22
date	95.06.22.04.45.16;	author norm;	state Exp;
branches;
next	1.21;

1.21
date	95.04.04.05.08.43;	author norm;	state Exp;
branches;
next	1.20;

1.20
date	94.12.06.20.12.48;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.08.17.16.50.33;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	93.12.20.21.09.00;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.06.09.22.17.57;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.02.17.17.18.37;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.10.17.06.50;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.07.18.18.00.40;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.03.27.15.38.43;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.04.22.22.50.54;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.50.52;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.50.50;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.50.49;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.50.47;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.25
log
@Checkpoint
@
text
@
export Builtinlit

const builtinnames <- immutable object builtinnames
  const names <- {
      "type",
      "any",
      "array",
      "boolean",
      "character",
      "condition",
      "integer",
      "none",
      "node",
      "signature",
      "real",
      "string",
      "vector",
      "time",
      "nodelistelement",
      "nodelist",
      "instream",
      "outstream",
      "immutablevector",
      "bitchunk",
      "sequenceofcharacter",
      "handler",
      "vectorofchar",
      "rdirectory",
      "concretetype",
      "copvector",
      "copvectore",
      "aopvector",
      "aopvectore",
      "aparamlist",
      "vectorofint",
      "interpreterstate",
      "directory",
      "immutablevectorofany",
      "sequenceofany",
      "immutablevectorofint",
      "sequence",
      "stub",
      "directorygaggle",
      "literallist",
      "vectorofany",
      "immutablevectorofstring",
      "vectorofstring"
      }
  
  export operation getName [index : Integer] -> [name : String]
    if 0 <= index and index <= names.upperbound then
      name <- names[index]
    end if
  end getName
end builtinnames

const builtinlit <- class Builtinlit (Tree) [ xxwhich : Integer ]

  class export operation init -> [r : SymbolTable]
    var ss : Symbol
    const it : IdentTable <- Environment.getEnv.getITable
    var i : Integer <- 0

    r <- SymbolTable.create[nil, COutside]
    loop
      const name <- builtinnames.getName[i]
      exit when name == nil
      ss <- r.Define[0, it.lookup[name, 999], SConst, false]
      ss$value <- builtinlit.create[0, i]
      i <- i + 1
    end loop
  end init

  class export operation findTree [id : Integer, t : Tree] -> [r : Tree]
    var name : String 
    var index : Integer
    r <- t

    if id == nil then return end if
    if 0x1000 <= id and id <= 0x1040 then
      index <- id - 0x1000
    elseif 0x1200 <= id and id <= 0x1240 then
      index <- id - 0x1200
    elseif 0x1400 <= id and id <= 0x1440 then
      index <- id - 0x1400
    elseif 0x1600 <= id and id <= 0x1640 then
      index <- id - 0x1600
    elseif 0x1800 <= id and id <= 0x1840 then
      index <- id - 0x1800
    end if
    name <- builtinnames.getName[index]
    if name == nil then return end if
    r <- view Environment$env$rootst.Lookup[0,
      Environment$env$ITable.Lookup[name, 999], false]$value as Tree
  end findTree

    field which : Integer <- xxwhich

    export function upperbound -> [r : Integer]
      r <- ~1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
    end getElement
    export operation setElement [i : Integer, r : Tree]
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      r <- self
    end copy
    export function getID -> [r : Integer]
      r <- 0x1000 + which
    end getID
    export function getCodeOID -> [r : Integer]
      r <- 0x1400 + which
    end getCodeOID
    export operation setID [newid : Integer]
      which <- newid - 0x1000
    end setID

  export operation getIsNotManifest -> [r : Boolean]
    r <- false
  end getIsNotManifest

  export operation setIsNotManifest [r : Boolean]
    assert false
  end setIsNotManifest

  export operation generate [xct : Printable]
    const bc <- view xct as ByteCode
    bc.fetchLiteral[0x1000 + self$which]
    bc.finishExpr[4, 0x1400 + which, 0x1200 + which] 
  end generate

  export function asString -> [r : String]
    r <- "builtinlit"
  end asString

  export operation execute -> [r : Tree]
    r <- self
  end execute
  
  export function asType -> [r : Tree]
    var x : BuiltinLit
    if which >= 0x600 then
      x <- self
    elseif which = 0x2 or which = 0xc or which = 0x12 then
      r <- nil
      return
    else
      x <- builtinlit.create[self$ln, 0x600 + which]
    end if
    r <- x.getInstAT
    if r == nil then r <- x end if
  end asType

  export operation getAT -> [r : Tree]
    r <- BuiltinLit.findTree[self$id, self]
    if nameof r = "anoblit" then
      r <- r.getAT
    else
      r <- globalref.create[ln, nil, nil, IDS.IDToATID[self$id], nil, nil]
    end if
  end getAT

  export operation getCT -> [r : Tree]
    r <- BuiltinLit.findTree[self$id, self]
    if nameof r != "anoblit" then
      const ctid : Integer <- IDS.IDToCTID[self$id]
      if ctid !== nil then
	r <- globalref.create[ln, nil, nil, ctid, nil, nil]
      end if
    end if
  end getCT

  export operation getInstCT -> [r : Tree]
    r <- BuiltinLit.findTree[self$id, self]
    if r == nil then return end if
    if nameof r = "anoblit" then
      const foo <- view r as hasInstCT
      const env : EnvironmentType <- Environment$env
      if env$traceinline then env.printf["builtinlit.getinstct: target is %s\n", 
	{ foo.asString} ]
      end if
      r <- foo.getInstCT
      if env$traceinline then env.printf["builtinlit.getinstct: answer is %s\n",
	{ FTree.getString[r]} ]
      end if
    else
      const ctid : Integer <- IDS.IDToInstCTID[self$id]
      if ctid !== nil then
	r <- globalref.create[ln, nil, nil, ctid, nil, nil]
      end if
    end if
  end getInstCT

  export operation getInstAT -> [r : Tree]
    r <- BuiltinLit.findTree[self$id, self]
    if r == nil then return end if
    if nameof r = "anoblit" then
      const foo <- view r as hasInstAT
      r <- foo.getInstAT
    elseif which = 0x2 or which = 0xc or which = 0x12 then
      % Array, Vector, and ImmutableVector don't have instATs
      r <- nil
    else
      if which >= 0x600 then
	r <- self
      else
	r <- builtinlit.create[self$ln, 0x600 + which]
      end if
    end if
  end getInstAT

  export function variableSize -> [size : Integer]
    size <- IDS.IDToSize[self$id]
  end variableSize

  export function getBrand -> [brand : Character]
    brand <- IDS.IDToBrand[self$id]
  end getBrand

  export operation conformsTo [theln : Integer, other : Tree] -> [r : Boolean]
    const otherashasid <- view other as hasid
    const otherid : Integer <- otherashasid$id
    r <- IDs.ConformsById[theln, self$id, otherid]
  end conformsTo
end Builtinlit
@


1.24
log
@Many changes
@
text
@d29 1
a29 1
      "buffer",
d44 1
a44 1
      "reader",
d46 4
a49 1
      "vectorofany" }
@


1.23
log
@New builtins
@
text
@d26 1
a26 1
      "risc",
d40 1
a40 1
      "risa",
d42 1
a42 1
      "decoder",
@


1.22
log
@Implement unavailable handers
@
text
@d45 2
a46 1
      "literallist" }
@


1.21
log
@Fix serious GC bugs, add a new builtin
@
text
@d109 3
@


1.20
log
@Clean up generating the second things in references
@
text
@d43 3
a45 1
      "stub" }
@


1.19
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d122 1
a122 3
    if bc$size != 4 then 
      bc.fetchVariableSecondThing[0x1400 + which, 0x1200 + which] 
    end if
@


1.18
log
@Checkpoint of DIKU August 94 changes
@
text
@d56 1
a56 1
    const it <- Environment.getEnv.getITable
d123 1
a123 1
      bc.fetchVariableSecondThing[0x1400 + self$which, 0x1200 + self$which] 
d137 1
a137 1
    if self$which >= 0x600 then
d139 3
d143 1
a143 1
      x <- builtinlit.create[self$ln, 0x600 + self$which]
d161 1
a161 1
      const ctid <- IDS.IDToCTID[self$id]
d173 1
a173 1
      const env <- Environment$env
d182 1
a182 1
      const ctid <- IDS.IDToInstCTID[self$id]
d195 3
d199 1
a199 1
      if self$which >= 0x600 then
d202 1
a202 1
	r <- builtinlit.create[self$ln, 0x600 + self$which]
d217 1
a217 1
    const otherid <- otherashasid$id
@


1.17
log
@First attempt at abcons
@
text
@d63 1
a63 1
      ss <- r.Define[it.lookup[name, 999], SConst, false]
d88 1
a88 1
    r <- view Environment$env$rootst.Lookup[
d137 1
a137 1
    if self$which > 0x600 then
d151 1
a151 1
      r <- globalref.create[ln, nil, IDS.IDToATID[self$id], nil, nil]
d158 4
a161 1
      r <- globalref.create[ln, nil, IDS.IDToCTID[self$id], nil, nil]
d170 2
a171 1
      Environment$env.tinline["builtinlit.getinstct: target is %s\n",
d173 1
d175 1
a175 1
      Environment$env.tinline["builtinlit.getinstct: answer is %s\n",
d177 1
d179 4
a182 1
      r <- globalref.create[ln, nil, IDS.IDToInstCTID[self$id], nil, nil]
d193 1
a193 1
      if self$which > 0x600 then
d209 1
a209 1
  export operation conformsTo [ln : Integer, other : Tree] -> [r : Boolean]
d212 1
a212 1
    r <- IDs.ConformsById[ln, self$id, otherid]
@


1.16
log
@Preparatory work for Ab/Cons
@
text
@d120 1
a120 5
    const bc <- view xct as typeobject T
      operation fetchLiteral[Integer]
      operation fetchVariableSecondThing[Integer, Integer]
      function  getSize -> [Integer]
    end T
d166 1
a166 4
      const foo <- view r as typeobject t 
	function getInstCT -> [Tree] 
	function asString -> [String]
      end t
d181 1
a181 1
      const foo <- view r as typeobject t function getInstAT -> [Tree] end t
a200 1
    const hasid <- typeobject t operation getID -> [Integer] end t
@


1.15
log
@Finalized merge with Mark Immels version
@
text
@d122 1
d126 3
a128 1
    if bc$size != 4 then bc.fetchLiteral[0x1400 + self$which] end if
@


1.14
log
@Convert to the new subscript syntax a[b]
@
text
@d41 3
a43 1
      "immutablevectorofint" }
@


1.13
log
@Install a new Builtin IVectorOfInt
@
text
@d45 1
a45 1
      name <- names(index)
@


1.12
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d40 2
a41 1
      "risa" }
@


1.11
log
@Implement new builtins: ivectorofany, risa
@
text
@a52 1
    const sconst <- STKind.SConst
d56 1
a56 1
    r <- SymbolTable.create[nil, STContext.COutside]
d60 1
a60 1
      ss <- r.Define[it.lookup[name, 999], sconst, false]
@


1.10
log
@Use nameof rather than asString
@
text
@d38 3
a40 1
      "directory" }
@


1.9
log
@Get rid of return on generate
@
text
@d145 1
a145 1
    if r.asString = "oblit" then
d154 1
a154 1
    if r.asString != "oblit" then
d162 1
a162 1
    if r.asString = "oblit" then
d180 1
a180 1
    if r.asString = "oblit" then
@


1.8
log
@Removed all monitors
@
text
@d115 1
a115 1
  export operation generate [xct : Printable] -> [rct : None]
@


1.7
log
@Implement the type Directory.
@
text
@a87 1
  monitor
a105 1
  end monitor
@


1.6
log
@Better debugging
@
text
@d37 2
a38 1
      "interpreterstate" }
@


1.5
log
@type -> typeobject sed
@
text
@d164 6
a169 1
      const foo <- view r as typeobject t function getInstCT -> [Tree] end t
d171 2
@


1.4
log
@Make generate return something (currently nothing interesting)
@
text
@a0 5
import Tree, FTree, Printable from "Jekyll"
import Symbol, SymbolTable from "Jekyll"
import Environment from "Jekyll"
import IDS from "Jekyll"
import GlobalRef from "Jekyll"
d2 1
a2 1
export Builtinlit to "Jekyll"
d6 1
a6 1
      "abstracttype",
d48 1
a48 1
  type export operation init -> [r : SymbolTable]
d64 1
a64 1
  type export operation findTree [id : Integer, t : Tree] -> [r : Tree]
d117 1
a117 1
    const bc <- view xct as type T
d164 1
a164 1
      const foo <- view r as type t function getInstCT -> [Tree] end t
d175 1
a175 1
      const foo <- view r as type t function getInstAT -> [Tree] end t
d195 1
a195 1
    const hasid <- type t operation getID -> [Integer] end t
@


1.3
log
@All the builtin naming is now here
@
text
@d121 1
a121 1
  export operation generate [xct : Printable]
@


1.2
log
@Implemented Vectorofint
@
text
@d2 1
a2 1
import SymbolTable from "Jekyll"
d9 42
d52 17
d86 1
a86 49
    if index = 0x00 then
      name <- "abstracttype"
    elseif index = 0x03 then
      name <- "boolean"
    elseif index = 0x04 then
      name <- "character"
    elseif index = 0x05 then
      name <- "condition"
    elseif index = 0x06 then
      name <- "integer"
    elseif index = 0x07 then
      name <- "none"
    elseif index = 0x08 then
      name <- "node"
    elseif index = 0x09 then
      name <- "signature"
    elseif index = 0x0a then
      name <- "real"
    elseif index = 0x0b then
      name <- "string"
    elseif index = 0x0e then
      name <- "nodelistelement"
    elseif index = 0x0f then
      name <- "nodelist"
    elseif index = 0x10 then
      name <- "instream"
    elseif index = 0x11 then
      name <- "outstream"
    elseif index = 0x13 then
      name <- "bitchunk"
    elseif index = 0x16 then
      name <- "vectorofchar"
    elseif index = 0x17 then
      name <- "buffer"
    elseif index = 0x18 then
      name <- "concretetype"
    elseif index = 0x19 then
      name <- "copvector"
    elseif index = 0x1a then
      name <- "copvectore"
    elseif index = 0x1b then
      name <- "aopvector"
    elseif index = 0x1c then
      name <- "aopvectore"
    elseif index = 0x1d then
      name <- "aparamlist"
    elseif index = 0x1e then
      name <- "vectorofint"
    end if
@


1.1
log
@Initial revision
@
text
@d73 2
@
