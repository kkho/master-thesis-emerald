head	1.8;
access;
symbols
	105alpha:1.8
	104alpha:1.8
	103alpha:1.8
	102alpha:1.8
	101alpha:1.8
	100alpha:1.8
	DIKU_0:1.7
	carlton_start:1.6
	immel_start:1.3;
locks; strict;


1.8
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	93.06.25.15.50.57;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.17.07.01;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.52.47;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.52.46;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.52.45;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.8
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@export Exitstat

const exitstat <- class Exitstat (Tree) [xxexp : Tree]
    field exp : Tree <- xxexp

    export function upperbound -> [r : Integer]
      r <- 0
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- exp
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	exp <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nexp : Tree
      if exp !== nil then nexp <- exp.copy[i] end if
      r <- exitstat.create[ln, nexp]
    end copy

    export operation typeCheck
      if exp !== nil then
	const booleantype <- (view BuiltinLit.findTree[0x1003, nil] as hasInstAT).getInstAT.asType

	var t : hasConforms
	t <- view exp.getAT as hasConforms
	if t !== nil then t <- view t.asType as hasConforms end if
	if t == nil then
	  Environment$env.ttypecheck["No type for if clause on %d\n",
	    { exp$ln }]
	elseif !t.conformsTo[ln, booleantype] then
	  Environment$env.SemanticError[exp$ln, "boolean required", nil]
	end if
      end if
      FTree.typecheck[self]
    end typeCheck

    export operation generate [xct : Printable]
      const bc <- view xct as ByteCode
      const label : Integer <- bc.fetchnest
      if label == nil then
	Environment.getEnv.SemanticError[ln, "Exit statement without enclosing loop", nil]
      else
	bc.lineNumber[self$ln]
	if exp == nil then
	  bc.addCode["BR"]
	else
	  bc.pushSize[4]
	  exp.generate[xct]
	  bc.popSize
	  bc.addCode["BRT"]
	end if
	bc.addLabelReference[label, 2]
      end if
    end generate

  export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
    if self$exp !== nil then self$exp.resolveSymbols[pst, 1] end if
  end resolveSymbols

  export function asString -> [r : String]
    r <- "exitstat"
  end asString
end Exitstat
@


1.7
log
@First attempt at abcons
@
text
@d24 18
d44 1
a44 1
      const label <- bc.fetchnest
d47 1
a47 1
      else 
a59 3
    initially
      if exp !== nil then ln <- exp$ln end if
    end initially
@


1.6
log
@Cleaned up the definition of nesting in bytecodes
@
text
@a2 10
const RISA <- typeobject RISA
  function lowerbound -> [Integer]
  function upperbound -> [Integer]
  function getElement [Integer] -> [Any]
end RISA

const hasSemanticError <- typeobject hasSemanticError
  operation SemanticError[Integer, String, RISA]
end hasSemanticError

d25 1
a25 8
      const bc <- view xct as typeobject T
	  operation addLabelReference [label: Integer, size : Integer]
	  operation addCode[String]
	  operation fetchnest -> [Integer]
	  op pushSize[Integer]
	  op popSize
	  op lineNumber[Integer]
	end T
@


1.5
log
@Get rid of return on generate
@
text
@d38 1
a38 1
	  operation fetchnest -> [Any]
d43 1
a43 1
      const label <- view bc.fetchnest as Integer
@


1.4
log
@Removed all monitors
@
text
@d34 1
a34 2
    export operation generate [xct : Printable] -> [rct : None]
      var junk : Any
d52 1
a52 1
	  junk <- exp.generate[xct]
@


1.3
log
@type -> typeobject sed
@
text
@a13 1
  monitor
a62 1
  end monitor
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 4
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import Environment from "Jekyll"
export Exitstat to "Jekyll"
d3 1
a3 1
const RISA <- type RISA
d9 1
a9 1
const hasSemanticError <- type hasSemanticError
d37 1
a37 1
      const bc <- view xct as type T
@


1.1
log
@Initial revision
@
text
@d38 2
a39 1
    export operation generate [xct : Printable]
d57 1
a57 1
	  exp.generate[xct]
@
