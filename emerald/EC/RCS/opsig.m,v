head	1.25;
access;
symbols
	105alpha:1.25
	104alpha:1.25
	103alpha:1.25
	102alpha:1.25
	101alpha:1.25
	100alpha:1.25
	DIKU_0:1.20
	carlton_start:1.15
	immel_start:1.5;
locks; strict;


1.25
date	97.01.22.00.03.20;	author norm;	state Exp;
branches;
next	1.24;

1.24
date	96.03.28.23.05.29;	author norm;	state Exp;
branches;
next	1.23;

1.23
date	95.09.26.15.25.49;	author norm;	state Exp;
branches;
next	1.22;

1.22
date	95.02.07.01.48.31;	author norm;	state Exp;
branches;
next	1.21;

1.21
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.20;

1.20
date	94.08.22.23.43.52;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.08.17.16.51.27;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	94.01.28.21.14.04;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	93.12.20.21.09.40;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.03.11.20.46.16;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.03.01.03.15.14;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	93.02.17.00.09.07;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	92.12.24.09.36.01;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.10.17.07.24;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.04.06.19.38.00;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.55.42;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.55.41;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.55.39;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.55.38;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.25
log
@Many changes
@
text
@
export Opsig

const opsig <- class Opsig (Tree) [xxname : Ident, xxparams : Tree, xxresults : Tree, xxwhere : Tree]
  class export operation literal [ln : Integer, xxname : Ident, pn : Ident, pt : Tree, rn : Ident, rt : Tree] -> [r : OpSigType]
    var pl, rl : Tree
    if pn !== nil then
      pl <- seq.singleton[param.create[ln, Sym.create[ln, pn], pt.copy[0]]]
    end if
    if rn !== nil then
      rl <- seq.singleton[param.create[ln, Sym.create[ln, pn], pt.copy[0]]]
    end if
    r <- self.create[ln, xxname, pl, rl, nil]
  end literal
  
    field isFunction : Boolean <- false
    field mustBeCompilerExecuted : Boolean <- false
    field name : Ident <- xxname
    field params : Tree <- xxparams
    field results  : Tree <- xxresults
    field xwhere : Tree <- xxwhere
    field st : SymbolTable
    export function upperbound -> [r : Integer]
      r <- 2
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- params
      elseif i = 1 then
	r <- results
      elseif i = 2 then
	r <- xwhere
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	params <- r
      elseif i = 1 then
	results <- r
      elseif i = 2 then
	xwhere <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nparams, nresults, nxwhere : Tree
      if params !== nil then nparams <- params.copy[i] end if
      if results !== nil then nresults <- results.copy[i] end if
      if xwhere !== nil then nxwhere <- xwhere.copy[i] end if
      const realr <- opsig.create[ln, name, nparams, nresults, nxwhere]
      realr$isFunction <- isFunction
      realr$mustBeCompilerExecuted <- mustBeCompilerExecuted
      r <- realr
    end copy

    operation initTypeVariable [psym : Symbol]
      if !psym$isTypeVariable then
	psym$isTypeVariable <- true
	if psym$value == nil then
	  const tcopy : Tree  <- 
	    Environment$env$atlit.create[
	      self$ln, 
	      Literal.StringL[0, "junk"],
	      sym.create[self$ln,
		Environment$Env$ITable.Lookup["whocares", 999]], 
	      seq.create[self$ln]
	    ]
	  (view tcopy as typeobject t operation setIsTypeVariable[Boolean] end t)$isTypeVariable <- true
	  psym$value <- tcopy
	end if
      end if
    end initTypeVariable

    export operation findManifests -> [changed : Boolean]
      changed <- false
      if params !== nil then
	for i : Integer <- 0 while i < params.upperbound by i <- i + 1
	  const psym : Symbol <- (view (view params[i] as Param)$xsym as Sym)$mysym
	  if !psym$isTypeVariable then
 	    for j : Integer <- i + 1 while j <= params.upperbound by j <- j + 1
	      const t : Tree <- (view params[j] as Param)$xtype
	      if nameof t = "asym" then
		const tsym : Symbol <- (view t as Sym)$mysym
		if psym == tsym then
		  self.initTypeVariable[psym]
		  changed <- true
		end if
	      end if
	    end for
	    if results !== nil then
	      for j : Integer <- 0 while j <= results.upperbound by j <- j + 1
		const t : Tree <- (view results[j] as Param)$xtype
		if nameof t = "asym" then
		  const tsym : Symbol <- (view t as Sym)$mysym
		  if psym == tsym then
		    self.initTypeVariable[psym]
		    changed <- true
		  end if
		end if
	      end for
	    end if
	  end if
	end for
      end if
      changed <- changed | FTree.findManifests[self]
    end findManifests

    export operation isInDefinition 
      % Make sure that each parameter and result has a name
      if params !== nil then
	for i : Integer <- 0 while i <= params.upperbound by i <- i + 1
	  const p <- view params[i] as Param
	  if p$xsym == nil then
	    Environment$env.SemanticError[ln, "Parameter %d needs a name", { i + 1}]
	  end if
	end for
      end if
      if results !== nil then
	for i : Integer <- 0 while i <= results.upperbound by i <- i + 1
	  const p <- view results[i] as Param
	  if p$xsym == nil then
	    Environment$env.SemanticError[ln, "Result %d needs a name", { i + 1}]
	  end if
	end for
      end if
    end isInDefinition

    export operation defineSymbols[pst : SymbolTable]
      % Check restrictions on functions
      %
      if isFunction and self$nress != 1 then
	Environment$env.SemanticError[ln, "Function must return 1 result, not %d", {self$nress}]
      end if
      if pst$context != COpDef then
	st <- SymbolTable.create[pst, COpSig]
	st$myTree <- self
      else
	st <- pst
      end if
      if params !== nil then
	st$kind <- SParam
	params.defineSymbols[st]
      end if
      if results !== nil then
	st$kind <- SResult
	results.defineSymbols[st]
      end if
      if xwhere !== nil then
	for i : Integer <- 0 while i <= xwhere.upperbound by i <- i + 1
	  const X <- typeobject hasNeedsToBeCompilerExecuted
	    function getNeedsToBeCompilerExecuted -> [Boolean]
	  end hasNeedsToBeCompilerExecuted
	  const awhere <- view xwhere[i] as X
	  if awhere$needsToBeCompilerExecuted then
	    self$mustBeCompilerExecuted <- true
	    exit
	  end if
	end for
	xwhere.defineSymbols[st]
      end if
    end defineSymbols

    export operation getNArgs -> [r : Integer]
      if params == nil then
	r <- 0
      else
	r <- params.upperbound + 1
      end if
    end getNArgs
    export operation getNRess -> [r : Integer]
      if results == nil then
	r <- 0
      else
	r <- results.upperbound + 1
      end if
    end getNRess

  export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
    FTree.resolveSymbols[self$st, self, 0]
  end resolveSymbols

  export operation generate [ct : Printable]
    const par <- self$params
    const res <- self$results
    var nameasstring : String <- name$name
    const ctname <- nameof ct
    const env : EnvironmentType <- Environment$env
    if ctname = "abytecode" then
      if env$useAbCons and par !== nil then
	par.generate[ct]
      end if
      if res !== nil then res.generate[ct] end if
    elseif ctname = "anopvectore" then
      const opve <- view ct as OpVectorE
      
      opve$name <- nameasstring
      if par == nil then
        nameasstring <- nameasstring || "@@0"
      else
	opve$nargs <- par.upperbound + 1
	nameasstring <- nameasstring || "@@" || (par.upperbound + 1).asString
      end if
      if res !== nil then
	opve$nress <- res.upperbound + 1
      end if
      nameasstring <- nameasstring || "@@" || opve$nress.asString
      opve$id <- opnametooid.Lookup[nameasstring]
    elseif ctname =  "anatcode" then
      % build an entry in the op vector ct.ops for me
      const ctasat <- view ct as ATCode
      const ops <- ctasat$ops
      const ove : ATOpVectorE <- ATOpVectorE.create[nameasstring]
      ops.addUpper[ove]
      ove$isFunction <- self$isFunction
      if par == nil then
        nameasstring <- nameasstring || "@@0"
      else
	nameasstring <- nameasstring || "@@" || (par.upperbound + 1).asString
      end if
      if res == nil then
	nameasstring <- nameasstring || "@@0"
      else
	nameasstring <- nameasstring || "@@" || (res.upperbound + 1).asString
      end if
      ove$id <- opnametooid.Lookup[nameasstring]
      if par !== nil then
	const limit <- par.upperbound
	ove$Arguments <- ATTypeVector.create
	for i : Integer <- 0 while i <= limit by i<-i+1
	  const t <- par[i].asType
	  if t !== nil then
	    const r <- view t as hasID
	    if env$traceassignTypes then
	      env.printf["Found a thing %S with id %x\n", { r, r$id }]
	    end if
	    ove$arguments.addUpper[RefByID.create[r$id]]
	  else
	    if env$traceassignTypes then
	      env.printf["Found a thing %S whose astype is nil\n", {par[i]}]
	    end if
	    ove$arguments.addUpper[nil]
	  end if
	end for
      end if
      if res !== nil then
	const limit <- res.upperbound
	ove$Results <- ATTypeVector.create
	for i : Integer <- 0 while i <= limit by i<-i+1
	  const t <- res[i].asType
	  if t !== nil then
	    const r <- view t as hasID
	    if env$traceassigntypes then
	      env.printf["Found a thing %S with id %x\n",  { r, r$id }]
	    end if
	    ove$results.addUpper[RefByID.create[r$id]]
	  else
	    if env$traceassignTypes then
	      env.printf["Found a thing %S whose astype is nil\n", {res[i]}]
	    end if
	    ove$results.addUpper[nil]
	  end if
	end for
      end if
    end if
  end generate

  export function same [o : Tree] -> [r : Boolean]
    r <- false
    if nameof o = "anopsig" then
      const oo <- view o as OpSig
      r <- self$name$name = oo$name$name and
        (self$nargs = oo$nargs or self$name$name = "create")
    end if
  end same
  export function asString -> [r : String]
    r <- "opsig"
  end asString
end Opsig
@


1.24
log
@Flatten invocations to reduce jibberish on the stack
@
text
@d269 3
a271 1
      r <- self$name$name = (view o as OpSig)$name$name
@


1.23
log
@Make type stuff work
@
text
@d8 1
a8 2
      pl <- seq.create[ln]
      pl.rcons[param.create[ln, Sym.create[ln, pn], pt.copy[0]]]
d11 1
a11 2
      rl <- seq.create[ln]
      rl.rcons[param.create[ln, Sym.create[ln, pn], pt.copy[0]]]
@


1.22
log
@Even better semantics checks, avoid invoking nil, fix class
@
text
@d57 52
@


1.21
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d57 20
@


1.20
log
@August 94 Checkpoint II
@
text
@d114 1
a114 1
    const nameasstring <- name$name
d116 1
a116 1
    const env <- Environment$env
d141 1
a141 1
      const ove <- ATOpVectorE.create[nameasstring]
@


1.19
log
@Checkpoint of DIKU August 94 changes
@
text
@d58 5
@


1.18
log
@First attempt at abcons
@
text
@d4 2
a5 2
const opsig <- class Opsig (Tree) [xxname : Tree, xxparams : Tree, xxresults : Tree, xxwhere : Tree]
  class export operation literal [ln : Integer, xxname : Tree, pn : Ident, pt : Tree, rn : Ident, rt : Tree] -> [r : OpSigType]
d20 1
a20 1
    field name : Tree <- xxname
d26 1
a26 1
      r <- 3
d30 1
a30 1
	r <- name
d32 1
a32 1
	r <- params
a33 2
	r <- results
      elseif i = 3 then
d39 1
a39 1
	name <- r
d41 1
a41 1
	params <- r
a42 2
	results <- r
      elseif i = 3 then
d47 1
a47 2
      var nname, nparams, nresults, nxwhere : Tree
      if name !== nil then nname <- name.copy[i] end if
d51 4
a54 1
      r <- opsig.create[ln, nname, nparams, nresults, nxwhere]
d60 1
d72 13
a84 1
      if xwhere !== nil then xwhere.defineSymbols[st] end if
d86 1
a106 1
    const nameashasid <- view self$name as hasIdent
d109 1
a109 1
    const name <- nameashasid$id.asString
d111 1
d113 1
a113 1
      if Environment$env$useAbCons and par !== nil then
d120 1
a120 1
      opve$name <- name
d122 1
a122 1
        name <- name || "@@0"
d125 1
a125 1
	name <- name || "@@" || (par.upperbound + 1).asString
d130 2
a131 2
      name <- name || "@@" || opve$nress.asString
      opve$id <- opnametooid.Lookup[name]
d136 1
a136 1
      const ove <- ATOpVectorE.create[name]
d140 1
a140 1
        name <- name || "@@0"
d142 1
a142 1
	name <- name || "@@" || (par.upperbound + 1).asString
d145 1
a145 1
	name <- name || "@@0"
d147 1
a147 1
	name <- name || "@@" || (res.upperbound + 1).asString
d149 1
a149 1
      ove$id <- opnametooid.Lookup[name]
d157 3
a159 2
	    Environment$env.tassignTypes["Found a thing %S with id %x\n", 
	      { r, r$id }]
d162 3
a164 2
	    Environment$env.tassignTypes["Found a thing %S whose astype is nil\n",
	      {par[i]}]
d176 3
a178 2
	    Environment$env.tassignTypes["Found a thing %S with id %x\n", 
	      { r, r$id }]
d181 3
a183 2
	    Environment$env.tassignTypes["Found a thing %S whose astype is nil\n",
	      {res[i]}]
d194 1
a194 1
      r <- self$name.same[(view o as OpSig)$name]
@


1.17
log
@Set the id field in abstract operation vector entries
@
text
@d95 1
a95 3
    const nameashasid <- view self$name as typeobject X
      function getId -> [Ident]
    end X
d101 3
d144 1
a144 1
	    const r <- view t as typeobject t function getId -> [Integer] end t
d161 1
a161 1
	    const r <- view t as typeobject t function getId -> [Integer] end t
@


1.16
log
@Finalized merge with Mark Immels version
@
text
@d126 11
@


1.15
log
@Convert to the new subscript syntax a[b]
@
text
@d108 3
a110 1
      if par !== nil then
d117 1
@


1.14
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d127 1
a127 1
	  const t <- par(i).asType
d135 1
a135 1
	      {par(i)}]
d144 1
a144 1
	  const t <- res(i).asType
d152 1
a152 1
	      {res(i)}]
@


1.13
log
@Remove vestigial generateAT
@
text
@d15 1
a15 1
    r <- create[ln, xxname, pl, rl, nil]
@


1.12
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@a97 4
    const ATLit <- typeobject t
      operation generateAT -> [ATCode]
    end t
  
@


1.11
log
@Better tracing of atlit generation
@
text
@d9 1
a9 1
      pl.rcons[param.create[ln, symdef.create[ln, pn], pt.copy[0]]]
d13 1
a13 1
      rl.rcons[param.create[ln, symdef.create[ln, pn], pt.copy[0]]]
d60 2
a61 2
      if pst$context != STContext.COpDef then
	st <- SymbolTable.create[pst, STContext.COpSig]
d66 1
a66 1
	st$kind <- STKind.SParam
d70 1
a70 1
	st$kind <- STKind.SResult
@


1.10
log
@Generate type objects for concretetypes
@
text
@d134 2
d138 2
d151 2
d155 2
@


1.9
log
@Identify opnames with the number of arguments
@
text
@a115 1
      opve$id <- opnametooid.Lookup[name]
d119 1
d127 1
a127 3
      if par == nil then
	ove$nargs <- 0
      else
a128 1
	ove$nargs <- par.upperbound + 1
d132 5
a136 3
	  if t !== nil and nameof t = "anatlit" then
	    const r <- view t as ATlit
	    ove$arguments.addUpper[r.generateAT]
d140 1
a140 3
      if res == nil then
	ove$nress <- 0
      else
a141 1
	ove$nress <- res.upperbound + 1
d145 5
a149 3
	  if t !== nil and nameof t = "anatlit" then
	    const r <- view t as ATlit
	    ove$results.addUpper[r.generateAT] 
@


1.8
log
@Use nameof rather than asString
@
text
@a101 1
    const name <- nameashasid$id.asString
d104 1
a111 1
      opve$id <- opnametooid.Lookup[name]
d114 1
d116 1
@


1.7
log
@Get rid of return on generate
@
text
@d105 2
a106 1
    if ct.asString = "bytecode" then
d108 1
a108 1
    elseif ct.asString = "opvectore" then
d119 1
a119 1
    elseif ct.asString = "at" then
d134 1
a134 1
	  if t !== nil and t.asString = "atlit" then
d148 1
a148 1
	  if t !== nil and t.asString = "atlit" then
d159 1
a159 1
    if o.asString = "opsig" then
@


1.6
log
@Removed all monitors
@
text
@d94 1
a94 2
  export operation generate [ct : Printable] -> [rct : None]
    var junk : Any
d106 1
a106 1
      if res !== nil then junk <- res.generate[ct] end if
@


1.5
log
@Clean up param
@
text
@a17 1
  monitor
a88 1
  end monitor
@


1.4
log
@type -> typeobject sed
@
text
@d9 1
a9 1
      pl.rcons[param.create[ln, symdef.create[ln, pn], pt.copy[0], nil]]
d13 1
a13 1
      rl.rcons[param.create[ln, symdef.create[ln, pn], pt.copy[0], nil]]
@


1.3
log
@The literal type op needs to be exported
@
text
@a0 10
import Ident from "Jekyll"
import Tree, FTree, Printable from "Jekyll"
import SymbolTable, STContext, STKind from "Jekyll"
import OPVectorE from "Jekyll"
import ByteCode from "Jekyll"
import Seq from "Jekyll"
import Param from "Jekyll"
import Symdef from "Jekyll"
import OpnameToOID from "Jekyll"
import AtCode, ATOpVectore, ATTypeVector from "Jekyll"
d2 1
a2 1
export Opsig to "Jekyll"
d5 1
a5 1
  type export operation literal [ln : Integer, xxname : Tree, pn : Ident, pt : Tree, rn : Ident, rt : Tree] -> [r : OpSigType]
d98 1
a98 1
    const nameashasid <- view self$name as type X
d101 1
a101 1
    const ATLit <- type t
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d15 1
a15 1
  type operation literal [ln : Integer, xxname : Tree, pn : Ident, pt : Tree, rn : Ident, rt : Tree] -> [r : OpSigType]
@


1.1
log
@Initial revision
@
text
@d106 2
a107 1
  export operation generate [ct : Printable]
d119 1
a119 1
      if res !== nil then res.generate[ct] end if
@
