head	1.13;
access;
symbols
	105alpha:1.12
	104alpha:1.12
	103alpha:1.12
	102alpha:1.12
	101alpha:1.12
	100alpha:1.12
	DIKU_0:1.10
	carlton_start:1.8
	immel_start:1.5;
locks; strict;


1.13
date	2007.06.11.01.37.57;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	96.03.28.23.05.29;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	94.10.01.07.55.40;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	94.08.17.16.51.28;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	94.06.10.05.21.58;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	93.01.27.04.41.59;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.10.17.07.25;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.11.25.04.43.37;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.03.30.19.35.31;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.03.27.15.36.11;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.05.19.11.55.18;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.05.18.12.04.58;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.05.18.11.08.34;	author norm;	state Exp;
branches;
next	;


desc
@Trees with object flags.
@


1.13
log
@Check in current version
@
text
@const otree <- class OTree (Tree) []
  const xisImmutable			<- 0
  const xisExported			<- 1
  const xisNotManifest			<- 2
  const xcannotBeConformedTo		<- 3
  const xisVector			<- 4
  const xisTypeVariable			<- 5
% const xresultsDependOnlyOnArgs	<- 6
  const xinExecutableConstruct		<- 7
  const xdependsOnTypeVariable		<- 8
  const xtypesAreAssigned		<- 9
  const xtypesHaveBeenChecked		<- 10
% const xdoesNotDuplicateSelf		<- 11
% const xdoesNotMoveArguments		<- 12
% const xdoLocalCreate			<- 13
  const xhasBeenDesugared		<- 14
% const xDoesNotMoveSelf		<- 15
  const xAlreadyGenerated		<- 16
  const xGenerateOnlyCT			<- 17
  const xQueuedForGeneration		<- 18
  const xIsMonitored			<- 19
  const xMonitorMayBeElided		<- 20
  const xIsPruned			<- 21
  const xknowinstat			<- 22
  const xknowinstct			<- 23
  const xIsSynchronized			<- 24

    var f : Integer <- 0

    export operation setF [x : Integer]
      f <- x
    end setF

    export operation setIsImmutable [a : Boolean]
      f <- f.setBit[xisImmutable, a]
    end setIsImmutable
    export function getIsImmutable -> [r : Boolean]
      r <- f.getBit[xisImmutable]
    end getIsImmutable

    export operation setisExported [a : Boolean]
      f <- f.setBit[xisExported, a]
    end setisExported
    export function getisExported -> [r : Boolean]
      r <- f.getBit[xisExported]
    end getisExported

    export operation setIsNotManifest [a : Boolean]
      f <- f.setBit[xisNotManifest, a]
    end setIsNotManifest
    export function getIsNotManifest -> [r : Boolean]
      r <- f.getBit[xisNotManifest]
    end getIsNotManifest

    export operation setCannotBeConformedTo [a : Boolean]
      f <- f.setBit[xcannotBeConformedTo, a]
    end setCannotBeConformedTo
    export function getCannotBeConformedTo -> [r : Boolean]
      r <- f.getBit[xcannotBeConformedTo]
    end getCannotBeConformedTo

    export operation setIsVector [a : Boolean]
      f <- f.setBit[xisVector, a]
    end setIsVector
    export function getIsVector -> [r : Boolean]
      r <- f.getBit[xisVector]
    end getIsVector

    export operation setIsTypeVariable [a : Boolean]
      f <- f.setBit[xisTypeVariable, a]
    end setIsTypeVariable
    export function getIsTypeVariable -> [r : Boolean]
      r <- f.getBit[xisTypeVariable]
    end getIsTypeVariable

%    export operation setResultsDependOnlyOnArgs [a : Boolean]
%      f <- f.setBit[xresultsDependOnlyOnArgs, a]
%    end setResultsDependOnlyOnArgs
%    export function getResultsDependOnlyOnArgs -> [r : Boolean]
%      r <- f.getBit[xresultsDependOnlyOnArgs]
%    end getResultsDependOnlyOnArgs

    export operation setInExecutableConstruct [a : Boolean]
      f <- f.setBit[xinExecutableConstruct, a]
    end setInExecutableConstruct
    export function getInExecutableConstruct -> [r : Boolean]
      r <- f.getBit[xinExecutableConstruct]
    end getInExecutableConstruct

    export operation setDependsOnTypeVariable [a : Boolean]
      f <- f.setBit[xdependsOnTypeVariable, a]
    end setDependsOnTypeVariable
    export function getDependsOnTypeVariable -> [r : Boolean]
      r <- f.getBit[xdependsOnTypeVariable]
    end getDependsOnTypeVariable

    export operation setTypesAreAssigned [a : Boolean]
      f <- f.setBit[xtypesAreAssigned, a]
    end setTypesAreAssigned
    export function getTypesAreAssigned -> [r : Boolean]
      r <- f.getBit[xtypesAreAssigned]
    end getTypesAreAssigned

    export operation setTypesHaveBeenChecked [a : Boolean]
      f <- f.setBit[xtypesHaveBeenChecked, a]
    end setTypesHaveBeenChecked
    export function getTypesHaveBeenChecked -> [r : Boolean]
      r <- f.getBit[xtypesHaveBeenChecked]
    end getTypesHaveBeenChecked

%    export operation setDoesNotDuplicateSelf [a : Boolean]
%      f <- f.setBit[xdoesNotDuplicateSelf, a]
%    end setDoesNotDuplicateSelf
%    export function getDoesNotDuplicateSelf -> [r : Boolean]
%      r <- f.getBit[xdoesNotDuplicateSelf]
%    end getDoesNotDuplicateSelf

%    export operation setDoesNotMoveArguments [a : Boolean]
%      f <- f.setBit[xdoesNotMoveArguments, a]
%    end setDoesNotMoveArguments
%    export function getDoesNotMoveArguments -> [r : Boolean]
%      r <- f.getBit[xdoesNotMoveArguments]
%    end getDoesNotMoveArguments

%    export operation setDoLocalCreate [a : Boolean]
%      f <- f.setBit[xdoLocalCreate, a]
%    end setDoLocalCreate
%    export function getDoLocalCreate -> [r : Boolean]
%      r <- f.getBit[xdoLocalCreate]
%    end getDoLocalCreate

    export operation sethasBeenDesugared [a : Boolean]
      f <- f.setBit[xhasBeenDesugared, a]
    end sethasBeenDesugared
    export function gethasBeenDesugared -> [r : Boolean]
      r <- f.getBit[xhasBeenDesugared]
    end gethasBeenDesugared

%    export operation setDoesNotMoveSelf [a : Boolean]
%      f <- f.setBit[xdoesNotMoveSelf, a]
%    end setDoesNotMoveSelf
%    export function getDoesNotMoveSelf -> [r : Boolean]
%      r <- f.getBit[xdoesNotMoveSelf]
%    end getDoesNotMoveSelf

    export operation setAlreadyGenerated [a : Boolean]
      f <- f.setBit[xalreadyGenerated, a]
    end setAlreadyGenerated
    export function getAlreadyGenerated -> [r : Boolean]
      r <- f.getBit[xalreadyGenerated]
    end getAlreadyGenerated
    
    export operation setGenerateOnlyCT [a : Boolean]
      f <- f.setBit[xGenerateOnlyCT, a]
    end setGenerateOnlyCT
    export function getGenerateOnlyCT -> [r : Boolean]
      r <- f.getBit[xGenerateOnlyCT]
    end getGenerateOnlyCT
    
    export operation setQueuedForGeneration [a : Boolean]
      f <- f.setBit[xQueuedForGeneration, a]
    end setQueuedForGeneration
    export function getQueuedForGeneration -> [r : Boolean]
      r <- f.getBit[xQueuedForGeneration]
    end getQueuedForGeneration
    
    export operation setIsMonitored [a : Boolean]
      f <- f.setBit[xIsMonitored, a]
    end setIsMonitored
    export function getIsMonitored -> [r : Boolean]
      r <- f.getBit[xIsMonitored]
    end getIsMonitored
    
    export operation setIsSynchronized [a : Boolean]
      f <- f.setBit[xIsSynchronized, a]
    end setIsSynchronized
    export function getIsSynchronized -> [r : Boolean]
      r <- f.getBit[xIsSynchronized]
    end getIsSynchronized
    
    export operation setMonitorMayBeElided [a : Boolean]
      f <- f.setBit[xMonitorMayBeElided, a]
    end setMonitorMayBeElided
    export function getMonitorMayBeElided -> [r : Boolean]
      r <- f.getBit[xMonitorMayBeElided]
    end getMonitorMayBeElided
    
    export operation setIsPruned [a : Boolean]
      f <- f.setBit[xIsPruned, a]
    end setIsPruned
    export function getIsPruned -> [r : Boolean]
      r <- f.getBit[xIsPruned]
    end getIsPruned
    
    export operation setKnowInstAT [a : Boolean]
      f <- f.setBit[xKnowInstAT, a]
    end setKnowInstAT
    export function getKnowInstAT -> [r : Boolean]
      r <- f.getBit[xKnowInstAT]
    end getKnowInstAT
    
    export operation setKnowInstCT [a : Boolean]
      f <- f.setBit[xKnowInstCT, a]
    end setKnowInstCT
    export function getKnowInstCT -> [r : Boolean]
      r <- f.getBit[xKnowInstCT]
    end getKnowInstCT
    
    export operation printFlags[s : OutStream]
      for i : Integer <- 0 while i <= xQueuedForGeneration by i <- i + 1
	if f.getBit[i] then
	  var bitname : String
	  if i = xisImmutable then
	    bitname <- "isImmutable"
	  elseif i = xisExported then
	    bitname <- "isExported"
	  elseif i = xisNotManifest then
	    bitname <- "isNotManifest"
	  elseif i = xcannotBeConformedTo then
	    bitname <- "cannotBeConformedTo"
	  elseif i = xisVector then
	    bitname <- "isVector"
	  elseif i = xisTypeVariable then
	    bitname <- "isTypeVariable"
%	  elseif i = xresultsDependOnlyOnArgs then
%	    bitname <- "resultsDependOnlyOnArgs"
	  elseif i = xinExecutableConstruct then
	    bitname <- "inExecutableConstruct"
	  elseif i = xdependsOnTypeVariable then
	    bitname <- "dependsOnTypeVariable"
	  elseif i = xtypesAreAssigned then
	    bitname <- "typesAreAssigned"
	  elseif i = xtypesHaveBeenChecked then
	    bitname <- "typesHaveBeenChecked"
%	  elseif i = xdoesNotDuplicateSelf then
%	    bitname <- "doesNotDuplicateSelf"
%	  elseif i = xdoesNotMoveArguments then
%	    bitname <- "doesNotMoveArguments"
%	  elseif i = xdoLocalCreate then
%	    bitname <- "doLocalCreate"
%	  elseif i = xDoesNotMoveSelf then
%	    bitname <- "DoesNotMoveSelf"
	  elseif i = xHasBeenDesugared then
	    bitname <- "HasBeenDesugared"
	  elseif i = xAlreadyGenerated then
	    bitname <- "AlreadyGenerated"
	  elseif i = xIsMonitored then
	    bitname <- "IsMonitored"
	  elseif i = xIsSynchronized then
	    bitname <- "IsSynchronized"
	  elseif i = xGenerateOnlyCT then
	    bitname <- "GenerateOnlyCT"
	  elseif i = xQueuedForGeneration then
	    bitname <- "QueuedForGeneration"
	  else 
	    bitname <- "illegal flag (" || i.asString || ")"
	  end if
	  s.putstring[bitname]
	  s.putchar[' ']
	end if
      end for
    end printFlags
    
    export operation typeCheck 
      if !self$typesHaveBeenChecked then
	self$typesHaveBeenChecked <- true
	var child : Tree
	const limit <- self.upperbound
	var ch : Integer <- 0
	loop
	  exit when ch > limit
	  child <- self[ch]
	  if child !== nil then
	    child.typeCheck
	  end if
	  ch <- ch + 1
	end loop
      end if
    end typeCheck

    export operation flatten [ininvoke : Boolean, indecls : Tree] -> [r : Tree, outdecls : Tree]
      
      r <- self
      outdecls <- indecls
    end flatten

end OTree

export OTree

@


1.12
log
@Flatten invocations to reduce jibberish on the stack
@
text
@d26 1
d174 7
d243 2
d247 4
d256 1
a256 1
	    bitname <- "illegal flag"
@


1.11
log
@Improved constant type assignment
@
text
@d16 1
a16 1
% const junk				<- 14
d131 7
d266 7
@


1.10
log
@Checkpoint of DIKU August 94 changes
@
text
@d3 1
a3 1
  const xisManifest			<- 1
d40 6
a45 6
    export operation setIsManifest [a : Boolean]
      f <- f.setBit[xisManifest, a]
    end setIsManifest
    export function getIsManifest -> [r : Boolean]
      r <- f.getBit[xisManifest]
    end getIsManifest
d200 2
a201 2
	  elseif i = xisManifest then
	    bitname <- "isManifest"
@


1.9
log
@Reinstalled support for monitored objects and conditions
@
text
@d10 1
a10 1
% const xdependsOnTypeVariable		<- 8
d16 1
a16 1
% const xtypeDependsOnTypeVariable	<- 14
d23 3
d89 6
a94 6
%    export operation setDependsOnTypeVariable [a : Boolean]
%      f <- f.setBit[xdependsOnTypeVariable, a]
%    end setDependsOnTypeVariable
%    export function getDependsOnTypeVariable -> [r : Boolean]
%      r <- f.getBit[xdependsOnTypeVariable]
%    end getDependsOnTypeVariable
a130 7
%    export operation setTypeDependsOnTypeVariable [a : Boolean]
%      f <- f.setBit[xtypeDependsOnTypeVariable, a]
%    end setTypeDependsOnTypeVariable
%    export function getTypeDependsOnTypeVariable -> [r : Boolean]
%      r <- f.getBit[xtypeDependsOnTypeVariable]
%    end getTypeDependsOnTypeVariable

d173 21
d197 1
a197 1
	  var name : String
d199 1
a199 1
	    name <- "isImmutable"
d201 1
a201 1
	    name <- "isManifest"
d203 1
a203 1
	    name <- "isNotManifest"
d205 1
a205 1
	    name <- "cannotBeConformedTo"
d207 1
a207 1
	    name <- "isVector"
d209 1
a209 1
	    name <- "isTypeVariable"
d211 1
a211 1
%	    name <- "resultsDependOnlyOnArgs"
d213 3
a215 3
	    name <- "inExecutableConstruct"
%	  elseif i = xdependsOnTypeVariable then
%	    name <- "dependsOnTypeVariable"
d217 1
a217 1
	    name <- "typesAreAssigned"
d219 1
a219 1
	    name <- "typesHaveBeenChecked"
d221 1
a221 1
%	    name <- "doesNotDuplicateSelf"
d223 1
a223 1
%	    name <- "doesNotMoveArguments"
d225 1
a225 3
%	    name <- "doLocalCreate"
%	  elseif i = xtypeDependsOnTypeVariable then
%	    name <- "typeDependsOnTypeVariable"
d227 1
a227 1
%	    name <- "DoesNotMoveSelf"
d229 1
a229 1
	    name <- "AlreadyGenerated"
d231 1
a231 1
	    name <- "GenerateOnlyCT"
d233 1
a233 1
	    name <- "QueuedForGeneration"
d235 1
a235 1
	    name <- "illegal flag"
d237 1
a237 1
	  s.putstring[name]
d242 17
@


1.8
log
@Execute invocations found in idb
@
text
@d21 2
d163 14
@


1.7
log
@Removed all monitors
@
text
@d20 1
d154 7
d162 1
a162 1
      for i : Integer <- 0 while i <= xalreadyGenerated by i <- i + 1
d201 2
@


1.6
log
@Implement change to "new" keyword.
@
text
@a20 1
  monitor
a200 1
  end monitor
@


1.5
log
@Print object flags
@
text
@d19 1
d147 7
d192 2
@


1.4
log
@Better printing
@
text
@d147 1
a147 20
      const names <- {
	"isImmutable",
	"isManifest",
	"isNotManifest",
	"cannotBeConformedTo",
	"isVector",
	"isTypeVariable",
	"resultsDependOnlyOnArgs",
	"inExecutableConstruct",
	"dependsOnTypeVariable",
	"typesAreAssigned",
	"typesHaveBeenChecked",
	"doesNotDuplicateSelf",
	"doesNotMoveArguments",
	"doLocalCreate",
	"typeDependsOnTypeVariable",
	"DoesNotMoveSelf",
	"AlreadyGenerated"
      }
      for i : Integer <- 0 while i <= names.upperbound by i <- i + 1
d149 39
a187 1
	  s.putstring[names(i)]
@


1.3
log
@Typo
@
text
@d145 28
a172 1

@


1.2
log
@Get rid of objectflags, use otree
@
text
@d31 1
a31 1
      r <- r.getBit[xisImmutable]
@


1.1
log
@Initial revision
@
text
@d23 4
@
