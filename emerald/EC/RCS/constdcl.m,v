head	1.21;
access;
symbols
	105alpha:1.21
	104alpha:1.21
	103alpha:1.21
	102alpha:1.21
	101alpha:1.21
	100alpha:1.21
	DIKU_0:1.17
	carlton_start:1.14
	immel_start:1.6;
locks; strict;


1.21
date	98.03.24.16.09.00;	author norm;	state Exp;
branches;
next	1.20;

1.20
date	95.02.07.01.48.31;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.10.01.07.55.40;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	94.08.22.23.43.43;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	94.08.17.16.50.35;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.07.17.06.36.01;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.03.09.21.09.33;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.10.17.06.53;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.07.29.22.32.00;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	91.05.14.15.54.55;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.04.22.22.51.31;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.51.29;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.51.28;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.51.26;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.51.25;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.21
log
@'.'
@
text
@export Constdecl

const constdecl <- class Constdecl (Tree) [xxsymb : Tree, xxtype : Tree, xxvalue : Tree]
    const ln : Integer <- xxsymb$ln
% If doing move/visit
    field isAttached : Boolean <- false
    field xsym : Tree <- xxsymb
    field xtype : Tree <- xxtype
    field value  : Tree <- xxvalue
    export function upperbound -> [r : Integer]
      r <- 2
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- xsym
      elseif i = 1 then
	r <- xtype
      elseif i = 2 then
	r <- value
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	xsym <- r
      elseif i = 1 then
	xtype <- r
      elseif i = 2 then
	value <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nsymb, nxtype, nvalue : Tree
      if xsym !== nil then nsymb <- xsym.copy[i] end if
      if xtype !== nil then nxtype <- xtype.copy[i] end if
      if value !== nil then nvalue <- value.copy[i] end if
      r <- constdecl.create[ln, nsymb, nxtype, nvalue]
      (view r as Attachable)$isAttached <- isAttached
    end copy
    operation iDefineSymbols [st : SymbolTable] -> [xxx : Symbol]
      const id <- (view xsym as hasIdent)$id
% If doing move/visit
      xxx <- st.Define[ln, id, SConst, isAttached]
% else
%     xxx <- st.Define[ln, id, SConst, false]

      if xxx !== nil then
	const n <- nameof value
	if n = "anoblit" or n = "anatlit" then
	  xxx$value <- value
	end if
      end if
    end iDefineSymbols
    export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
      xsym.resolveSymbols[pst, 0]
      if xtype !== nil then xtype.resolveSymbols[pst, 1] end if
      value.resolveSymbols[pst, 1]
    end resolveSymbols

  export operation getIsNotManifest -> [r : Boolean]
    r <- self$xsym$isNotManifest
  end getIsNotManifest

  export operation assignTypes 
    var thetype : Tree
    if self$xtype !== nil then
      if self$xtype$isNotManifest then
	Environment$env.SemanticError[self$ln,
	  "Type of the constant \"%s\" must be manifest",
	  {(view self$xsym as hasIdent)$id.asString}]
	thetype <- self$value.getAT
      else
	thetype <- self$xtype.execute.asType
      end if
    else
      thetype <- self$value.getAT
    end if
    if thetype == nil then
      const env <- Environment$env
      if env$traceassigntypes then
	env.printf["Couldn't find a type for const %S on line %d\n",
	  { (view xsym as Sym)$mysym$myident, self$ln}]
      end if
      if self$xtype == nil then
	if env$dotypecheck then
	  env.Warning[ln, "Can't figure out the type of the constant %S",
	    { (view xsym as Sym)$mysym$myident }]
	end if
      else
	env.SemanticError[ln, "Non type in constant declaration", nil]
      end if
    end if
    (view self$xsym as Sym)$mysym$ATinfo <- thetype
    FTree.assignTypes[self]
  end assignTypes

  export operation typeCheck
    if self$xtype !== nil then
      const rexp <- self$value
      const rtype <- view rexp.getAT as hasConforms
      const lsym <- (view self$xsym as Sym)$mysym
      const ltype  <- view lsym$ATInfo as Tree
      if ltype == nil then
	const env <- Environment$env
	if env$tracetypeCheck then 
	  env.printf["const.typeCheck on %d: type of id (%s) is nil\n", 
	    { self$ln, lsym.asString }]
	end if
      elseif rtype == nil then
	const env <- Environment$env
	if env$tracetypecheck then
	  env.printf["const.typeCheck on %d: type of value (%s) is nil\n", 
	    { self$ln, rexp.asString }]
	end if
      elseif ! rtype.conformsTo[self$ln, ltype] then
	Environment$env.SemanticError[self$ln, "The initializer type doesn't conform to that declared for the constant", nil]
      end if
    end if
    FTree.typeCheck[self]
  end typeCheck

  export operation findThingsToGenerate [q : Any]
    const s <- view self$xsym as Sym
    if s$mysym$value !== nil then
      const t <- view s$mysym$value as Tree
      t.findThingsToGenerate[q]
    else
      FTree.findThingsToGenerate[q, self]
    end if
  end findThingsToGenerate

  export operation generate [ct : Printable]
    if xsym$isNotManifest then
      const bc <- view ct as ByteCode
      const xsymassym <- view xsym as sym
      const s <- xsymassym$mysym
%      Environment$env.pass["const.generate: sym %s size %d\n", 
%	{s.asString, s$size}]
      bc.lineNumber[self$ln]
      bc.pushSize[s$size]
      self$value.generate[ct]
      xsymassym.generateLValue[ct]
      bc.popSize
    end if
  end generate

  export operation findManifests -> [changed : Boolean]
    changed <- false
    if ! self$xsym$isNotManifest then
      if self$value$IsNotManifest then
	self$xsym$isNotManifest <- true
	changed <- true
      end if
    end if
    changed <- FTree.findManifests[self] | changed
  end findManifests

  export operation evaluateManifests
    if ! self$xsym$isNotManifest then
      const t <- view self$xsym as Sym
      assert ! self$value$IsNotManifest
      if t$mysym$value == nil then
	const v <- self$value.execute
	if v == nil then
	  const env <- Environment.getEnv
	  env.pass["Need another pass for \"%s\"\n", {self$value.asString}]
	  env$needMoreEvaluateManifest <- true
	else
	  t$mysym$value <- v
	end if
      end if
    end if
    FTree.evaluateManifests[self]
  end evaluateManifests

  export operation defineSymbols [st : SymbolTable]
    const foo <- self.iDefineSymbols[st]
    FTree.defineSymbols[st, self]
  end defineSymbols

  export function same [o : Tree] -> [r : Boolean]
    r <- false
    if nameof o = "aconstdecl" then
      r <- self$xsym.same[(view o as ConstDecl)$xsym]
    end if
  end same

  export function asString -> [r : String]
    r <- "constdecl"
  end asString
end Constdecl
@


1.20
log
@Even better semantics checks, avoid invoking nil, fix class
@
text
@d37 1
@


1.19
log
@Improved constant type assignment
@
text
@d69 1
@


1.18
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d77 3
a79 2
      if env$traceassigntypes then env.printf["Couldn't find a type for const %s on line %d\n",
        { self$xsym.asString, self$ln}]
d83 2
a84 1
	  env.Warning[ln, "Can't figure out the type of the constant %S", {xsym}]
@


1.17
log
@August 94 Checkpoint II
@
text
@d4 1
a56 3
    initially
      ln <- xsym$ln
    end initially
d79 7
@


1.16
log
@Checkpoint of DIKU August 94 changes
@
text
@d52 1
a52 1
      xsym.resolveSymbols[pst, nexp]
d106 1
a106 1
	Environment$env.SemanticError[self$ln, "type mismatch", nil]
@


1.15
log
@First attempt at abcons
@
text
@d40 1
a40 1
      xxx <- st.Define[id, SConst, isAttached]
d42 1
a42 1
%     xxx <- st.Define[id, SConst, false]
d44 1
a44 4
      if xxx == nil then
	Environment.getEnv.SemanticError[ln, "Redefinition of symbol \"%s\"",
	  { id.asString } ]
      else
d78 2
a79 1
      Environment$env.tassignTypes["Couldn't find a type for const %s on line %d\n",
d81 1
d94 5
a98 2
	Environment$env.ttypeCheck["const.typeCheck on %d: type of id (%s) is nil\n", 
	  { self$ln, lsym.asString }]
d100 5
a104 2
	Environment$env.ttypeCheck["const.typeCheck on %d: type of value (%s) is nil\n", 
	  { self$ln, rexp.asString }]
d123 1
a123 1
    if self$xsym$isNotManifest then
d125 2
a126 2
      const xsym <- view self$xsym as sym
      const s <- xsym$mysym
d132 1
a132 1
      xsym.generateLValue[ct]
@


1.14
log
@Fix a debugging message (missing newline)
@
text
@d38 1
a38 1
      const id <- (view xsym as hasId)$id
d73 1
a73 1
	  {(view self$xsym as hasId)$id.asString}]
a90 1
      const hasConforms <- typeobject t op conformsTo[Integer, Tree]->[Boolean] end t
d119 1
a119 5
      const bc <- view ct as typeobject T
	op pushSize[Integer]
	op popSize 
	op lineNumber[Integer]
      end T
@


1.13
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d156 1
a156 1
	  env.pass["Need another pass for \"%s\"", {self$value.asString}]
@


1.12
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d167 1
a167 1
    const foo <- iDefineSymbols[st]
@


1.11
log
@Fix line number generation for comp and const
@
text
@d40 1
a40 1
      xxx <- st.Define[id, STKind.SConst, isAttached]
d42 1
a42 1
%     xxx <- st.Define[id, STKind.SConst, false]
@


1.10
log
@Use nameof rather than asString
@
text
@d123 1
d129 1
@


1.9
log
@Get rid of return on generate
@
text
@d48 2
a49 2
	const n <- value.asString
	if n = "oblit" or n = "atlit" then
d171 1
a171 1
    if o.asString = "constdecl" then
@


1.8
log
@Removed all monitors
@
text
@d118 1
a118 2
  export operation generate [ct : Printable] -> [rct : Any]
    var junk : Any
d129 1
a129 1
      junk <- self$value.generate[ct]
@


1.7
log
@Evaluate manifests in multiple passes
@
text
@a3 1
  monitor
a61 1
  end monitor
@


1.6
log
@Enabled attach declarations
@
text
@d154 8
a161 1
	t$mysym$value <- self$value.execute
@


1.5
log
@type -> typeobject sed
@
text
@d6 1
a6 1
%    field isAttached : Boolean <- false
d41 1
a41 1
%      xxx <- st.Define[id, STKind.SConst, isAttached]
d43 1
a43 1
      xxx <- st.Define[id, STKind.SConst, false]
@


1.4
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 7
import Tree, FTree, Printable from "Jekyll"
import SymbolTable, Symbol, STKind from "Jekyll"
import HasId from "Jekyll"
import Setq from "Jekyll"
import Sym from "Jekyll"
import Environment from "Jekyll"
export Constdecl to "Jekyll"
d93 1
a93 1
      const hasConforms <- type t op conformsTo[Integer, Tree]->[Boolean] end t
d123 1
a123 1
      const bc <- view ct as type T
@


1.3
log
@Don't waste space on move/visit/attached
@
text
@d126 2
a127 1
  export operation generate [ct : Printable]
d138 1
a138 1
      self$value.generate[ct]
@


1.2
log
@Fixed setting of line numbers
@
text
@d11 2
a12 1
    field isAttached : Boolean <- false
d46 5
a50 1
      xxx <- st.Define[id, STKind.SConst, isAttached]
@


1.1
log
@Initial revision
@
text
@d61 3
@
