head	1.17;
access;
symbols
	105alpha:1.17
	104alpha:1.17
	103alpha:1.17
	102alpha:1.17
	101alpha:1.17
	100alpha:1.17
	DIKU_0:1.14
	carlton_start:1.9
	immel_start:1.3;
locks; strict;


1.17
date	96.03.28.23.05.29;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	94.12.06.20.12.48;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	94.08.17.16.50.40;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.12.20.21.09.40;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	93.07.23.14.44.23;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	93.06.25.15.52.18;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	93.02.25.00.18.06;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	93.02.17.17.18.52;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.17.07.02;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.52.53;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.52.52;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.52.51;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.17
log
@Flatten invocations to reduce jibberish on the stack
@
text
@export Exp

const exp <- class Exp (Tree) [xxleft : Tree, xxop : Ident, xxright : Tree]
    field left : Tree <- xxleft
    field xop : Ident <- xxop
    field right  : Tree <- xxright
    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- left
      elseif i = 1 then
	r <- right
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	left <- r
      elseif i = 1 then
	right <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nleft, nright : Tree
      if left !== nil then nleft <- left.copy[i] end if
      if right !== nil then nright <- right.copy[i] end if
      r <- exp.create[ln, nleft, xop, nright]
    end copy

  export operation flatten [ininvoke : Boolean, indecls : Tree] -> [r : Tree, outdecls : Tree]
    const s <- xop$name
    left, outdecls <- left.flatten[true, indecls]
    if s = "and" or s = "or" then
      var decls : Tree
      var val : Tree
      val, decls <- right.flatten[true, nil]
      if decls !== nil then
	right <- Eblock.create[ln, decls, val]
      else
	assert val == right
      end if
    end if
    if ininvoke then
      const id <- newid.newid
      const asym : Sym <- sym.create[self$ln, id]
      const c : constdecl <- constdecl.create[self$ln, asym, nil, self]
      if outdecls == nil then 
	outdecls <- seq.singleton[c]
      else
	outdecls.rcons[c]
      end if
      r <- sym.create[self$ln, id]
    else
      r <- self
    end if
  end flatten

  export operation removeSugar [o : Tree] -> [r : Tree]
    const s <- xop$name
    if s = "*>" then
      left <- invoc.create[
		left$ln,
		left,
		opname.literal["getsignature"],
		nil]
      right <- invoc.create[
		right$ln,
		right,
		opname.literal["getsignature"],
		nil]
    end if
    r <- FTree.removeSugar[self, o]
  end removeSugar

  export operation typeCheck
    const s <- xop$name
    const env <- Environment$env
    var t : hasConforms

    left.typeCheck
    right.typeCheck

    if s = "or" or s = "and" then
      const booleantype <- (view BuiltinLit.findTree[0x1003, nil] as hasInstAT).getInstAT.asType

      t <- view left.getAT as hasConforms
      if t !== nil then t <- view t.asType as hasConforms end if
      if t == nil then
	env.ttypecheck["Found nil on left of %s on %d\n", 
	  { s, self$ln }]	
      elseif !t.conformsTo[ln, booleantype] then
	env.SemanticError[self$ln, "boolean required", nil]	
      end if

      t <- view right.getAT as hasConforms
      if t !== nil then t <- view t.asType as hasConforms end if
      if t == nil then
	env.ttypecheck["Found nil on right of %s on %d\n", 
	  { s, self$ln }]	
      elseif !t.conformsTo[ln, booleantype] then
	env.SemanticError[self$ln, "boolean required", nil]	
      end if
    elseif s = "*>" then
      const signaturetype <- (view BuiltinLit.findTree[0x1009, nil] as hasInstAT).getInstAT.asType
      const typetype <- (view BuiltinLit.findTree[0x1000, nil] as hasInstAT).getInstAT.asType
      t <- view left.getAT as hasConforms
      if t !== nil then t <- view t.asType as hasConforms end if
      if t == nil then
	env.ttypecheck["Found nil on left of %s on %d\n", 
	  { s, self$ln }]	
      elseif !t.conformsTo[ln, typetype] then
	env.SemanticError[self$ln, "type required", nil]	
      else
	const oldWhy <- env$why
	env$why <- false
	if !t.conformsTo[ln, signaturetype] then
	  left <- invoc.create[
		    left$ln,
		    left,
		    opname.literal["getsignature"],
		    nil]
	end if
	env$why <- oldWhy
      end if

      t <- view right.getAT as hasConforms
      if t !== nil then t <- view t.asType as hasConforms end if
      if t == nil then
	env.ttypecheck["Found nil on right of %s on %d\n", 
	  { s, self$ln }]	
      elseif !t.conformsTo[ln, typetype] then
	env.SemanticError[self$ln, "type required", nil]	
      else
	const oldWhy <- env$why
	env$why <- false
	if !t.conformsTo[ln, signaturetype] then
	  right <- invoc.create[
		    right$ln,
		    right,
		    opname.literal["getsignature"],
		    nil]
	end if
	env$why <- oldWhy
      end if
    elseif s = "==" then
    elseif s = "!==" then
    else
      env.printf["Can't type check a %s.\n", { s }]
    end if
  end typeCheck

  export operation generate [xct : Printable]
    const bc <- view xct as ByteCode
    const s <- xop$name
    if s = "or" or s = "and" then
      const isand : Boolean <- s = "and"
      const endLabel : Integer <- bc.declareLabel
      var opcode : String
      bc.pushSize[4]
      self$left.generate[xct]
      bc.addCode["DUP"]
      if isand then
	opcode <- "BRF"
      else
	opcode <- "BRT"
      end if
      bc.addCode[opcode]
      bc.addLabelReference[endLabel, 2]
      bc.addCode["POOP"]
      self$right.generate[xct]
      bc.popSize
      bc.defineLabel[endLabel]
      bc.finishExpr[4, 0x1803, 0x1603]
    elseif s = "==" then
      bc.pushSize[4]
      self$left.generate[xct]
      self$right.generate[xct]
      bc.popSize
      bc.addCode["SUB"]
      bc.addCode["EQ"]
      bc.finishExpr[4, 0x1803, 0x1603]
    elseif s = "!==" then
      bc.pushSize[4]
      self$left.generate[xct]
      self$right.generate[xct]
      bc.popSize
      bc.addCode["SUB"]
      bc.addCode["NE"]
      bc.finishExpr[4, 0x1803, 0x1603]
    elseif s = "*>" then
      bc.pushSize[4]
      left.generate[xct]
      right.generate[xct]
      bc.popSize
      bc.addCode["CONFORMS"]
      bc.finishExpr[4, 0x1803, 0x1603]
    end if
  end generate
  export operation getAT -> [r : Tree]
    r <- builtinlit.create[self$ln, 0x03].getInstAT
  end getAT
  export operation getCT -> [r : Tree]
    r <- builtinlit.create[self$ln, 0x03].getInstCT
  end getCT
  export function asString -> [r : String]
    r <- "exp"
  end asString
end Exp
@


1.16
log
@Clean up generating the second things in references
@
text
@d31 45
@


1.15
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d129 1
a129 3
      if bc$size == 8 then
	bc.fetchVariableSecondThing[0x1803, 0x1603]
      end if
d137 1
a137 1
      if bc$size == 8 then bc.fetchVariableSecondThing[0x1803, 0x1603] end if
d145 1
a145 1
      if bc$size == 8 then bc.fetchVariableSecondThing[0x1803, 0x1603] end if
d152 1
a152 1
      if bc$size == 8 then bc.fetchVariableSecondThing[0x1803, 0x1603] end if
@


1.14
log
@Checkpoint of DIKU August 94 changes
@
text
@d112 2
a113 2
      const isand <- s = "and"
      const endLabel <- bc.declareLabel
@


1.13
log
@First attempt at abcons
@
text
@d3 1
a3 1
const exp <- class Exp (Tree) [xxleft : Tree, xxop : Tree, xxright : Tree]
d5 1
a5 1
    field xop : OpName <- view xxop as OpName
d8 1
a8 1
      r <- 2
a13 2
	r <- xop
      elseif i = 2 then
a20 2
	xop <- view r as OpName
      elseif i = 2 then
d25 1
a25 1
      var nleft, nxop, nright : Tree
a26 1
      if xop !== nil then nxop <- xop.copy[i] end if
d28 1
a28 1
      r <- exp.create[ln, nleft, nxop, nright]
d32 2
a33 1
    const s <- xop$id.asString
a34 3
    const booleantype <- (view BuiltinLit.findTree[0x1003, nil] as hasInstAT).getInstAT.asType
    const signaturetype <- (view BuiltinLit.findTree[0x1009, nil] as hasInstAT).getInstAT.asType
    const typetype <- (view BuiltinLit.findTree[0x1000, nil] as hasInstAT).getInstAT.asType
d40 2
d43 1
a43 1
      if t !== nil then t <- t.asType end if
d45 1
a45 1
	Environment$env.ttypecheck["Found nil on left of %s on %d\n", 
d48 1
a48 1
	Environment$env.SemanticError[self$ln, "boolean required", nil]	
d52 1
a52 1
      if t !== nil then t <- t.asType end if
d54 1
a54 1
	Environment$env.ttypecheck["Found nil on right of %s on %d\n", 
d57 1
a57 1
	Environment$env.SemanticError[self$ln, "boolean required", nil]	
d60 2
d63 1
a63 1
      if t !== nil then t <- t.asType end if
d65 1
a65 1
	Environment$env.ttypecheck["Found nil on left of %s on %d\n", 
d68 12
a79 7
	Environment$env.SemanticError[self$ln, "type required", nil]	
      elseif !t.conformsTo[ln, signaturetype] then
	left <- invoc.create[
		  left$ln,
		  left,
		  opname.literal["getsignature"],
		  nil]
d83 1
a83 1
      if t !== nil then t <- t.asType end if
d85 1
a85 1
	Environment$env.ttypecheck["Found nil on right of %s on %d\n", 
d88 12
a99 7
	Environment$env.SemanticError[self$ln, "type required", nil]	
      elseif !t.conformsTo[ln, signaturetype] then
	right <- invoc.create[
		  right$ln,
		  right,
		  opname.literal["getsignature"],
		  nil]
d104 1
a104 1
      Environment$env.printf["Can't type check a %s.\n", { s }]
d110 1
a110 1
    const s <- xop$id.asString
@


1.12
log
@Preparatory work for Ab/Cons
@
text
@a37 5
    const hasConforms <- typeobject t
      op conformsTo[Integer, Tree]->[Boolean]
      op asType -> [t]
    end t
    const hiat <- typeobject t operation getInstAt -> [Tree] end t
d39 3
a41 3
    const booleantype <- (view BuiltinLit.findTree[0x1003, nil] as hiat).getInstAT.asType
    const signaturetype <- (view BuiltinLit.findTree[0x1009, nil] as hiat).getInstAT.asType
    const typetype <- (view BuiltinLit.findTree[0x1000, nil] as hiat).getInstAT.asType
d102 1
a102 11
    const bc <- view xct as typeobject T
      op addCode[String]
      op addValue [Integer, Integer]
      op fetchVariableSecondThing[Integer, Integer]
      op declareLabel -> [Integer]
      op addLabelReference[Integer,Integer]
      op defineLabel [Integer]
      op pushSize[Integer]
      op popSize
      function getSize -> [Integer]
    end T
@


1.11
log
@Finalized merge with Mark Immels version
@
text
@d110 1
a110 1
      op fetchLiteral [Integer]
d138 1
a138 1
	bc.fetchLiteral[0x1803]
d147 1
a147 1
      if bc$size == 8 then bc.fetchLiteral[0x1803] end if
d155 1
a155 1
      if bc$size == 8 then bc.fetchLiteral[0x1803] end if
d162 1
a162 1
      if bc$size == 8 then bc.fetchLiteral[0x1803] end if
@


1.10
log
@Invoke getSignature on the arguments to *> if there is any question
@
text
@d55 2
a56 2
	Environment$env.ttypecheck["Found nil on left of %s on %d\n",
	  { s, self$ln }]
d58 1
a58 1
	Environment$env.SemanticError[self$ln, "boolean required", nil]
d64 2
a65 2
	Environment$env.ttypecheck["Found nil on right of %s on %d\n",
	  { s, self$ln }]
d67 1
a67 1
	Environment$env.SemanticError[self$ln, "boolean required", nil]
d73 2
a74 7
	Environment$env.ttypecheck["Found nil on left of %s on %d\n",
	  { s, self$ln }]
	left <- invoc.create[
		  left$ln,
		  left,
		  opname.literal["getsignature"],
		  nil]
d76 1
a76 1
	Environment$env.SemanticError[self$ln, "type required", nil]
d88 2
a89 7
	Environment$env.ttypecheck["Found nil on right of %s on %d\n",
	  { s, self$ln }]
	right <- invoc.create[
		  right$ln,
		  right,
		  opname.literal["getsignature"],
		  nil]
d91 1
a91 1
	Environment$env.SemanticError[self$ln, "type required", nil]
@


1.9
log
@Type checking errors repaired
@
text
@d55 2
a56 2
	Environment$env.ttypecheck["Found nil on left of %s on %d\n", 
	  { s, self$ln }]	
d58 1
a58 1
	Environment$env.SemanticError[self$ln, "boolean required", nil]	
d64 2
a65 2
	Environment$env.ttypecheck["Found nil on right of %s on %d\n", 
	  { s, self$ln }]	
d67 1
a67 1
	Environment$env.SemanticError[self$ln, "boolean required", nil]	
d73 7
a79 2
	Environment$env.ttypecheck["Found nil on left of %s on %d\n", 
	  { s, self$ln }]	
d81 1
a81 1
	Environment$env.SemanticError[self$ln, "type required", nil]	
d93 7
a99 2
	Environment$env.ttypecheck["Found nil on right of %s on %d\n", 
	  { s, self$ln }]	
d101 1
a101 1
	Environment$env.SemanticError[self$ln, "type required", nil]	
@


1.8
log
@Fix conforms expressions, fix a bug in inline expansion
@
text
@d44 3
d57 1
a57 1
      elseif !t.conformsTo[ln, BuiltinLit.findTree[0x1003, nil].getInstAT.asType] then
d66 1
a66 1
      elseif !t.conformsTo[ln, BuiltinLit.findTree[0x1003, nil].getInstAT.asType] then
d75 1
a75 1
      elseif !t.conformsTo[ln, BuiltinLit.findTree[0x1000, nil].getInstAT.asType] then
d77 1
a77 1
      elseif !t.conformsTo[ln, BuiltinLit.findTree[0x1009, nil].getInstAT.asType] then
d90 1
a90 1
      elseif !t.conformsTo[ln, BuiltinLit.findTree[0x1000, nil].getInstAT.asType] then
d92 1
a92 1
      elseif !t.conformsTo[ln, BuiltinLit.findTree[0x1009, nil].getInstAT.asType] then
@


1.7
log
@Typecheck exps
@
text
@d44 4
d74 6
d89 6
d154 5
a158 2
      bc.addCode["LDIS"]
      bc.addValue[1, 2]
@


1.6
log
@Use nameof rather than asString
@
text
@d36 51
@


1.5
log
@Get rid of return on generate
@
text
@d5 1
a5 1
    field xop : Tree <- xxop
d23 1
a23 1
	xop <- r
d48 3
a50 3
    const s <- self$xop.asString
    if s = "opname (or)" or s = "opname (and)" then
      const isand <- s = "opname (and)"
d70 1
a70 1
    elseif s = "opname (==)" then
d78 1
a78 1
    elseif s = "opname (!==)" then
d86 1
a86 1
    elseif s = "opname (*>)" then
@


1.4
log
@Removed all monitors
@
text
@d36 1
a36 2
  export operation generate [xct : Printable] -> [rct : None]
    var junk : Any
d54 1
a54 1
      junk <- self$left.generate[xct]
d64 1
a64 1
      junk <- self$right.generate[xct]
d72 2
a73 2
      junk <- self$left.generate[xct]
      junk <- self$right.generate[xct]
d80 2
a81 2
      junk <- self$left.generate[xct]
      junk <- self$right.generate[xct]
@


1.3
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a34 1
  end monitor
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
export Exp to "Jekyll"
d40 1
a40 1
    const bc <- view xct as type T
@


1.1
log
@Initial revision
@
text
@d40 2
a41 1
  export operation generate [xct : Printable]
d59 1
a59 1
      self$left.generate[xct]
d69 1
a69 1
      self$right.generate[xct]
d77 2
a78 2
      self$left.generate[xct]
      self$right.generate[xct]
d85 2
a86 2
      self$left.generate[xct]
      self$right.generate[xct]
@
