head	1.12;
access;
symbols
	105alpha:1.12
	104alpha:1.12
	103alpha:1.12
	102alpha:1.12
	101alpha:1.12
	100alpha:1.12
	DIKU_0:1.9
	carlton_start:1.6
	immel_start:1.4;
locks; strict;


1.12
date	98.02.09.17.55.34;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	94.12.06.20.12.48;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	94.08.17.16.50.42;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.10.17.07.05;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.08.03.09.26.40;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.53.17;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.53.15;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.53.14;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.12
log
@Checkpoint
@
text
@export Globalref

const globalref <- class Globalref (Tree) [xxid : Integer, xxatOID : Integer, xxcodeOID : Integer, xxinstctOID : Integer, xxinstatOID : Integer]
    const field id    : Integer <- xxid
    const field atOID : Integer <- xxatOID
    const field codeOID:Integer <- xxcodeOID
    const field instCTOID : Integer <- xxinstCTOID
    const field instATOID : Integer <- xxinstATOID

    export function upperbound -> [r : Integer]
      r <- ~1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
    end getElement
    export operation setElement [i : Integer, r : Tree]
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      r <- self
    end copy

  export function variableSize -> [size : Integer]
    size <- IDS.IDToSize[self$id]
  end variableSize

  export function getBrand -> [brand : Character]
    brand <- IDS.IDToBrand[self$id]
  end getBrand

  export operation generateSelf [xct : Printable]
    self.generate[xct]
  end generateSelf

  export operation generate [xct : Printable]
    const bc <- view xct as ByteCode
    bc.fetchLiteral[self$id]
    bc.finishExpr[4, self$codeOID, 0x1601]
  end generate

  export function asString -> [r : String]
    r <- "globalref"
  end asString
  export operation execute -> [r : Tree]
    r <- self
  end execute
  
  export function asType -> [r : Tree]
    if instATOID == nil then
      r <- ObjectTable.Lookup[id]
    else
      r <- ObjectTable.Lookup[instATOID]
    end if
    if r == nil then r <- self end if
  end asType

  export function getInstCT -> [r : Tree]
    if instCTOID !== nil then
      r <- ObjectTable.Lookup[instCTOID]
      if r == nil then
	r <- globalref.create[self$ln, nil, nil, instCTOID, nil, nil]
      end if
    end if
  end getInstCT

  export function getInstAT -> [r : Tree]
    if instATOID !== nil then
      r <- ObjectTable.Lookup[instATOID]
      if r == nil then
	r <- globalref.create[self$ln, instATOID, nil, nil, nil, nil]
      end if
    end if
  end getInstAT

  export function getAT -> [r : Tree]
    if ATOID !== nil then
      r <- ObjectTable.Lookup[ATOID]
      if r == nil then
      r <- globalref.create[self$ln, ATOID, nil, nil, nil, nil]
      end if
    end if
  end getAT

  export operation conformsTo [theln : Integer, other : Tree] -> [r : Boolean]
    const otherashasid <- view other as hasid
    const otherid : Integer <- otherashasid$id
    const env : EnvironmentType <- Environment$env
    if env$tracetypecheck then 
      env.printf["  globalref.conformsTo[%s] on %d", { other.asString, theln }]
    end if
    r <- IDs.conformsByID[theln, self$id, otherid]
  end conformsTo
end Globalref
@


1.11
log
@Clean up generating the second things in references
@
text
@d73 9
@


1.10
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d36 1
a36 3
    if bc$size != 4 then
      bc.fetchVariableSecondThing[self$codeOID, 0x1601]
    end if
@


1.9
log
@Checkpoint of DIKU August 94 changes
@
text
@d77 2
a78 2
    const otherid <- otherashasid$id
    const env <- Environment$env
@


1.8
log
@First attempt at abcons
@
text
@d3 1
a3 1
const globalref <- class Globalref (Tree) [xxid : Integer, xxcodeOID : Integer, xxinstctOID : Integer, xxinstatOID : Integer]
d5 1
d49 6
a54 1
    r <- self
d58 6
a63 1
    r <- globalref.create[self$ln, nil, self$instCTOID, nil, nil]
d65 1
d67 6
a72 1
    r <- globalref.create[self$ln, nil, self$instATOID, nil, nil]
d74 2
a75 1
  export operation conformsTo [ln : Integer, other : Tree] -> [r : Boolean]
d78 5
a82 3
    Environment$env.ttypecheck["  globalref.conformsTo[%s] on %d",
      { other.asString, ln }]
    r <- IDs.conformsByID[ln, self$id, otherid]
@


1.7
log
@Preparatory work for Ab/Cons
@
text
@d33 1
a33 5
    const bc <- view xct as typeobject T
      operation fetchLiteral[Integer]
      operation fetchVariableSecondThing[Integer, Integer]
      function  getSize -> [Integer]
    end T
a57 1
    const hasid <- typeobject t operation getID -> [Integer] end t
@


1.6
log
@Get rid of return on generate
@
text
@d35 1
d40 1
a40 1
      bc.fetchLiteral[self$codeOID]
@


1.5
log
@Removed all monitors
@
text
@d29 1
a29 1
    const junk <- self.generate[xct]
d32 1
a32 1
  export operation generate [xct : Printable] -> [rct : None]
@


1.4
log
@DIKU changes to support TS.of[Integer, String]
@
text
@a3 1
  monitor
a18 1
  end monitor
@


1.3
log
@type -> typeobject sed
@
text
@d66 2
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 4
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import IDS from "Jekyll"
export Globalref to "Jekyll"
d35 1
a35 1
    const bc <- view xct as type T
d63 1
a63 1
    const hasid <- type t operation getID -> [Integer] end t
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
    self.generate[xct]
d37 1
a37 1
  export operation generate [xct : Printable]
@
