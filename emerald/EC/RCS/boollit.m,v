head	1.8;
access;
symbols
	105alpha:1.8
	104alpha:1.8
	103alpha:1.8
	102alpha:1.8
	101alpha:1.8
	100alpha:1.8
	DIKU_0:1.8
	carlton_start:1.6
	immel_start:1.4;
locks; strict;


1.8
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	93.06.05.07.45.34;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.05.23.16.26.04;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.50.41;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.50.40;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.50.39;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.8
log
@First attempt at abcons
@
text
@export Boollit

const boollit <- class Boollit (Tree) [xvalue : Boolean]
  const field value : Boolean <- xvalue
  const myindex <- 0x03

  export operation copy [i : Integer] -> [r : Tree]
    r <- self
  end copy

  export operation generate[xct : Printable]
    const bc <- view xct as ByteCode
    bc.addCode["LDIB"]
    if self$value then
      bc.addValue[1, 1]
    else
      bc.addValue[0, 1]
    end if
    if bc$size != 4 then
      bc.fetchVariableSecondThing[0x1800 + myindex, 0x1600 + myindex]
    end if
  end generate
  export function asString -> [r : String]
    r <- "boollit"
  end asString
  export operation getIsNotManifest -> [r : Boolean]
    r <- false
  end getIsNotManifest

  export operation execute -> [r : Tree]
    r <- self
  end execute
  export operation getCT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstCT
  end getCT
  export operation getAT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstAT
  end getAT
end Boollit
@


1.7
log
@Preparatory work for Ab/Cons
@
text
@d12 1
a12 6
    const bc <- view xct as typeobject BCType
      operation addCode[String]
      operation addValue[Integer, Integer]
      function  getSize -> [Integer]
      operation fetchVariableSecondThing[Integer, Integer]
    end BCType
@


1.6
log
@Byte load/stores, literals on CT basis
@
text
@d16 1
a16 1
      operation fetchLiteral [Integer]
d25 1
a25 1
      bc.fetchLiteral[0x1800 + myindex]
@


1.5
log
@Get rid of return on generate
@
text
@d18 1
a18 1
    bc.addCode["LDIS"]
d20 1
a20 1
      bc.addValue[1, 2]
d22 1
a22 1
      bc.addValue[0, 2]
@


1.4
log
@Clean up literals
@
text
@d11 1
a11 1
  export operation generate[xct : Printable] -> [rct : None]
@


1.3
log
@type -> typeobject sed
@
text
@a0 1

d3 3
a5 3
const boollit <- class Boollit (Tree)
  monitor
    field value : Boolean 
d7 3
a9 11
    export function upperbound -> [r : Integer]
      r <- ~1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
    end getElement
    export operation setElement [i : Integer, r : Tree]
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      r <- self
    end copy
  end monitor
d25 1
a25 1
      bc.fetchLiteral[0x1803]
d39 1
a39 1
    r <- builtinlit.create[self$ln, 0x03].getInstCT
d42 1
a42 1
    r <- builtinlit.create[self$ln, 0x03].getInstAT
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@a0 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import BuiltinLit from "Jekyll"
d2 1
a2 1
export Boollit to "Jekyll"
d21 1
a21 1
    const bc <- view xct as type BCType
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
  export operation generate[xct : Printable]
@
