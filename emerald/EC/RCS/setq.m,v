head	1.13;
access;
symbols
	105alpha:1.12
	104alpha:1.12
	103alpha:1.12
	102alpha:1.12
	101alpha:1.12
	100alpha:1.12
	DIKU_0:1.10
	carlton_start:1.8
	immel_start:1.4;
locks; strict;


1.13
date	2007.06.11.01.39.07;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	97.01.22.00.03.20;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	94.10.04.05.34.41;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	94.08.17.16.51.33;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.10.17.07.40;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.57.47;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.57.46;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.57.44;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.57.43;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.13
log
@Check in current version
@
text
@export Setq

const setq <- class Setq (Tree) [xxinner : Tree, xxparam : Tree, xxouter : Tree]
  class export operation build[out : Symbol, t : Any] -> [r : Symbol]
    const id <- out$myident
    const outer <- sym.create[0, id]
    const it <- Environment.getEnv.getITable
    const param <- sym.create[0, it.Lookup[id$name||"_p", 999]]
    const inner <- sym.create[0, id]
    const thetree <- view t as typeobject aRealTree
      function  getxsetq -> [Tree]
      operation setxsetq[Tree]
      function  getST -> [SymbolTable]
    end aRealTree
    const st <- thetree$st
    const sq <- self.create[0, inner, param, outer]
    var s : Symbol

    if thetree$xsetq == nil then
      thetree$xsetq <- seq.create[0]
    end if
    thetree$xsetq.rcons[sq]

    r <- Symbol.create[SImport, id, st]
    st.Insert[r]
    inner$mysym <- r
    outer$mysym <- out
    s <- Symbol.create[SParam, param$id, st]
    st.Insert[s]
    param$mySym <- s
  end build

  class export operation display [po : Tree]
    if po == nil then return end if
    for i : Integer <- 0 while i <= po.upperbound by i <- i + 1
      const sq : Setq <- view po[i] as Setq
      const sy <- view sq$outer as Sym
      const name <- sy$id$name
      const value <- sy$mysym$value
      const stdout <- (locate self)$stdout
%     sq.print[stdout, 2]
      stdout.putstring["  "]
      stdout.putstring[name]
      stdout.putstring[" -> "]
      if value !== nil then
	stdout.putstring[value.asString]
	stdout.putchar[' ']
	if value.asString = "oblit" or value.asString.getelement[0, 5] = "atlit" then
	  (view value as otree).printFlags[stdout]
	end if
      end if
      stdout.putchar['\n']
    end for
  end display

    field inner : Tree <- xxinner
    field param : Tree <- xxparam
    field outer  : Tree <- xxouter
    export function upperbound -> [r : Integer]
      r <- 2
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- inner
      elseif i = 1 then
	r <- param
      elseif i = 2 then
	r <- outer
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	inner <- r
      elseif i = 1 then
	param <- r
      elseif i = 2 then
	outer <- r
      end if
    end setElement

    export operation getIsNotManifest -> [r : Boolean]
      r <- true
      if (view inner as Sym)$mysym$isNotManifest then
	const outervalue : Tree <- view (view outer as Sym)$mysym$value as Tree
	if outervalue !== nil and nameof outervalue = "anoblit" then
	  const outerobject <- view outervalue as typeobject t 
	    function getIsExported -> [Boolean]
	  end t
	  if outerobject$isExported then
	    r <- false
	  end if
	end if
      else
	r <- false
      end if
    end getIsNotManifest

    export operation findManifests -> [changed : Boolean]
      changed <- false
      if ! inner$isNotManifest then
	if outer$isNotManifest then
	  inner$isNotManifest <- true
	  param$isNotManifest <- true
	  changed <- true
	else
	  const t <- view inner as Sym
	  const u <- view outer as Sym
	  if t$mysym$value == nil then
	    t$mysym$value <- u$mysym$value
	  end if
	end if
      end if
    end findManifests

    export operation evaluateManifests
      if ! inner$isNotManifest then
	const t <- view inner as Sym
	const u <- view outer as Sym
	if t$mysym$value == nil then
	  t$mysym$value <- u$mysym$value
	  if t$mysym$value == nil then
	    const env <- Environment.getEnv
	    env.pass["\"%s\", line %d: Need another pass for setq \"%S\"\n", 
	      {env$fn, t$ln, t$id}]
	    env$needMoreEvaluateManifest <- true
	  end if
	end if
      elseif ! self$isNotManifest then
	% We have an import of an exported not really manifest symbol.
	% We need to treat it as manifest.
	const ins <- view inner as Sym
	const ous <- view outer as Sym
	const pas <- view param as Sym
	ins$isNotManifest <- false
	ous$isNotManifest <- false
	pas$isNotManifest <- false
      end if
    end evaluateManifests

    export operation assignTypes
      const i <- view inner as Sym
      const o <- view outer as Sym
      i$mysym$ATinfo <- o$mysym$ATinfo
    end assignTypes

    export operation copy [i : Integer] -> [r : Tree]
      var ninner, nparam, nouter : Tree
      if inner !== nil then ninner <- inner.copy[i] end if
      if param !== nil then nparam <- param.copy[i] end if
      if outer !== nil then nouter <- outer.copy[i] end if
      r <- setq.create[ln, ninner, nparam, nouter]
    end copy

  export operation generate [ct : Printable]
  end generate

  export function asString -> [r : String]
    r <- "setq"
    if self$inner !== nil and self$inner$isNotManifest then
      r <- r || " (nonManifest)"
    end if
  end asString
end Setq
@


1.12
log
@Many changes
@
text
@d33 23
@


1.11
log
@Detect exported non-manifest objects that import non-manifest ones
@
text
@d105 9
@


1.10
log
@Checkpoint of DIKU August 94 changes
@
text
@d59 14
a72 1
      r <- (view inner as Sym)$mysym$isNotManifest
@


1.9
log
@First attempt at abcons
@
text
@d10 2
a11 1
    const tr <- view t as typeobject X
d13 3
a15 4
      function  getxsetq -> [Tree]
    end X
    const ashasst <- view t as hasST
    const st <- ashasst$st
d19 2
a20 2
    if tr$xsetq == nil then
      tr$xsetq <- seq.create[0]
d22 1
a22 1
    tr$xsetq.rcons[sq]
d85 6
@


1.8
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d14 2
a15 2
    const hasst <- view t as typeobject X function getST ->[SymbolTable] end X
    const st <- hasst$st
@


1.7
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d16 1
a16 1
    const sq <- create[0, inner, param, outer]
@


1.6
log
@Get rid of return on generate
@
text
@d6 1
a6 1
    const outer <- symref.create[0, id]
d8 2
a9 2
    const param <- symdef.create[0, it.Lookup[id$name||"_p", 999]]
    const inner <- symdef.create[0, id]
d24 1
a24 1
    r <- Symbol.create[STKind.SImport, id, st]
d28 1
a28 1
    s <- Symbol.create[STKind.SParam, param$id, st]
@


1.5
log
@Removed all monitors
@
text
@d103 1
a103 1
  export operation generate [ct : Printable] -> [rct : None]
@


1.4
log
@type -> typeobject sed
@
text
@d11 2
a12 2
      operation setsetq[Tree]
      function  getsetq -> [Tree]
d19 2
a20 2
    if tr$setq == nil then
      tr$setq <- seq.create[0]
d22 1
a22 1
    tr$setq.rcons[sq]
a32 1
  monitor
a101 1
  end monitor
@


1.3
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 9
import Tree, FTree, Printable from "Jekyll"
import Ident from "Jekyll"
import Symbol, SymbolTable, STKind from "Jekyll"
import Symref from "Jekyll"
import Environment from "Jekyll"
import Symdef from "Jekyll"
import Sym from "Jekyll"
import Seq from "Jekyll"
export Setq to "Jekyll"
d4 1
a4 1
  type export operation build[out : Symbol, t : Any] -> [r : Symbol]
d10 1
a10 1
    const tr <- view t as type X
d14 1
a14 1
    const hasst <- view t as type X function getST ->[SymbolTable] end X
@


1.2
log
@Use SImport instead of SConst for imported symbols
@
text
@d113 1
a113 1
  export operation generate [ct : Printable]
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
    r <- Symbol.create[STKind.SConst, id, st]
@
