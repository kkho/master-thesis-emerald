head	1.27;
access;
symbols
	105alpha:1.27
	104alpha:1.27
	103alpha:1.27
	102alpha:1.27
	101alpha:1.27
	100alpha:1.27
	DIKU_0:1.18
	carlton_start:1.15
	immel_start:1.4;
locks; strict;


1.27
date	97.01.22.00.03.20;	author norm;	state Exp;
branches;
next	1.26;

1.26
date	95.04.23.02.48.05;	author norm;	state Exp;
branches;
next	1.25;

1.25
date	95.03.29.18.19.54;	author norm;	state Exp;
branches;
next	1.24;

1.24
date	95.03.03.05.44.23;	author norm;	state Exp;
branches;
next	1.23;

1.23
date	95.02.07.01.48.31;	author norm;	state Exp;
branches;
next	1.22;

1.22
date	94.12.19.07.19.47;	author norm;	state Exp;
branches;
next	1.21;

1.21
date	94.10.04.05.35.33;	author norm;	state Exp;
branches;
next	1.20;

1.20
date	94.10.01.07.55.40;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.08.22.23.44.18;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	94.08.17.16.51.54;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	93.06.25.15.51.35;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.06.22.05.35.46;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.06.02.22.58.47;	author mueller;	state Exp;
branches;
next	1.10;

1.10
date	93.03.11.00.55.42;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.16.21.27.42;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.10.17.07.50;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.06.19.12.14.58;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.06.03.09.36.22;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.59.49;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.59.47;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.59.46;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.27
log
@Many changes
@
text
@export Xexport
const prunable <- typeobject prunable
  operation prune
end prunable

const helper <- immutable object helper
  const ids : AOI <- AOI.create[-32]
  const ats : AOT <- AOT.create[-32]
  const marked <- ISet.create[32]

  export operation needAT [id : Integer, theAT : Tree]
    const env <- Environment$env
    const fn : String <- env$namespacefile
    if env$dotypecheck and theAT !== nil and id >= 0x2000 then
      ObjectTable.Define[id, theAT]
    end if
    if fn == nil then return end if

    if id < 0x2000 then
      % it is a builtin and we ignore it
    else
      const isNew <- ! marked.includes[id]
      if isNew then
	marked.add[id]
	ids.addupper[id]
	ats.addupper[theat]
      end if
    end if
  end needAT

  export operation flush
    const env : EnvironmentType <- Environment$env
    const fn : String <- env$namespacefile
    if fn == nil then return end if

    const f : OutStream <- OutStream.toUnix[fn || ".ats", "a"]
    if f == nil then
      env.SemanticError[1, "Can't open AT file \"%s\"",{fn || ".ats"}]
    else
      loop
	exit when ids.empty
	const theid : Integer <- ids.removeLower
	var theat : ATLit <- view ats.removeLower as ATLit
	f.putint[theid, 0]
	f.putchar[' ']
	if theat == nil then
	  theat <- view ObjectTable.Lookup[theid] as ATLit
	end if
	assert nameof theat = "anatlit"
	const atext : String <- theat.asText[self]
	if ! env$exporttree then
	  theat.prune
	end if
	f.putstring[atext]
	f.putchar['\n']
      end loop
      f.close
    end if
  end flush

  export operation Split [s:String] -> [w:String,x:String, y:String, z:String, aa : String, bb : String]
    var first, last : Integer
    var c : Character
    var t : String

    first <- 0
    last <- 0
    for which : Integer <- 0 while which < 6 by which <- which + 1
      loop
	exit when first >= s.length
	c <- s[first]
	exit when c != ' ' and c != '\^I' and c != '\n'
	first <- first + 1
      end loop
      if first >= s.length then return end if
      last <- first + 1
      loop
	exit when last >= s.length
	c <- s[last]
	exit when c = ' ' or c = '\^I' or c = '\n'
	last <- last + 1
      end loop
      t <- s[first, last - first]
      if which = 0 then
	w <- t
      elseif which = 1 then
	x <- t
      elseif which = 2 then
	y <- t
      elseif which = 3 then
	z <- t
      elseif which = 4 then
	aa <- t
      else
	bb <- t
      end if
      first <- last + 1
    end for
  end Split

  export operation fetchIDs[name:String] -> [id:Integer, atOID : Integer, codeOID:Integer, instCTOID:Integer, instATOID : Integer]
    const env <- Environment$env
    const rootst <- env$rootst
    const theid  <- env$ITable.Lookup[name, 999]
    var thesym : Symbol <- rootst.Lookup[0, theid, false]

    if thesym !== nil then
      const thevalue <- thesym$value
      const itsname <- nameof thevalue
      if itsname = "anoblit" or itsname = "aglobalref" then
	const obl <- view thevalue as hasIDs
	id <- obl$id
	atOID <- obl$atoid
	codeOID <- obl$codeOID
	instCTOID <- obl$instCTOID
	instATOID <- obl$instATOID
      elseif itsname = "anatlit" then
	const atl <- view thevalue as atlit
	id <- atl$id
	atoid <- 0x1609
      elseif itsname = "aliteral" then
        % do nothing, I suppose
      else
	Environment$env.pass["Fetchids: can't get the ids from %s (a %s)\n",
	  { name, itsname }]
      end if
    end if
  end fetchIDs

  export operation doOne[name : String, value : Tree, atype : Tree]
    const env : EnvironmentType <- Environment$env
    const rootst <- env$rootst
    const theid  <- env$ITable.Lookup[name, 999]
    var thesym : Symbol <- rootst.Lookup[0, theid, false]
    if thesym == nil then
      thesym <- rootst.Define[0, theid, SConst, false]
    end if
    assert thesym !== nil
    env.pass["Exporting \"%s\" a %s\n", {name, value.asString}]
    thesym$value <- value
    thesym$atinfo <- atype

    if env$dotypecheck then
      if value !== nil then
	const valuename <- nameof value
	if valuename = "anatlit" or valuename = "anoblit" or 
	   valuename = "aglobalref" then
	  const ashasid <- view value as hasID
	  const id : Integer <- ashasid$id
	  if id !== nil then
	    ObjectTable.Define[id, value]
	  end if
	end if
      end if
      if atype !== nil then
	const atypename <- nameof atype
	if atypename = "anatlit" or atypename = "anoblit" or 
	   atypename = "aglobalref" then
	  const ashasid <- view atype as hasID
	  const id : Integer <- ashasid$id
	  if id !== nil then
	    ObjectTable.Define[id, atype]
	  end if
	end if
      end if
    end if
  end doOne

  export operation doAnId [name : String, id : Integer, atOID : Integer, codeOID : Integer, instctoid : Integer, instATOID : Integer, atype : Tree]
    if id = -1 then
      self.doOne[name, Literal.IntegerL[0, codeOID.asString], 
	builtinlit.create[0, 0x06].getInstAT]
    elseif id = -2 then
      self.doOne[name, Literal.CharacterL[0, Character.literal[codeOID].asString], 
	builtinlit.create[0, 0x04].getInstAT]
    elseif id = -3 then
      self.doOne[name, Literal.BooleanL[0, codeOID = 1], 
	builtinlit.create[0, 0x03].getInstAT]
    else
      self.doOne[name, Globalref.create[0, id, atOID, codeOID, 
	instctoid, instATOID], atype]
    end if
  end doAnId
end helper

const xexport <- class Xexport (Tree) [xxsyms : Tree, xxpath : Tree]

  class export operation loadATs [pfn : String]
    const fn <- pfn || ".ats"
    var f : InStream
    begin
      f <- InStream.fromUnix[fn, "r"]
      failure f <- nil end failure
    end
    if f == nil then return end if 
    var input, first, second, third, fourth, fifth, sixth : String
    loop
      begin
	input <- f.getString
	failure
	  input <- nil
	end failure
      end
      exit when input == nil
      const separators <- " \n\r\t"
      first, input <- input.token[separators]
      if input !== nil then second, input <- input.token[separators] end if
      if first == nil or second == nil then
	Environment$env.printf["Syntax error in load file\n", nil]
	exit
      end if
      const id <- Integer.Literal[first]
      const theat <- ATLit.fromText[second]
      ObjectTable.Define[id, theat]
    end loop
    f.close
  end loadATs

  class export operation load[fn : String]
    var f : InStream
    const env <- Environment$env
    begin
      f <- InStream.fromUnix[fn, "r"]
      failure f <- nil end failure
    end
    if f == nil then
      env.pass["Can't read file \"%s\", creating a new environment\n", {fn}]
    else
      var input, first, second, third, fourth, fifth, sixth : String
      var id, atOID, codeOID, instctoid, instatoid : Integer
      loop
	begin
	  input <- f.getString
	  failure
	    input <- nil
	  end failure
	end
	exit when input == nil
	const separators <- " \n\r\t"
	first, input <- input.token[separators]
	if input !== nil then second, input <- input.token[separators] end if
	if first == nil or second == nil or 
	   (second[0] != '-' and ('0' > second[0] or second[0] > '9')) then
	  env.printf["Syntax error in load file\n", nil]
	  exit
	end if
	id <- Integer.Literal[second]
	if input == nil then
	  atOID <- nil
	else
	  third, input <- input.token[separators]
	  if third !== nil then atOID <- Integer.Literal[third] end if
	end if
	if input == nil then
	  codeOID <- nil
	else
	  fourth, input <- input.token[separators]
	  if fourth !== nil then codeOID <- Integer.Literal[fourth] end if
	end if
	if input == nil then
	  instctoid <- nil
	else
	  fifth, input <- input.token[separators]
	  if fifth !== nil then instctoid <- Integer.Literal[fifth] end if
	end if
	if input == nil then
	  instatoid <- nil
	else
	  sixth, input <- input.token[separators]
	  if sixth !== nil then instatoid <- Integer.Literal[sixth] end if
	end if
	helper.doAnID[first, id, atOID, codeOID, instctoid, instatoid, nil]
      end loop
      f.close
    end if
    XExport.loadATs[fn]
  end load

    field syms : Tree <- xxsyms
    field path : Tree <- xxpath

    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- syms
      elseif i = 1 then
	r <- path
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	syms <- r
      elseif i = 1 then
	path <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nsyms, npath : Tree
      if syms !== nil then nsyms <- syms.copy[i] end if
      if path !== nil then npath <- path.copy[i] end if
      r <- xexport.create[ln, nsyms, npath]
    end copy
    export operation doEnvExports [st : SymbolTable]
      for i : Integer <- 0 while i <= syms.upperbound by i <- i + 1
	const sy <- view syms[i] as Sym
	if sy !== nil then
	  const sid <- sy$id
	  const name : String <- sid$name
	  const val <- view sy$mysym$value as Tree
	  const env : EnvironmentType <- Environment$env
	  const fn : String <- env$namespacefile

	  if val == nil then
	    env.pass["Symbol \"%s\" doesn't have a value yet\n", { name }]
	    env.SemanticError[ln, "Symbol \"%s\" doesn't have a value", {name}]
%	  elseif path !== nil then
%	    % export to the builtin place
%	    if env$exportTree then helper.doOne[name, val, nil] end if
	  else
	    const itsname <- nameof val
	    var id, atOID, codeOID, instctoid, instatoid : Integer 

	    if itsname = "anoblit" then
	      const myob <- view val as OBLit

	      if myob$isNotManifest then
		assert myob$isExported
		const badthing : String <- myob.areMyImportsManifestOrExported
		if badthing !== nil then
		  % This object imports something bad
		  env.SemanticError[sy$ln,
		    "Can't export \"%s\" as it imports \"%s\" which is not manifest",
		    { (view myob$name as Sym)$mysym$myident$name, badthing }]
		end if
	      end if
	      myob.makeMeManifest

	      id <- myob$id
	      const theat <- myob.getat
	      const theinstat <- myob.getinstat
	      if theat !== nil then
		atOID <- (view theat as hasID)$id
		helper.needAT[atOID, theat]
		if !env$exporttree then (view theat as prunable).prune end if
	      end if
	      if theinstat !== nil then
		instatOID <- (view theinstat as hasID)$id
		helper.needAT[instatOID, theinstat]
		if !env$exporttree then (view theinstat as prunable).prune end if
	      end if
	      codeOID <- myob$codeOID
	      const instct <- view myob$instct as ObLit
	      if instct !== nil then
		instctoid <- myob$instctoid
		if !env$exporttree then instct.prune end if
	      end if
	      if ! env$exporttree then myob.prune end if
	    elseif itsname = "aglobalref" then
	      const myob <- view val as hasIds
	      id <- myob$id
	      atOID <- myob$atOID
	      codeOID <- myob$codeOID
	      instctoid <- myob$instctoid
	      instatoid <- myob$instatoid
	    elseif itsname = "anatlit" then
	      const myat <- view val as atlit
	      myat.makeMeManifest
	      id <- myat$id
	      atOID <- 0x1609
	      helper.needAT[id, myat]
	      if ! env$exporttree then myat.prune end if
	    elseif itsname = "aliteral" then
	      const asLiteral <- (view val as Literal)
	      const index <- asLiteral$index
	      if index = IntegerIndex then
		id <- -1
		codeOID <- Integer.literal[asLiteral$str]
		atOID <- 0x1606
	      elseif index = CharacterIndex then
		id <- -2
		codeOID <- asLiteral$str[0].ord
		atOID <- 0x1604
	      elseif index = BooleanIndex then
		id <- -3
		if asLiteral$str = "true" then
		  codeOID <- 1
		else 
		  codeOID <- 0
		end if
		atOID <- 0x1603
	      else
		env.SemanticError[sy$ln, "Can't export such values", nil]
	      end if
	    else
	      env.SemanticError[sy$ln, "Can't export such values", nil]
	    end if
	    if env$exportTree or id == nil then
	      helper.doOne[name, val, view sy$mysym$atinfo as Tree]
	    elseif env$dotypecheck then
%	      if itsname = "anatlit" then
		helper.doOne[name, val, view sy$mysym$atinfo as Tree]
%	      else
%		helper.doAnId[name, id, atOID, codeOID, instctoid, instatoid, sy$mysym$atinfo]
%	      end if
	    else
	      helper.doAnId[name, id, atOID, codeOID, instctoid, instatoid, nil]
	    end if
	    if id !== nil and fn !== nil then
	      const f <- OutStream.toUnix[fn, "a"]
	      if f == nil then
		env.SemanticError[1, "Can't open name list file \"%s\"",{fn}]
	      else
		% chmod fn 0666
		f.putstring[name]
		f.putchar[' ']
		f.putint[id, 0]
		f.putchar[' ']
		f.putint[atOID, 0]
		if codeOID !== nil then
		  f.putchar[' ']
		  f.putint[codeOID, 0]
		  if instctOID !== nil then
		    f.putchar[' ']
		    f.putint[instctOID, 0]
		    if instatOID !== nil then
		      f.putchar[' ']
		      f.putint[instatOID, 0]
		    end if
		  end if
		end if
		f.putchar['\n']
		f.close
	      end if
	    end if
	  end if
	end if
      end for
      helper.flush
    end doEnvExports

    export operation assignIDs [st : SymbolTable]
      for i : Integer <- 0 while i <= syms.upperbound by i <- i + 1
	const sy <- view syms[i] as Sym
	if sy !== nil then
	  const sid <- sy$id
	  const name : String <- sid$name
	  const val <- view sy$mysym$value as Tree
	  const env    <- Environment$env
	  const fn : String <- env$namespacefile

	  if val == nil then
	    env.pass["Symbol \"%s\" doesn't have a value yet\n", { name }]
	  elseif path !== nil then
	    % do nothing, the builtins already know their IDs
	  else
	    var id, atoid, codeOID, instctoid, instatoid : Integer
	    const valname : String <- nameof val
	    id, atoid, codeOID, instctoid, instatoid <- helper.fetchIDs[name]
	    if valname = "anoblit" then
	      const myob <- view val as oblit

	      if myob$isNotManifest then
		myob$isExported <- true
	      end if

	      if id !== nil then
		myob$id <- id
		if atOID !== nil then myob$atoid <- atoid end if
		if codeOID !== nil then myob$codeOID <- codeOID end if
		if instCTOID !== nil then myob$instCTOID <- instCTOID end if
		if instATOID !== nil then myob$instATOID <- instATOID end if
		if ! env$exporttree and !env$dotypecheck then
		  syms[i] <- nil
		end if
	      else
		myob.makeMeManifest
	      end if
	    elseif valname = "anatlit" then
	      const myat <- view val as ATlit
	      if id !== nil then
		myat$id <- id 
		if ! (env$exporttree or env$dotypecheck) then
		  syms[i] <- nil 
		end if
	      end if
	    elseif valname = "aglobalref" then
	      % do nothing
	    elseif valname = "aliteral" then
	      % also do nothing, these things don't need ids
	    else
	      env.pass[
		"Can't figure out how to assign ID to \"%s\", a \"%s\"\n",
		{ name, val.asString : String }]
	    end if
	  end if
	end if
      end for
    end assignIDs


  export operation generate [ct : Printable]
  end generate

  export function asString -> [r : String]
    r <- "xexport"
  end asString
end Xexport
@


1.26
log
@Deal with String.Token more carefully
@
text
@d477 2
@


1.25
log
@Get rid of split, and make execute now and eval work again
@
text
@d252 1
a252 1
	  atOID <- Integer.Literal[third]
d258 1
a258 1
	  codeOID <- Integer.Literal[fourth]
d264 1
a264 1
	  instctoid <- Integer.Literal[fifth]
d270 1
a270 1
	  instatoid <- Integer.Literal[sixth]
@


1.24
log
@Use new streams code
@
text
@d205 3
a207 1
      first, second, third, fourth, fifth, sixth <- helper.Split[input]
d239 3
a241 1
	first, second, third, fourth, fifth, sixth <- helper.Split[input]
d248 1
a248 1
	if third == nil then
d251 1
d254 1
a254 1
	if fourth == nil then
d257 1
d260 1
a260 1
	if fifth == nil then
d263 1
d266 1
a266 1
	if sixth == nil then
d269 1
@


1.23
log
@Even better semantics checks, avoid invoking nil, fix class
@
text
@d190 5
a194 1
    const f <- InStream.fromUnix[fn, "r"]
d198 6
a203 1
      input <- f.getString
d218 1
a218 1
    const f <- InStream.fromUnix[fn, "r"]
d220 4
d230 6
a235 1
	input <- f.getString
@


1.22
log
@Deal with file open errors more gracefully
@
text
@d291 1
@


1.21
log
@Detect exported non-manifest objects that import non-manifest ones
@
text
@d32 1
a32 1
    const env <- Environment$env
d37 22
a58 19

    loop
      exit when ids.empty
      const theid : Integer <- ids.removeLower
      var theat : ATLit <- view ats.removeLower as ATLit
      f.putint[theid, 0]
      f.putchar[' ']
      if theat == nil then
	theat <- view ObjectTable.Lookup[theid] as ATLit
      end if
      assert nameof theat = "anatlit"
      const atext : String <- theat.asText[self]
      if ! env$exporttree then
	theat.prune
      end if
      f.putstring[atext]
      f.putchar['\n']
    end loop
    f.close
d222 1
a222 1
	  Environment$env.printf["Syntax error in load file\n", nil]
d286 1
a286 1
	  const env    <- Environment$env
d385 7
a391 7
	      % chmod fn 0666
	      f.putstring[name]
	      f.putchar[' ']
	      f.putint[id, 0]
	      f.putchar[' ']
	      f.putint[atOID, 0]
	      if codeOID !== nil then
d393 2
a394 2
		f.putint[codeOID, 0]
		if instctOID !== nil then
d396 2
a397 2
		  f.putint[instctOID, 0]
		  if instatOID !== nil then
d399 5
a403 1
		    f.putint[instatOID, 0]
d406 2
a408 2
	      f.putchar['\n']
	      f.close
@


1.20
log
@Improved constant type assignment
@
text
@d299 7
a305 11
		env.SemanticError[ln, "Can't export non manifest objects", nil]
	      else
		myob.makeMeManifest
  
		id <- myob$id
		const theat <- myob.getat
		const theinstat <- myob.getinstat
		if theat !== nil then
		  atOID <- (view theat as hasID)$id
		  helper.needAT[atOID, theat]
		  if !env$exporttree then (view theat as prunable).prune end if
d307 21
a327 12
		if theinstat !== nil then
		  instatOID <- (view theinstat as hasID)$id
		  helper.needAT[instatOID, theinstat]
		  if !env$exporttree then (view theinstat as prunable).prune end if
		end if
		codeOID <- myob$codeOID
		const instct <- view myob$instct as ObLit
		if instct !== nil then
		  instctoid <- myob$instctoid
		  if !env$exporttree then instct.prune end if
		end if
		if ! env$exporttree then myob.prune end if
d329 1
d364 1
a364 1
		env.SemanticError[ln, "Can't export such values", nil]
d367 1
a367 1
	      env.SemanticError[ln, "Can't export such values", nil]
d429 5
@


1.19
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@a296 1
	      myob.makeMeManifest
d298 25
a322 7
	      id <- myob$id
	      const theat <- myob.getat
	      const theinstat <- myob.getinstat
	      if theat !== nil then
		atOID <- (view theat as hasID)$id
		helper.needAT[atOID, theat]
		if !env$exporttree then (view theat as prunable).prune end if
a323 12
	      if theinstat !== nil then
		instatOID <- (view theinstat as hasID)$id
		helper.needAT[instatOID, theinstat]
		if !env$exporttree then (view theinstat as prunable).prune end if
	      end if
	      codeOID <- myob$codeOID
	      const instct <- view myob$instct as ObLit
	      if instct !== nil then
		instctoid <- myob$instctoid
		if !env$exporttree then instct.prune end if
	      end if
	      if ! env$exporttree then myob.prune end if
@


1.18
log
@August 94 Checkpoint II
@
text
@d13 1
a13 1
    const fn <- env$namespacefile
d33 1
a33 1
    const fn <- env$namespacefile
d40 1
a40 1
      const theid <- ids.removeLower
d48 1
a48 1
      const atext <- theat.asText[self]
d128 1
a128 1
    const env <- Environment$env
d146 1
a146 1
	  const id <- ashasid$id
d157 1
a157 1
	  const id <- ashasid$id
d168 1
a168 1
      self.doOne[name, Literal.IntegerL[codeOID.asString], 
d171 1
a171 1
      self.doOne[name, Literal.CharacterL[Character.literal[codeOID].asString], 
d174 1
a174 1
      self.doOne[name, Literal.BooleanL[codeOID = 1], 
d185 2
a186 2
  class export operation loadATs [fn : String]
    fn <- fn || ".ats"
d281 1
a281 1
	  const name <- sid$name
d284 1
a284 1
	  const fn <- env$namespacefile
d403 1
a403 1
	  const name <- sid$name
d406 1
a406 1
	  const fn <- env$namespacefile
@


1.17
log
@Checkpoint of DIKU August 94 changes
@
text
@d80 1
a80 1
      t <- s.getSlice[first, last - first]
d353 1
a353 2
		Environment$env.printf["DoEnvExports: impossible literal index %d\n",
		  {index}]
d356 1
a356 3
	      Environment$env.printf["DoEnvExports: impossible name %s\n",
		{itsname}]
	      
@


1.16
log
@First attempt at abcons
@
text
@d2 3
d7 52
a58 2
  const x <- 1
  export operation Split [s:String] -> [w:String,x:String, y:String, z:String, aa : String]
d65 1
a65 1
    for which : Integer <- 0 while which < 5 by which <- which + 1
d89 2
d92 1
a92 1
	aa <- t
d98 1
a98 1
  export operation fetchIDs[name:String] -> [id:Integer, codeOID:Integer, instCTOID:Integer, instATOID : Integer]
d102 1
a102 1
    var thesym : Symbol <- rootst.Lookup[theid, false]
d110 1
d116 3
a118 4
	id <- atl$id	
      elseif itsname = "anintlit" or
             itsname = "acharlit" or
	     itsname = "aboollit" then
d131 1
a131 1
    var thesym : Symbol <- rootst.Lookup[theid, false]
d133 1
a133 1
      thesym <- rootst.Define[theid, SConst, false]
d139 25
d166 1
a166 1
  export operation doAnId [name : String, id : Integer, codeOID : Integer, instctoid : Integer, instATOID : Integer, atype : Tree]
d168 1
a168 1
      self.doOne[name, IntLit.create[0, codeOID.asString], 
d171 1
a171 1
      self.doOne[name, CharLit.create[0, Character.literal[codeOID].asString], 
d174 1
a174 1
      self.doOne[name, BoolLit.create[0, codeOID = 1], 
d177 1
a177 1
      self.doOne[name, Globalref.create[0, id, codeOID, 
d184 21
d209 1
a209 1
      env.printf["Can't read file \"%s\", creating a new environment\n", {fn}]
d211 2
a212 2
      var input, first, second, third, fourth, fifth : String
      var id, codeOID, instctoid, instatoid : Integer
a213 1
	exit when f.eos
d215 2
a216 1
	first, second, third, fourth, fifth <- helper.Split[input]
d224 5
d231 1
a231 1
	  codeOID <- Integer.Literal[third]
d233 1
a233 1
	if fourth == nil then
d236 1
a236 1
	  instctoid <- Integer.Literal[fourth]
d238 1
a238 1
	if fifth == nil then
d241 1
a241 1
	  instatoid <- Integer.Literal[fifth]
d243 1
a243 1
	helper.doAnID[first, id, codeOID, instctoid, instatoid, nil]
d247 1
d288 3
a290 3
	  elseif path !== nil then
	    % export to the builtin place
	    if env$exportTree then helper.doOne[name, val, nil] end if
d293 1
a293 1
	    var id, codeOID, instctoid, instatoid : Integer 
d295 25
a319 1
	    if itsname = "anoblit" or itsname = "aglobalref" then
d322 1
d328 1
d330 26
a355 12
	    elseif itsname = "anintlit" then
	      const myint <- view val as Intlit
	      id <- -1
	      codeOID <- Integer.literal[myint$str]
	    elseif itsname = "acharlit" then
	      const mychar <- view val as CharLit
	      id <- -2
	      codeOID <- mychar$str[0].ord
	    elseif itsname = "aboollit" then
	      const mybool <- view val as Boollit
	      id <- -3
	      codeOID <- mybool$value.ord
d362 1
a362 1
	      helper.doOne[name, val, nil]
d364 5
a368 1
	      helper.doAnId[name, id, codeOID, instctoid, instatoid, sy$mysym$atinfo]
d370 1
a370 1
	      helper.doAnId[name, id, codeOID, instctoid, instatoid, nil]
d378 2
d398 1
d416 1
a416 1
	    var id, codeOID, instctoid, instatoid : Integer
d418 1
a418 1
	    id, codeOID, instctoid, instatoid <- helper.fetchIDs[name]
d423 1
d435 3
a437 1
		if !env$exporttree then syms[i] <- nil end if
d441 1
a441 3
	    elseif valname = "anintlit" or
		   valname = "acharlit" or
		   valname = "aboollit" then
@


1.15
log
@Fixed a bug in exporting character literals
@
text
@a2 7
const hasIDs <- typeobject hasIDs
  function getID -> [Integer]
  function  getCodeOID -> [Integer]
  function  getInstCTOID -> [Integer]
  function  getInstATOID -> [Integer]
end hasIDs

d171 1
a171 5
	const sy <- view syms[i] as typeobject X
	  function getid -> [Ident]
	  function getmysym -> [Symbol]
	  function getLn -> [Integer]
	end X
d249 1
a249 5
	const sy <- view syms[i] as typeobject X
	  function getid -> [Ident]
	  function getmysym -> [Symbol]
	  function getLn -> [Integer]
	end X
d272 3
a274 1
		if ! env$exporttree then syms[i] <- nil end if
@


1.14
log
@Export char and bools as well
@
text
@d98 1
a98 1
      self.doOne[name, CharLit.create[0, Character.literal[codeOID]], 
@


1.13
log
@Convert to the new subscript syntax a[b]
@
text
@d15 1
d34 1
d36 1
a36 1
	w <- s.getSlice[first, last - first]
d38 1
a38 1
	x <- s.getSlice[first, last - first]
d40 1
a40 1
	y <- s.getSlice[first, last - first]
d42 1
a42 1
	z <- s.getSlice[first, last - first]
d44 1
a44 1
	aa <- s.getSlice[first, last - first]
d68 4
d73 1
a73 1
	Environment$env.printf["Fetchids: can't get the ids from %s (a %s)\n",
d94 1
a94 3
    if id != -1 then
      self.doOne[name, Globalref.create[0, id, codeOID, instctoid, instATOID],atype]
    else
d97 9
d212 8
d223 1
d297 4
@


1.12
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d21 1
a21 1
	c <- s(first)
d29 1
a29 1
	c <- s(last)
d111 1
a111 1
	   (second(0) != '-' and ('0' > second(0) or second(0) > '9')) then
d165 1
a165 1
	const sy <- view syms(i) as typeobject X
d238 1
a238 1
	const sy <- view syms(i) as typeobject X
d265 1
a265 1
		if ! env$exporttree then syms(i) <- nil end if
d271 1
a271 1
		if !env$exporttree then syms(i) <- nil end if
@


1.11
log
@from/toUnix calls changed to new syntax
@
text
@d89 1
a89 1
      doOne[name, Globalref.create[0, id, codeOID, instctoid, instATOID],atype]
d91 1
a91 1
      doOne[name, IntLit.create[0, codeOID.asString], 
@


1.10
log
@Export integers
@
text
@d99 1
a99 1
    const f <- InStream.fromUnix[fn, 0, 0]
d211 2
a212 2
	      % O_CREAT | O_WRONLY | O_APPEND = 01000 + 1 + 010
	      const f <- OutStream.toUnix[fn, 01011, 0666]
@


1.9
log
@Use nameof rather than asString
@
text
@d79 1
a79 1
      thesym <- rootst.Define[theid, STKind.SConst, false]
d88 6
a93 1
    doOne[name, Globalref.create[0, id, codeOID, instctoid, instATOID], atype]
d110 2
a111 1
	if first == nil or second == nil or '0' > second(0) or second(0) > '9' then
d195 4
@


1.8
log
@Store the AT of exported symbols, do allocation for inlining
@
text
@d56 2
a57 2
      const itsname <- thevalue.asString
      if itsname = "oblit" or itsname = "globalref" then
d63 1
a63 1
      elseif itsname = "atlit" then
d177 1
a177 1
	    const itsname <- val.asString
d180 1
a180 1
	    if itsname = "oblit" or itsname = "globalref" then
d186 1
a186 1
	    elseif itsname = "atlit" then
d246 1
d248 1
a248 1
	    if val.AsString = "oblit" then
d257 1
a257 1
	    elseif val.asString = "atlit" then
d263 1
a263 1
	    elseif val.asString = "globalref" then
@


1.7
log
@Get rid of return on generate
@
text
@d73 1
a73 1
  export operation doOne[name : String, value : Tree]
d84 1
d87 2
a88 2
  export operation doAnId [name : String, id : Integer, codeOID : Integer, instctoid : Integer, instATOID : Integer]
    doOne[name, Globalref.create[0, id, codeOID, instctoid, instATOID]]
d125 1
a125 1
	helper.doAnID[first, id, codeOID, instctoid, instatoid]
d175 1
a175 1
	    if env$exportTree then helper.doOne[name, val] end if
d194 3
a196 1
	      helper.doOne[name, val]
d198 1
a198 1
	      helper.doAnId[name, id, codeOID, instctoid, instatoid]
@


1.6
log
@Removed all monitors
@
text
@d272 1
a272 1
  export operation generate [ct : Printable]-> [rct : None]
@


1.5
log
@Clean up the printing of useless information
@
text
@a129 1
  monitor
a270 1
  end monitor
@


1.4
log
@Better message when loaded file does not exist
@
text
@d172 1
a172 1
	    env.printf["Symbol \"%s\" doesn't have a value yet\n", { name }]
d239 1
a239 1
	    env.printf["Symbol \"%s\" doesn't have a value yet\n", { name }]
d260 2
d263 1
a263 1
	      env.printf[
@


1.3
log
@type -> typeobject sed
@
text
@d96 1
a96 1
      env.printf["Can't read file \"%s\"\n", {fn}]
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 9
import Tree, FTree, Printable from "Jekyll"
import Symbol, SymbolTable, STKind from "Jekyll"
import Ident from "Jekyll"
import Environment from "Jekyll"
import StringLit from "Jekyll"
import Oblit from "Jekyll"
import ATlit from "Jekyll"
import GlobalRef from "Jekyll"
export Xexport to "Jekyll"
d3 1
a3 1
const hasIDs <-  type hasIDs
d92 1
a92 1
  type export operation load[fn : String]
d159 1
a159 1
	const sy <- view syms(i) as type X
a166 1
	  const pathstr <- (view path as StringLit)$str
d173 1
a173 1
	  elseif pathstr = "Builtins" then
d226 1
a226 1
	const sy <- view syms(i) as type X
a233 1
	  const pathstr <- (view path as StringLit)$str
d240 1
a240 1
	  elseif pathstr = "Builtins" then
@


1.1
log
@Initial revision
@
text
@d282 1
a282 1
  export operation generate [ct : Printable]
@
