head	1.25;
access;
symbols
	105alpha:1.24
	104alpha:1.24
	103alpha:1.24
	102alpha:1.24
	101alpha:1.24
	100alpha:1.24
	DIKU_0:1.19
	carlton_start:1.13
	immel_start:1.6;
locks; strict;


1.25
date	2007.06.11.01.39.35;	author norm;	state Exp;
branches;
next	1.24;

1.24
date	96.03.28.23.05.29;	author norm;	state Exp;
branches;
next	1.23;

1.23
date	95.03.07.07.54.48;	author norm;	state Exp;
branches;
next	1.22;

1.22
date	95.03.03.05.44.23;	author norm;	state Exp;
branches;
next	1.21;

1.21
date	94.12.06.20.12.48;	author norm;	state Exp;
branches;
next	1.20;

1.20
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.08.22.23.44.17;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.08.17.16.51.52;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	94.03.02.19.00.09;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.12.20.21.09.40;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.06.05.07.45.34;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.03.14.23.58.58;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	93.03.01.03.17.55;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.10.17.07.47;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	91.05.19.23.50.52;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.05.18.12.05.00;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.59.22;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.59.21;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.59.19;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.59.18;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.25
log
@Check in current version
@
text
@export Vectorlit

const AConcreteType <- immutable object AConcreteType
  const ctat <- typeobject ctat
    function  fetchIndex -> [Integer]
    operation getIndex [Integer, CPQueue]
    operation CPoint [OutStream]
  end ctat
  export function getSignature -> [r : Signature]
    r <- ctat
  end getSignature
  export operation create [id : Integer] -> [r : ctat]
    r <- object aCTRef
	const obj <- "-OB-"
	var myind : Integer <- ~1
	var myq : CPQueue

	export function fetchIndex -> [r : Integer]
	  r <- myind
	end fetchIndex

	export operation getIndex [start : Integer, q : CPQueue]
	  if myq !== q then
	    myq <- q
	    q.addUpper[self]
	    myind <- q.upperbound
	  end if
	end getIndex

	export operation CPoint [file : OutStream]
	  file.putString[obj]
	  OIDWriter.Out[id, file]
	end CPoint
    end aCTRef
  end create
end AConcreteType

const vectorlit <- class Vectorlit (OTree) [xxtype : Tree, xxexp : Tree, xxvectorType : Tree]
    field id : Integer
    field kind : Integer
    field codeOID : Integer
    field xtype : Tree <- xxtype
    field exp : Tree <- xxexp
    field vectorType : Tree <- xxvectorType
    field instanceType : Tree
    field cpct : CPAble
    field myind : Integer
    field myq   : CPQueue
    field elementsize : Integer
    const obj <- "+OB+"

    export function fetchIndex -> [r : Integer]
      r <- myind
    end fetchIndex

    export operation getIndex [start : Integer, q : CPQueue]
      if myq !== q then
	q.addUpper[self]
	myind <- q.upperbound
	cpct.getIndex[start, q]
      end if
    end getIndex

    export operation cpoint [file : OutStream]
      var length : Integer <- exp.upperbound + 1
      var rest, value, i :   Integer
      var size :   Integer <- elementsize * length
      var s : String
      var e : Tree

      if elementsize = 1 then
	rest <- 4 - (length # 4)
	if rest = 4 then rest <- 0 end if
	size <- size + rest
      else
	rest <- 0
      end if
      file.putString[obj]
      file.writeInt[16 + 4 + size, 4]
      OIDWriter.Out[id, file]
      file.writeInt[0x40000000 + cpct.fetchIndex, 4]
      file.writeInt[length, 4]

      % write the elements
      i <- 0
      loop
	exit when i > exp.upperbound
	e <- exp[i]
	s <- nameof e
	if s = "asym" then
	  const val <- view (view e as Sym)$mysym$value as Tree
	  e <- val
	end if
	s <- (view e as hasStr)$str

	if kind = 6 then 			% Integer
	  value <- Integer.literal[s]
	elseif kind = 4 then			% Character
	  value <- s[0].ord
	else
	  assert false
	end if
	file.writeInt[value, elementsize]
	i <- i + 1
      end loop

      % pad it out
      loop
	exit when rest == 0
	file.putchar['*']
	rest <- rest - 1
      end loop
    end cpoint

    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- xtype
      elseif i = 1 then
	r <- exp
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	xtype <- r
      elseif i = 1 then
	exp <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nxtype, nexp, nvectortype : Tree
      if xtype !== nil then nxtype <- xtype.copy[i] end if
      if exp !== nil then nexp <- exp.copy[i] end if
%      if vectortype !== nil then nvectortype <- vectortype.copy[i] end if
      r <- vectorlit.create[ln, nxtype, nexp, nil]
    end copy

  export operation flatten [ininvoke : Boolean, indecls : Tree] -> [r : Tree, decls : Tree]
    exp, decls <- exp.flatten[true, indecls]
    if ininvoke then
      const sid <- newid.newid
      const asym : Sym <- sym.create[self$ln, sid]
      const c : constdecl <- constdecl.create[self$ln, asym, nil, self]
      if decls == nil then 
	decls <- seq.singleton[c]
      else
	decls.rcons[c]
      end if
      r <- sym.create[self$ln, sid]
    else
      r <- self
    end if
  end flatten

    export operation typeCheck 
      assert vectorType !== nil
      vectorType.typeCheck
      FTree.typecheck[self]
    end typeCheck

    operation figureMyType
      if vectortype == nil then
	const env : EnvironmentType <- Environment$env
	var thetype : Tree
	if xtype == nil then
	  for i : Integer <- 0 while i <= exp.upperbound by i <- i + 1
	    var e : Tree <- exp[i]
	    var s : String <- nameof e
	    if s = "asym" then
	      const val <- view (view e as Sym)$mysym$value as Tree
	      if val !== nil then
		s <- nameof val
		e <- val
	      end if
	    end if
	    if s = "aliteral" then
	      const asLiteral <- view e as Literal
	      const index : Integer <- asLiteral$index
	      if kind == nil then kind <- index elseif kind != index then kind <- 1 end if
	    else
	      kind <- 1
	    end if
	  end for
	  xtype <- builtinlit.create[ln, kind].asType
	  elementsize <- IDS.IDToSize[0x1600 + kind]
	  if ! env$executenow and (kind == 6 or kind == 4) then id <- nextOID.nextOID end if
	  thetype <- xtype
	else
	  thetype <- xtype.execute.asType
	  elementsize <- (view thetype as hasVariableSize).variableSize
	end if
	const xtypename <- nameof thetype
	var xtypeid : Integer <- 0
	if xtypename = "anatlit" or xtypename = "aglobalref" or xtypename = "abuiltinlit" then
	  xtypeid <- (view thetype as hasIDs)$id
	end if
	if xtypeid = 0x1606 then
	  const ivofintid <- env$ITable.Lookup["immutablevectorofint", 999]
	  const ivofint <- view env$rootst.Lookup[ln, ivofintid, false]$value as Tree
	  vectorType <- ivofint
	elseif xtypeid = 0x1601 then
	  const ivofanyid <- env$ITable.Lookup["immutablevectorofany", 999]
	  const ivofany <- view env$rootst.Lookup[ln, ivofanyid, false]$value as Tree
	  vectorType <- ivofany
	else
	  const ivid <- env$ITable.Lookup["immutablevector", 999]
	  const iv <- view env$rootst.Lookup[ln, ivid, false]$value as Tree
	  const opn <- opname.literal["of"]
	  const args <- seq.singleton[xtype]
	  const inv <- invoc.create[ln, iv, opn, args]
	  vectorType <- inv.execute
	  vectorType.evaluateManifests
	  vectorType.assignTypes
	end if
	instanceType <- (view vectorType as hasInstCT)$instCT
      end if
    end figureMyType

    export operation getAT -> [r : Tree]
      const xx <- view vectorType as hasInstAT
      if xx == nil then
	Environment$env.printf["Vectorlit.getAT: vectorType is nil\n", nil]
      else
	r <- xx.getInstAT
	if r == nil then
	  Environment$env.printf["Vectorlit.getAT: vectorType.getInstAT is nil\n", nil]
	end if
      end if
    end getAT
    initially
      f <- f.setBit[xisnotmanifest, true]
      if exp == nil then
	exp <- seq.create[ln]
      end if
    end initially

  export operation findThingsToGenerate[q : Any]
    self$vectorType.findThingsToGenerate[q]
    self$exp.findThingsToGenerate[q]
  end findThingsToGenerate

  export operation generate [xct : Printable]
    const instanceOB <- view self$instanceType as hasIDs
    const bc <- view xct as ByteCode

    if self$id !== nil then
      self$cpct <- AConcreteType.create[instanceOB$codeOID]
      bc.fetchLiteral[self$id]
      bc.finishExpr[4, instanceOB$codeOID, (view self.getAT as hasid)$id]
      bc.addOther[self]
    else
      var size : Integer <- self$elementsize
      if size == 1 then size <- 4 end if
      const totalsize <- size * (exp.upperbound + 1)
      if ~128 <= totalsize and totalsize <= 127 then
	bc.addCode["LDIB"]
	bc.addValue[totalsize, 1]
      elseif ~32768 <= totalsize and totalsize <= 32767 then
	bc.addCode["LDIS"]
	bc.addValue[totalsize, 2]
      else 
	bc.addCode["LDI"]
	bc.addValue[totalsize, 4]
      end if
      bc.addCode["ENSURESPACE"]
      bc.pushSize[size]
      for i : Integer <- 0 while i <= exp.upperbound by i <- i + 1
	const e <- exp[i]
	e.generate[xct]
      end for
      bc.popSize
      bc.fetchLiteral[instanceOB$codeOID]
      begin
	var val : Integer <- exp.upperbound + 1
	if ~128 <= val and val <= 127 then
	  bc.addCode["LDIB"]
	  bc.addValue[val, 1]
	elseif ~32768 <= val and val <= 32767 then
	  bc.addCode["LDIS"]
	  bc.addValue[val, 2]
	else 
	  bc.addCode["LDI"]
	  bc.addValue[val, 4]
	end if
      end
      bc.addCode["CREATEVECLIT"]
      bc.finishExpr[4, instanceOB$codeOID, (view self.getAT as hasid)$id]
    end if
  end generate

  export operation evaluateManifests
    self.figureMyType
    ftree.evaluateManifests[self]
  end evaluateManifests

  export operation print[s : OutStream, indent : Integer]
    ftree.print[s, indent, self]
    for i : Integer <- 0 while i < indent + 2 by i <- i + 1
      s.putchar[' ']
    end for
    s.putstring["vt: "]
    if vectorType == nil then
      s.putstring["nil\n"]
    else
      vectorType.print[s, indent+2]
    end if
  end print

  export function asString -> [r : String]
    r <- "vectorlit"
  end asString
end Vectorlit
@


1.24
log
@Flatten invocations to reduce jibberish on the stack
@
text
@d256 12
@


1.23
log
@Copying a veclit needs to reset the vector type so it will be re-calculated
@
text
@d140 17
d211 1
a211 1
	  const args <- seq.literal[ln, {xtype : Tree}]
@


1.22
log
@Use new streams code
@
text
@d136 2
a137 2
      if vectortype !== nil then nvectortype <- vectortype.copy[i] end if
      r <- vectorlit.create[ln, nxtype, nexp, nvectortype]
@


1.21
log
@Clean up generating the second things in references
@
text
@d217 3
@


1.20
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d231 1
a231 4
      if bc$size != 4 then
	const tashasid <- view self.getAT as hasid
	bc.fetchVariableSecondThing[instanceOB$codeOID, tashasid$id]
      end if
d257 1
a257 4
      if bc$size != 4 then
	const tashasid <- view self.getAT as hasid
	bc.fetchVariableSecondThing[instanceOB$codeOID, tashasid$id]
      end if
@


1.19
log
@August 94 Checkpoint II
@
text
@d148 1
a148 1
	const env <- Environment$env
d163 1
a163 1
	      const index <- asLiteral$index
@


1.18
log
@Checkpoint of DIKU August 94 changes
@
text
@d148 2
d171 2
a172 1
	  if ! Environment$env$executenow and (kind == 6 or kind == 4) then id <- nextOID.nextOID end if
d174 1
a174 1
	  const thetype <- xtype.execute.asType
d177 14
a190 2
	begin
	  const env <- Environment$env
d199 2
a200 2
	  instanceType <- (view vectorType as hasInstCT)$instCT
	end
d203 1
@


1.17
log
@First attempt at abcons
@
text
@d139 7
d159 4
a162 6
	    if s = "anintlit" then
	      if kind == nil then kind <- 6 elseif kind != 6 then kind <- 1 end if
	    elseif s = "acharlit" then
	      if kind == nil then kind <- 4 elseif kind != 4 then kind <- 1 end if
	    elseif s = "astringlit" then
	      if kind == nil then kind <- 0xb elseif kind != 0xb then kind <- 1 end if
d177 1
a177 1
	  const iv <- view env$rootst.Lookup[ivid, false]$value as Tree
d179 1
a179 1
	  const args <- seq.literal[ln, {xtype}]
a220 1
      const exp <- self$exp
@


1.16
log
@Prepare to generate ab/cons and invokes by index
@
text
@a67 1
      const hasStr <- typeobject t function getStr -> [String] end t
a166 3
	  const hasVariableSize <- typeobject t 
	    function variableSize -> [Integer] 
	  end t
a175 1
	  const hasInstCT <- typeobject t function getInstCT -> [Tree] end t
a183 1
      const hasInstAT <- typeobject t function getInstAT -> [Tree] end t
d204 3
a206 13
    const instanceOB <- view self$instanceType as typeobject t
      function getcodeOID -> [Integer]
    end t
    const bc <- view xct as typeobject BCType
      function  getSize -> [Integer]
      operation pushSize[Integer]
      operation popSize
      operation addOther[Any]
      operation fetchLiteral [Integer]
      operation fetchVariableSecondThing[Integer, Integer]
      operation addCode[String]
      operation addValue[Integer, Integer]
    end BCType
d211 2
a212 1
	bc.fetchVariableSecondThing[instanceOB$codeOID, 0x1601]
d241 2
a242 1
	bc.fetchVariableSecondThing[instanceOB$codeOID, 0x1601]
@


1.15
log
@Preparatory work for Ab/Cons
@
text
@a2 10
const OIDWriter <- immutable object OIDWriter
  export operation Out [Seq : Integer, File : OutStream]
    file.writeInt[0, 4]   % IPAddress
    file.writeInt[0, 1]   % Emerald Instance
    file.writeInt[0, 1]   % Unused
    file.writeInt[0, 2]   % Epoch
    file.writeInt[Seq, 4] % Sequence
  end Out
end OIDWriter

@


1.14
log
@Finalized merge with Mark Immels version
@
text
@d229 1
d237 1
a237 1
	bc.fetchLiteral[instanceOB$codeOID]
d266 1
a266 1
	bc.fetchLiteral[instanceOB$codeOID]
@


1.13
log
@Convert to the new subscript syntax a[b]
@
text
@a0 1

d3 10
a24 1
	const stars <- "****"
d42 1
a42 2
	  file.putString[stars]
	  file.writeInt[id, 4]
a60 1
    const stars <- "****"
d90 2
a91 3
      file.writeInt[12 + 4 + size, 4]
      file.putString[stars]
      file.writeInt[id, 4]
d94 1
@


1.12
log
@Byte load/stores, literals on CT basis
@
text
@d93 1
a93 1
	e <- exp(i)
d104 1
a104 1
	  value <- s(0).ord
d148 1
a148 1
	    var e : Tree <- exp(i)
d239 1
a239 1
	const e <- exp(i)
@


1.11
log
@Missed generating sub expressions of vector literals
@
text
@d244 13
a256 2
      bc.addCode["LDIS"]
      bc.addValue[exp.upperbound + 1, 2]
@


1.10
log
@Implemented a print for vectorlit to print the type
@
text
@d210 1
@


1.9
log
@Use nameof rather than asString
@
text
@d186 1
d256 13
@


1.8
log
@Get rid of return on generate
@
text
@d94 2
a95 2
	s <- e.asString
	if s.length > 3 and s.getSlice[0, 3] = "sym" then
d149 2
a150 2
	    var s : String <- e.asString
	    if s.length > 3 and s.getSlice[0, 3] = "sym" then
d153 1
a153 1
		s <- val.asString
d157 1
a157 1
	    if s.length > 6 and s.getSlice[0, 6] = "intlit" then
d159 1
a159 1
	    elseif s.length > 7 and s.getSlice[0, 7] = "charlit" then
d161 1
a161 1
	    elseif s.length > 9 and s.getSlice[0, 9] = "stringlit" then
@


1.7
log
@Removed all monitors
@
text
@d211 1
a211 1
  export operation generate [xct : Printable] -> [rct : None]
d238 1
a238 1
	const junk <- e.generate[xct]
@


1.6
log
@Made them not manifest again (inheriting from otree broke it)
@
text
@a14 1
      monitor
a36 1
      end monitor
a41 1
  monitor
a205 1
  end monitor
@


1.5
log
@Get rid of objectflags, use otree
@
text
@d206 3
@


1.4
log
@type -> typeobject sed
@
text
@d43 1
a43 1
const vectorlit <- class Vectorlit (Tree) [xxtype : Tree, xxexp : Tree, xxvectorType : Tree]
a44 1
    field f : ObjectFlags <- ObjectFlags.create
@


1.3
log
@Implemented executenow
@
text
@a0 17
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import ObjectFlags from "Jekyll"
import Environment from "Jekyll"
import Invoc from "Jekyll"
import Seq from "Jekyll"
import Opname from "Jekyll"
import Builtinlit from "Jekyll"
import CPQueue, CPAble from "Jekyll"
import nextOID from "Jekyll"
import Opdef from "Jekyll"
import Opsig from "Jekyll"
import Block from "Jekyll"
import Assignstat from "Jekyll"
import IDS from "Jekyll"
import Oblit from "Jekyll"
import Sym from "Jekyll"
d2 1
a2 1
export Vectorlit to "Jekyll"
d5 1
a5 1
  const ctat <- type ctat
d76 1
a76 1
      const hasStr <- type t function getStr -> [String] end t
d176 1
a176 1
	  const hasVariableSize <-  type t 
d188 1
a188 1
	  const hasInstCT <- type t function getInstCT -> [Tree] end t
d196 1
a196 1
      const hasInstAT <- type t function getInstAT -> [Tree] end t
d214 1
a214 1
    const instanceOB <- view self$instanceType as type t
d217 1
a217 1
    const bc <- view xct as type BCType
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d190 1
a190 1
	  if kind == 6 or kind == 4 then id <- nextOID.nextOID end if
@


1.1
log
@Initial revision
@
text
@d230 1
a230 1
  export operation generate [xct : Printable]
d257 1
a257 1
	e.generate[xct]
@
