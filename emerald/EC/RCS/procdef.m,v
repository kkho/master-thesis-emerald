head	1.15;
access;
symbols
	105alpha:1.14
	104alpha:1.14
	103alpha:1.14
	102alpha:1.14
	101alpha:1.14
	100alpha:1.14
	DIKU_0:1.12
	carlton_start:1.10
	immel_start:1.5;
locks; strict;


1.15
date	2007.06.11.01.38.17;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	95.06.22.04.45.16;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	94.08.17.16.51.29;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	93.06.05.07.45.34;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.10.17.07.30;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.04.22.22.56.14;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.56.13;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.56.12;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.56.10;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.56.09;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.15
log
@Check in current version
@
text
@export Processdef


const processdef <- class Processdef (Tree) [xxbody : Tree]
  field body : Tree <- xxbody
  var isSynchronizingProcess : Boolean <- false

  export function upperbound -> [r : Integer]
    r <- 0
  end upperbound
  export function getElement [i : Integer] -> [r : Tree]
    if i = 0 then
      r <- body
    end if
  end getElement
  export operation setElement [i : Integer, r : Tree]
    if i = 0 then
      body <- r
    end if
  end setElement
  export operation copy [i : Integer] -> [r : Tree]
    var nbody : Tree
    if body !== nil then nbody <- body.copy[i] end if
    r <- processdef.create[ln, nbody]
  end copy

  export operation removeSugar [ob : Tree] -> [r : Tree]
    const realob <- view ob as Monitorable
    r <- FTree.removeSugar[self, ob]
    if realob$isSynchronized then
      isSynchronizingProcess <- true
    end if
  end removeSugar

  export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
    pst$inInitially <- false
    FTree.resolveSymbols[pst, self, 0]
    pst$inInitially <- true
  end resolveSymbols

  export operation generate[xct : Printable]
    const ct <- view xct as CTCode
    const ove <- opvectore.create["process"]
    const mybc <- bytecode.create[ct$literals]
    const ov <- ct$opVec
    const templ <- Template.create
    const bb <- view self$body as Block

    const returnlabel : Integer <- mybc.declareLabel
    ove$templ <- templ
    mybc.nest[returnlabel]

    ov[1] <- ove
    % Generate the template
    bb$st.writeTemplate[templ, 'L']

    mybc.setLocalSize[bb$st$localSize]

    self$body.generate[mybc]

    mybc.lineNumber[self$ln]
    mybc.defineLabel[returnlabel]
    if isSynchronizingProcess then
      mybc.addCode["SYNCHDIE"]
    end if
    mybc.addCode["QUITP"]
    ove$code <- mybc.getString
    ove$others <- mybc$others
    begin
      const lninfo <- mybc.getLNInfo
      if lninfo !== nil then
	templ.addLineNumbers[lninfo]
      end if
    end
  end generate

  export function asString -> [r : String]
    r <- "processdef"
  end asString
end Processdef
@


1.14
log
@Implement unavailable handers
@
text
@d5 2
a6 1
    field body : Tree <- xxbody
d8 26
a33 18
    export function upperbound -> [r : Integer]
      r <- 0
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- body
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	body <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nbody : Tree
      if body !== nil then nbody <- body.copy[i] end if
      r <- processdef.create[ln, nbody]
    end copy
d63 3
@


1.13
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d46 1
a46 1
    (view body as hasST)$st.writeTemplate[templ, 'L']
d48 1
a48 12
    begin
      const localSize : Integer <- bb$st$localSize
      if localSize > 0 then
	if localSize < 255 * 4 then
	  mybc.addCode["LINKB"]
	  mybc.addValue[localSize / 4, 1]
	else
	  mybc.addCode["LINK"]
	  mybc.addValue[localSize, 2]
	end if
      end if
    end
@


1.12
log
@Checkpoint of DIKU August 94 changes
@
text
@d40 1
a40 1
    const returnlabel <- mybc.declareLabel
d49 1
a49 1
      const localSize <- bb$st$localSize
@


1.11
log
@First attempt at abcons
@
text
@d46 1
a46 4
    begin
      const body <- view self$body as hasST
      body$st.writeTemplate[templ, 'L']
    end 
@


1.10
log
@Convert to the new subscript syntax a[b]
@
text
@a46 1
      const hasst <- typeobject hasst function getST -> [SymbolTable] end hasST
@


1.9
log
@Byte load/stores, literals on CT basis
@
text
@d44 1
a44 1
    ov(1) <- ove
@


1.8
log
@Use nameof rather than asString
@
text
@d33 1
a33 3
    const ct <- view xct as typeobject X
      function  getOpVec -> [OpVector]
    end X
d35 1
a35 1
    const mybc <- bytecode.create
d55 7
a61 2
	mybc.addCode["LINK"]
	mybc.addValue[localSize, 2]
@


1.7
log
@Get rid of return on generate
@
text
@d64 1
d72 1
a72 1
	templ.addLineNumbers[mybc.getLNInfo]
@


1.6
log
@Removed all monitors
@
text
@d32 1
a32 2
  export operation generate[xct : Printable] -> [rct : None]
    var junk : Any
d62 1
a62 1
    junk <- self$body.generate[mybc]
@


1.5
log
@Use QUITP for processes
@
text
@a4 1
  monitor
a24 1
  end monitor
@


1.4
log
@type -> typeobject sed
@
text
@d68 1
a68 2
    mybc.addCode["QUIT"]
    mybc.addValue[ove$nargs, 1]
@


1.3
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 7
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import OpVector from "Jekyll"
import OpVectorE from "Jekyll"
import ByteCode from "Jekyll"
import Block from "Jekyll"
export Processdef to "Jekyll"
d36 1
a36 1
    const ct <- view xct as type X
d52 1
a52 1
      const hasst <- type hasst function getST -> [SymbolTable] end hasST
@


1.2
log
@Detect imported symbols referenced outside of the initially
@
text
@d40 2
a41 1
  export operation generate[xct : Printable]
d71 1
a71 1
    self$body.generate[mybc]
@


1.1
log
@Initial revision
@
text
@d34 6
@
