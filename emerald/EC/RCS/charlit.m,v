head	1.9;
access;
symbols
	105alpha:1.9
	104alpha:1.9
	103alpha:1.9
	102alpha:1.9
	101alpha:1.9
	100alpha:1.9
	DIKU_0:1.9
	carlton_start:1.7
	immel_start:1.4;
locks; strict;


1.9
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	93.06.05.07.45.34;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.05.23.16.25.59;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.51.17;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.51.15;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.51.13;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.9
log
@First attempt at abcons
@
text
@export Charlit

const charlit <- class Charlit (Tree) [xxstr : String]
  const field str : String <- xxstr
  const myindex <- 0x04

  export operation copy [i : Integer] -> [r : Tree]
    r <- self
  end copy
  export function asString -> [r : String]
    r <- "charlit (" || str || ")"
  end asString

  export operation generate[xct : Printable]
    const bc <- view xct as ByteCode
    bc.addCode["LDIB"]
    bc.addValue[str[0].ord, 1]
    if bc$size != 4 then
      bc.fetchVariableSecondThing[0x1800 + myindex, 0x1600 + myindex]
    end if
  end generate

  export operation getIsNotManifest -> [r : Boolean]
    r <- false
  end getIsNotManifest

  export operation execute -> [r : Tree]
    r <- self
  end execute
  export operation getAT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstAT
  end getAT
  export operation getCT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstCT
  end getCT
end Charlit
@


1.8
log
@Preparatory work for Ab/Cons
@
text
@d15 1
a15 6
    const bc <- view xct as typeobject BCType
      operation addCode[String]
      operation addValue[Integer, Integer]
      function  getSize -> [Integer]
      operation fetchVariableSecondThing[Integer, Integer]
    end BCType
@


1.7
log
@Convert to the new subscript syntax a[b]
@
text
@d19 1
a19 1
      operation fetchLiteral [Integer]
d24 1
a24 1
      bc.fetchLiteral[0x1800 + myindex]
@


1.6
log
@Byte load/stores, literals on CT basis
@
text
@d22 1
a22 1
    bc.addValue[str(0).ord, 1]
@


1.5
log
@Get rid of return on generate
@
text
@d21 2
a22 2
    bc.addCode["LDIS"]
    bc.addValue[str(0).ord, 2]
@


1.4
log
@Clean up literals
@
text
@d14 1
a14 1
  export operation generate[xct : Printable] -> [rct : None]
@


1.3
log
@type -> typeobject sed
@
text
@d4 2
a5 2
  monitor
    const field str : String <- xxstr
d7 6
a12 13
    export function upperbound -> [r : Integer]
      r <- ~1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
    end getElement
    export operation setElement [i : Integer, r : Tree]
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      r <- self
    end copy
    export function asString -> [r : String]
      r <- "charlit (" || str || ")"
    end asString
a13 1
  end monitor
d22 1
a22 1
    bc.addValue[self$str(0).ord, 2]
d24 1
a24 1
      bc.fetchLiteral[0x1804]
d36 1
a36 1
    r <- builtinlit.create[self$ln, 0x04].getInstAT
d39 1
a39 1
    r <- builtinlit.create[self$ln, 0x04].getInstCT
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 4
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import BuiltinLit from "Jekyll"
export Charlit to "Jekyll"
d23 1
a23 1
    const bc <- view xct as type BCType
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
  export operation generate[xct : Printable]
@
