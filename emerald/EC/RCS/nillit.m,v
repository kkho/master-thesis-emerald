head	1.6;
access;
symbols
	105alpha:1.6
	104alpha:1.6
	103alpha:1.6
	102alpha:1.6
	101alpha:1.6
	100alpha:1.6
	DIKU_0:1.6
	carlton_start:1.5
	immel_start:1.4;
locks; strict;


1.6
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.05.23.16.26.03;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.54.49;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.54.48;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.54.47;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.6
log
@First attempt at abcons
@
text
@export Nillit

const nillit <- class Nillit (Tree)
  const myindex <- 0x07
  export operation copy [i : Integer] -> [r : Tree]
    r <- self
  end copy

  export operation generate[xct : Printable]
    const bc <- view xct as ByteCode
    if bc$size == 4 then
      bc.addCode["PUSHNIL"]
    else
      bc.addCode["PUSHNILV"]
    end if
  end generate

  export operation getIsNotManifest -> [r : Boolean]
    r <- false
  end getIsNotManifest

  export function asString -> [r : String]
    r <- "nillit"
  end asString
  export operation execute -> [r : Tree]
    r <- self
  end execute
  export operation getAT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstAT
  end getAT
  export operation getCT -> [r : Tree]
    r <- builtinlit.create[self$ln, myindex].getInstCT
  end getCT
end Nillit
@


1.5
log
@Get rid of return on generate
@
text
@d10 1
a10 4
    const bc <- view xct as typeobject BCType
      operation addCode[String]
      function  getSize -> [Integer]
    end BCType
@


1.4
log
@Clean up literals
@
text
@d9 1
a9 1
  export operation generate[xct : Printable] -> [rct : None]
@


1.3
log
@type -> typeobject sed
@
text
@d4 4
a7 12
  monitor
    export function upperbound -> [r : Integer]
      r <- ~1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
    end getElement
    export operation setElement [i : Integer, r : Tree]
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      r <- self
    end copy
  end monitor
a11 1
      operation addValue[Integer, Integer]
d32 1
a32 1
    r <- builtinlit.create[self$ln, 0x07].getInstAT
d35 1
a35 1
    r <- builtinlit.create[self$ln, 0x07].getInstCT
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 4
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
import Builtinlit from "Jekyll"
export Nillit to "Jekyll"
d18 1
a18 1
    const bc <- view xct as type BCType
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
  export operation generate[xct : Printable]
@
