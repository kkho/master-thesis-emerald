head	1.7;
access;
symbols
	105alpha:1.7
	104alpha:1.7
	103alpha:1.7
	102alpha:1.7
	101alpha:1.7
	100alpha:1.7
	DIKU_0:1.7
	carlton_start:1.7
	immel_start:1.3;
locks; strict;


1.7
date	93.07.17.06.40.18;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.17.07.41;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.06.01.18.04.42;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.57.56;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.57.55;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.7
log
@Generate code for the results of manifest invocs when recompiling
@
text
@const SIIIATable <- class SIIIATable [size : Integer]
    const voi <- Vector.of[Integer]
    const vos <- Vector.of[String]
    const voa <- Vector.of[Any]
    var currentsize : Integer <- size
    var valuea : voi <- voi.create[currentsize]
    var valueb : voi <- voi.create[currentsize]
    var valuec : voi <- voi.create[currentsize]
    var valued : voa <- voa.create[currentsize]
    var values : vos <- vos.create[currentsize]
    var keys   : vos <- vos.create[currentsize]
    var count  : Integer <- 0
    var limit  : Integer <- (currentsize * 4) / 5

    operation iInsert [s : String, a:Integer,b:Integer,c:Integer,fn : String, d:Any]
      const first <- s.hash # currentsize
      var h : Integer <- first
      loop
	const k <- keys[h]
	if k == nil then
	  keys[h] <- s
	  valuea[h] <- a valueb[h] <- b valuec[h] <- c valued[h] <- d values[h] <- fn
	  return
	elseif s = k then
	  valuea[h] <- a valueb[h] <- b valuec[h] <- c valued[h] <- d values[h] <- fn
	  count <- count - 1
	  return
	end if
	h <- h + 1
	if h >= currentsize then h <- 0 end if
	exit when h = first
      end loop
    end iInsert

    operation enlarge
      const oldvaluea <- valuea
      const oldvalueb <- valueb
      const oldvaluec <- valuec
      const oldvalued <- valued
      const oldvalues <- values
      const oldkeys   <- keys
      const oldsize   <- currentsize

      currentsize <- currentsize * 2
      limit <- (currentsize * 4) / 5
      valuea <- voi.create[currentsize]
      valueb <- voi.create[currentsize]
      valuec <- voi.create[currentsize]
      valued <- voa.create[currentsize]
      values <- vos.create[currentsize]
      keys   <- vos.create[currentsize]
      for i : Integer <- 0 while i < currentsize by i <- i + 1
	const k <- keys[i]
	if k !== nil then
	  self.iInsert[k, valuea[i],valueb[i],valuec[i],values[i],valued[i]]
	end if
      end for
    end enlarge

    export operation Lookup [s : String] -> [a:Integer,b:Integer,c:Integer,fn : String, d:Any]
      var h : Integer <- s.hash # currentsize
      loop
	const k <- keys[h]
	if k == nil then
	  return
	elseif k = s then
	  a <- valuea[h] b <- valueb[h] c <- valuec[h] d <- valued[h] fn <- values[h]
	  return
	end if
	h <- h + 1
	if h >= currentsize then h <- 0 end if
      end loop
    end Lookup
    export operation Insert [s : String, a:Integer,b:Integer,c:Integer, fn : String, d:Any]
      count <- count + 1
      if count > limit then self.enlarge end if
      self.iInsert[s, a, b, c, fn, d]
    end Insert
    export operation reset
      for i : Integer <- 0 while i < currentsize by i <- i + 1
	keys[i] <- nil
      end for
      count <- 0
    end reset
    export operation resetForSourceFile[fn : String]
      for i : Integer <- 0 while i < currentsize by i <- i + 1
	if keys[i] !== nil and values[i] = fn then
	  valued[i] <- nil
	end if
      end for
    end resetForSourceFile
end SIIIATable

export SIIIATable
@


1.6
log
@Convert to the new subscript syntax a[b]
@
text
@d10 1
d15 1
a15 1
    operation iInsert [s : String, a:Integer,b:Integer,c:Integer,d:Any]
d22 1
a22 1
	  valuea[h] <- a valueb[h] <- b valuec[h] <- c valued[h] <- d
d25 1
a25 1
	  valuea[h] <- a valueb[h] <- b valuec[h] <- c valued[h] <- d
d40 1
d50 1
d55 1
a55 1
	  self.iInsert[k, valuea[i],valueb[i],valuec[i],valued[i]]
d60 1
a60 1
    export operation Lookup [s : String] -> [a:Integer,b:Integer,c:Integer,d:Any]
d67 1
a67 1
	  a <- valuea[h] b <- valueb[h] c <- valuec[h] d <- valued[h]
d74 1
a74 1
    export operation Insert [s : String, a:Integer,b:Integer,c:Integer, d:Any]
d77 1
a77 1
      self.iInsert[s, a, b, c, d]
d85 7
@


1.5
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d18 1
a18 1
	const k <- keys(h)
d20 2
a21 2
	  keys(h) <- s
	  valuea(h) <- a valueb(h) <- b valuec(h) <- c valued(h) <- d
d24 1
a24 1
	  valuea(h) <- a valueb(h) <- b valuec(h) <- c valued(h) <- d
d50 1
a50 1
	const k <- keys(i)
d52 1
a52 1
	  self.iInsert[k, valuea(i),valueb(i),valuec(i),valued(i)]
d60 1
a60 1
	const k <- keys(h)
d64 1
a64 1
	  a <- valuea(h) b <- valueb(h) c <- valuec(h) d <- valued(h)
d78 1
a78 1
	keys(i) <- nil
@


1.4
log
@Removed all monitors
@
text
@d52 1
a52 1
	  iInsert[k, valuea(i),valueb(i),valuec(i),valued(i)]
@


1.3
log
@Optimized to use string.hash, repaired enlarging the table
@
text
@a1 1
  monitor
d14 1
a14 1
    private operation iInsert [s : String, a:Integer,b:Integer,c:Integer,d:Any]
d34 1
a34 1
    private operation enlarge
a81 1
  end monitor
@


1.2
log
@type -> typeobject sed
@
text
@a14 9
    private function hash [s : String] -> [r : Integer]
      const limit <- s.length
      r <- limit * 1001
      for i : Integer <- 0 while i < limit by i <- i + 1
	r <- r * 127 + s(i).ord
      end for
      if r < 0 then r <- ~r end if
      r <- r # currentsize
    end hash
d16 1
a16 1
      const first <- hash[s]
d59 1
a59 1
      var h : Integer <- hash[s]
@


1.1
log
@Initial revision
@
text
@d95 1
a95 1
export SIIIATable to "Jekyll"
@
