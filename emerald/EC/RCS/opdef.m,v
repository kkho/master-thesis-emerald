head	1.22;
access;
symbols
	105alpha:1.21
	104alpha:1.21
	103alpha:1.21
	102alpha:1.21
	101alpha:1.21
	100alpha:1.21
	DIKU_0:1.18
	carlton_start:1.14
	immel_start:1.7;
locks; strict;


1.22
date	2007.06.11.01.37.31;	author norm;	state Exp;
branches;
next	1.21;

1.21
date	95.06.22.04.45.16;	author norm;	state Exp;
branches;
next	1.20;

1.20
date	95.01.17.22.06.28;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.08.22.23.43.52;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	94.08.17.16.51.26;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	94.06.10.05.21.58;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.07.17.06.36.42;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.06.05.07.45.34;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.03.11.00.13.54;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	92.12.11.01.08.40;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	92.12.10.21.16.03;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.06.03.09.36.48;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	91.04.22.22.55.26;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	91.04.22.22.55.25;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.55.23;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.55.21;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.55.19;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.55.18;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.22
log
@Check in current version
@
text
@export Opdef

const opdef <- class Opdef (Tree) [xxsig : Tree, xxbody : Tree]
  const xisInlineable <- 0
  const xisExported <- 1
  const xisMonitored <- 2
  const xisPrivate <- 3
  const xisSynchronized <- 4
  const xopNumber <- 16
  const xOpNumberLength <- 16
  
    field sig : OpSig <- view xxsig as OpSig
    field body : Tree <- xxbody
    var   st   : SymbolTable
    var f : Integer <- 0

    export function getST -> [r : SymbolTable]
      r <- st
    end getST
    export operation setST [v : SymbolTable]
      st <- v
      sig$st <- v
    end setST

    export operation setisInlineable [a : Boolean]
      f <- f.setBit[xisInlineable, a]
    end setisInlineable
    export function getisInlineable -> [r : Boolean]
      r <- f.getBit[xisInlineable]
    end getisInlineable
  
    export operation setisExported [a : Boolean]
      f <- f.setBit[xisExported, a]
    end setisExported
    export function getisExported -> [r : Boolean]
      r <- f.getBit[xisExported]
    end getisExported
  
    export operation setisMonitored [a : Boolean]
      f <- f.setBit[xisMonitored, a]
    end setisMonitored
    export function getisMonitored -> [r : Boolean]
      r <- f.getBit[xisMonitored]
    end getisMonitored
  
    export operation setisSynchronized [a : Boolean]
      f <- f.setBit[xisSynchronized, a]
    end setisSynchronized
    export function getisSynchronized -> [r : Boolean]
      r <- f.getBit[xisSynchronized]
    end getisSynchronized
  
    export operation setisPrivate [a : Boolean]
      f <- f.setBit[xisPrivate, a]
    end setisPrivate
    export function getisPrivate -> [r : Boolean]
      r <- f.getBit[xisPrivate]
    end getisPrivate
  
    export operation setopNumber [a : Integer]
      f <- f.setBits[xopNumber, xOpNumberLength, a]
    end setopNumber
    export function getopNumber -> [r : Integer]
      r <- f.getBits[xopNumber, xOpNumberLength]
    end getopNumber
  
    export function upperbound -> [r : Integer]
      r <- 1
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- sig
      elseif i = 1 then
	r <- body
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	sig <- view r as OpSig
      elseif i = 1 then
	body <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : OpDef]
      var nsig, nbody : Tree
      if sig !== nil then nsig <- sig.copy[i] end if
      if body !== nil then nbody <- body.copy[i] end if
      r <- opdef.create[ln, nsig, nbody]
      r$isExported <- self$isExported
      r$isPrivate <- self$isPrivate
      r$isMonitored <- self$isMonitored
      r$isSynchronized <- self$isSynchronized
    end copy

  export operation removeSugar [ob : Tree] -> [r : Tree]
    const realob <- view ob as Monitorable
    if realob$isMonitored then
      self$isMonitored <- true
    end if
    if realob$isSynchronized then
      self$isSynchronized <- true
    end if
    r <- FTree.removeSugar[self, ob]
  end removeSugar

  export operation findStatement -> [isPrim : Boolean, ans : Tree]
    const xbody <- body
    const xstats : Tree <- (view xbody as Block)$stats
    if xstats !== nil and xstats.upperbound = 0 then
      const stat : Tree <- xstats[0]
      const statname <- nameof stat
      
      if statname = "aprimstat" then
	isPrim <- true
	ans <- stat 
      elseif statname = "anassignstat" then
	const a <- view stat as AssignStat
	var rhs : Tree
	var name : String
	if a$left .upperbound != 0 then return end if
	if a$right.upperbound != 0 then return end if
	rhs <- a$right[0]
	name <- nameof rhs
	if name = "asym" then
	  const sy : Symbol <- (view rhs as Sym)$mysym
	  if !sy$isNotManifest or sy$isInstVariable then
	    isPrim <- false
	    ans <- stat
	  end if
	elseif name = "aliteral" and (view rhs as Literal)$index = IntegerIndex then
	  isPrim <- false
	  ans <- stat
	end if
      end if
    end if
  end findStatement

  export operation defineSymbols[pst : SymbolTable]
    self$st <- SymbolTable.create[pst, COpDef]
    self$st$myTree <- self
    sig.defineSymbols[self$st]
    FTree.defineSymbols[self$st, body]
  end defineSymbols

  export operation resolveSymbols [pst : SymbolTable, nexp : Integer]
    self$st$inInitially <- false
    sig.resolveSymbols[self$st, 0]
    FTree.resolveSymbols[self$st, body, 0]
    self$st$inInitially <- true
  end resolveSymbols

  export operation findThingsToGenerate [q : Any]
    FTree.findThingsToGenerate[q, self]
  end findThingsToGenerate

  export operation assignTypes 
    FTree.assignTypes[self]

    % See if it makes sense to inline me
    var stat : Tree
    var isPrim : Boolean
    const env : EnvironmentType <- Environment$env
    const til <- env$traceinline

    if til then
      env.printf["Checking to see if  %s on %d is inlineable\n",
	{sig$name.asString, ln}]
    end if
    if sig$results == nil or sig$results.upperbound = 0 then
      isprim, stat <- self.findStatement
      if stat == nil then
	if til then env.printf["  Nope, no acceptable statement\n", nil] end if
      else
	self$isInlineable <- true
	if til then env.printf["  Yup, and isprim = %s\n", {isprim.asString}] end if
      end if
    else
      % Nope, must have either 0 or 1 result to be inlined
      if til then env.printf["  Nope, not 0 or 1 result\n", nil] end if
    end if
  end assignTypes

  export operation generate [ct : Printable]
    const ove : OpVectorE <- opvectore.create[nil]
    const ctasct <- view ct as CTCode
    const mybc : ByteCode <- bytecode.create[ctasct$literals]
    const ov : OpVector <- ctasct$opVec
    const templ : Template <- Template.create
    const returnlabel : Integer <- mybc.declareLabel

    % Look for signals at the end
    if Environment$env$generateconcurrent and self$isMonitored and self$isExported and body !== nil then
      const statseq <- body[0]
      if statseq.upperbound >= 0 then
	const last <- statseq[statseq.upperbound]
	const name <- last.asString
	if name = "signalstat" then
	  const SignalStat <- typeobject t 
	    operation setUseSignalAndExit[Integer]
	  end t
	  const s <- view last as SignalStat
	  s$useSignalAndExit <- ove$nargs
	end if
      end if
    end if

    ove$templ <- templ

    mybc.nest[returnlabel]

    ov.addUpper[ove]
    self$sig.generate[ove]
    % Generate the template
    self$st.writeTemplate[templ, 'L']

    % Generate the prolog (allocate space for locals)
    mybc.setLocalSize[st$localSize]

    % if we're using abcons, we have to generate the code that checks them

    if Environment$env$useAbCons then
      const params : Tree <- sig$params
      if params !== nil then params.generate[mybc] end if
    end if

    if Environment$env$generateconcurrent and self$isMonitored and self$isExported then
      mybc.addCode["MONENTER"]
    end if
    if Environment$env$generateconcurrent and self$isExported and self$isSynchronized then
      mybc.addCode["SYNCHENTER"]
    end if
    

    % All this does is generate the storing of concrete type information in
    % the result variables. This is only necessary if the body is a simple
    % primitive.  More precisely, if the only assignment to the result
    % variables in the body is via a primitive.
    self$body.generate[mybc]
    if mybc$usedPrimitive then
      const results : Tree <- sig$results
      if results !== nil then results.generate[mybc] end if
    end if

    mybc.lineNumber[self$ln]
    mybc.defineLabel[returnlabel]

    if Environment$env$generateconcurrent and self$isMonitored and self$isExported then
      mybc.addCode["MONEXIT"]
    end if
    if Environment$env$generateconcurrent and self$isExported and self$isSynchronized then
      mybc.addCode["SYNCHEXIT"]
    end if

    % Generate the epilog (return and pop args)
    mybc.addCode["RET"]
    mybc.addValue[ove$nargs, 1]

    ove$code <- mybc.getString
    ove$others <- mybc$others
    begin
      const lninfo <- mybc.getLNInfo
      if lninfo !== nil then
	templ.addLineNumbers[lninfo]
      end if
    end
  end generate

  export function same [o : Tree] -> [r : Boolean]
    r <- false
    if nameof o = "anopdef" then
      r <- self$sig.same[(view o as OpDef)$sig]
    end if
  end same
  export function asString -> [r : String]
    r <- "opdef"
  end asString
end Opdef
@


1.21
log
@Implement unavailable handers
@
text
@d8 1
d46 7
d92 1
d100 3
d229 3
d250 3
@


1.20
log
@Avoid poking around in empty statement lists
@
text
@d205 1
a205 12
    begin
      const localSize : Integer <- self$st$localSize
      if localSize > 0 then
	if localSize < 255 * 4 then
	  mybc.addCode["LINKB"]
	  mybc.addValue[localSize / 4, 1]
	else
	  mybc.addCode["LINK"]
	  mybc.addValue[localSize, 2]
	end if
      end if
    end
@


1.19
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d182 10
a191 8
      const last <- statseq[statseq.upperbound]
      const name <- last.asString
      if name = "signalstat" then
	const SignalStat <- typeobject t 
	  operation setUseSignalAndExit[Integer]
	end t
	const s <- view last as SignalStat
	s$useSignalAndExit <- ove$nargs
@


1.18
log
@August 94 Checkpoint II
@
text
@d96 1
a96 1
    const xstats <- (view xbody as Block)$stats
d98 1
a98 1
      const stat <- xstats[0]
d113 1
a113 1
	  const sy <- (view rhs as Sym)$mysym
d150 1
a150 1
    const env <- Environment$env
d172 1
a172 1
    const ove <- opvectore.create[nil]
d174 4
a177 4
    const mybc <- bytecode.create[ctasct$literals]
    const ov <- ctasct$opVec
    const templ <- Template.create
    const returnlabel <- mybc.declareLabel
d204 1
a204 1
      const localSize <- self$st$localSize
d219 1
a219 1
      const params <- sig$params
d234 1
a234 1
      const results <- sig$results
@


1.17
log
@Checkpoint of DIKU August 94 changes
@
text
@a132 4
  export operation findThingsToGenerate [q : Any]
    FTree.findThingsToGenerate[q, self]
  end findThingsToGenerate

@


1.16
log
@Reinstalled support for monitored objects and conditions
@
text
@d4 8
a11 6
    field isInlineable : Boolean <- false
    field isExported : Boolean <- false
    field isMonitored : Boolean <- false
    field isPrivate : Boolean <- false
    field opNumber : Integer
    field sig : Tree <- xxsig
d13 46
a58 1
    field st   : SymbolTable
d71 1
a71 1
	sig <- r
d81 3
a83 3
      r$isExported <- isExported
      r$isPrivate <- isPrivate
      r$isMonitored <- isMonitored
d89 1
a89 1
      isMonitored <- true
d94 32
d128 1
d134 1
a134 3
%    if (view self$sig as OpSig)$xwhere == nil then
      FTree.findThingsToGenerate[q, self]
%    end if
d136 1
d144 31
d184 1
a184 1
    if Environment$env$generateconcurrent and isMonitored and isExported and body !== nil then
d221 1
a221 1
    % sig[1] is the parameter list
d223 1
a223 1
      const params <- self$sig[1]
d227 1
a227 1
    if Environment$env$generateconcurrent and isMonitored and isExported then
d238 1
a238 1
      const results <- self$sig[2]
d245 1
a245 1
    if Environment$env$generateconcurrent and isMonitored and isExported then
@


1.15
log
@First attempt at abcons
@
text
@d6 1
a6 1
    field isUniversal : Boolean <- false
d36 1
d39 8
d73 14
d117 5
d135 4
@


1.14
log
@The body of an opdef should be in the same scope as the arguments
@
text
@d87 7
d99 4
a102 1
    if mybc$usedPrimitive then self$sig.generate[mybc] end if
@


1.13
log
@Byte load/stores, literals on CT basis
@
text
@d40 2
a41 1
    FTree.defineSymbols[self$st, self]
d51 2
a52 1
    FTree.resolveSymbols[self$st, self, 0]
@


1.12
log
@Redefine STContext and STKind, eliminate Symref and Symdef
@
text
@d56 2
a57 4
    const mybc <- bytecode.create
    const ctasct <- view ct as typeobject X
      function  getOpVec -> [OpVector]
    end X
d75 7
a81 2
	mybc.addCode["LINK"]
	mybc.addValue[localSize, 2]
@


1.11
log
@Use nameof rather than asString
@
text
@d39 1
a39 1
    self$st <- SymbolTable.create[pst, STContext.COpDef]
d82 4
a85 1
    self$sig.generate[mybc]
d87 1
@


1.10
log
@Get rid of return on generate
@
text
@d85 1
d97 1
a97 1
	templ.addLineNumbers[mybc.getLNInfo]
d104 1
a104 1
    if o.asString = "opdef" then
@


1.9
log
@Removed all monitors
@
text
@d54 1
a54 2
  export operation generate [ct : Printable] -> [rct : None]
    var junk : Any
d69 1
a69 1
    junk <- self$sig.generate[ove]
d82 2
a83 2
    junk <- self$sig.generate[mybc]
    junk <- self$body.generate[mybc]
@


1.8
log
@Got rid of monitors and fix
@
text
@a3 1
  monitor
a36 1
  end monitor
@


1.7
log
@Move the definition of the return label to before the monitor exit
@
text
@a7 1
    field isMonitored : Boolean <- false
a36 1
      r$isMonitored <- isMonitored
a84 4
    if Environment$env$generateconcurrent and self$isMonitored and !self$isPrivate then
      mybc.addCode["MONENTER"]
    end if
    
a88 4

    if Environment$env$generateconcurrent and self$isMonitored and !self$isPrivate then
      mybc.addCode["MONEXIT"]
    end if
@


1.6
log
@type -> typeobject sed
@
text
@d94 2
a100 1
    mybc.defineLabel[returnlabel]
@


1.5
log
@First attempt to deal with code generation with type variables
@
text
@d1 1
a1 8
import OpVector from "Jekyll"
import OpVectorE from "Jekyll"
import Template from "Jekyll"
import ByteCode from "Jekyll"
import Tree, FTree, Printable from "Jekyll"
import SymbolTable, STContext from "Jekyll"
import OpSig from "Jekyll"
export Opdef to "Jekyll"
d62 1
a62 1
    const ctasct <- view ct as type X
@


1.4
log
@Implemented (a first cut at) concurrency
@
text
@d55 1
a55 1
    if (view self$sig as OpSig)$xwhere == nil then
d57 1
a57 1
    end if
@


1.3
log
@Make generate return something (currently nothing interesting)
@
text
@d45 1
d94 4
d100 4
@


1.2
log
@Detect imported symbols referenced outside of the initially
@
text
@d64 2
a65 1
  export operation generate [ct : Printable]
d80 1
a80 1
    self$sig.generate[ove]
d93 2
a94 2
    self$sig.generate[mybc]
    self$body.generate[mybc]
@


1.1
log
@Initial revision
@
text
@d59 1
d61 1
@
