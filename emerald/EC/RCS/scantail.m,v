head	1.16;
access;
symbols
	105alpha:1.15
	104alpha:1.15
	103alpha:1.15
	102alpha:1.15
	101alpha:1.15
	100alpha:1.15
	DIKU_0:1.13
	carlton_start:1.11
	immel_start:1.3;
locks; strict;


1.16
date	2007.06.11.01.38.54;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	98.02.23.16.21.33;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	94.08.17.16.51.32;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	94.06.08.15.24.42;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	93.03.11.20.38.50;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	93.03.02.21.16.38;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	93.02.17.17.19.15;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.11.01.08.40;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.12.10.21.16.03;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.08.27.21.14.47;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.06.01.18.07.27;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.57.27;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.57.26;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.16
log
@Check in current version
@
text
@  const firstKeyword <- OAND
  const lastKeyword  <- KWHERE

  const token <- integer

  const scannerType <- typeobject scannerType
    operation lex -> [Integer, yystype]
    function lineNumber -> [Integer]
    function line -> [String]
    function position -> [Integer]
    operation reset [InputThing]
  end scannerType

  export function getSignature -> [r : Signature]
    r <- scannerType
  end getSignature

  export operation create [xstdin : InputThing, it : IdentTable] -> [r : scannerType]
    r <- object aScanner
	var stdin : InputThing <- xstdin
	var nextLineNumber :    integer <- 0
	var needIncLineNumber : Boolean <- true
	var nextChar : Character <- ' '
	const lineBuffer : InputBuffer <- InputBuffer.create
	const nextTokenBuffer : InputBuffer <- InputBuffer.create
	var nextPosition, currentPosition : Integer
	const EOF <- Character.literal[0]
	var nextToken : Token
	var nextTokenValue : yystype
% ifdef DEBUGSCAN
%	const here <- locate aScanner
%	const out <- here.getStdOut
%
	const CILLEGAL <- 0
	const CLETTER <- 1
	const CCOLON <- 2
	const CLPAREN <- 3
	const CRPAREN <- 4
	const CDIGIT <- 5
	const CDOT <- 6
	const CSTRINGQUOTE <- 7
	const CCHARQUOTE <- 8
	const CCOMMA <- 9
	const CCOMMENT <- 10
	const COPERATOR <- 11
	const CLSQUARE <- 12
	const CRSQUARE <- 13
	const CLCURLY <- 14
	const CRCURLY <- 15
	const CDOLLAR <- 16
	const CEOF <- 17
	const CWHITE <- 18
	const CNL <- 19

	const charClass <- {
CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,
CILLEGAL,CWHITE,CNL,CILLEGAL,CWHITE,CWHITE,CILLEGAL,CILLEGAL,
CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,
CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,CILLEGAL,
CWHITE,COPERATOR,CSTRINGQUOTE,COPERATOR,CDOLLAR,CCOMMENT,COPERATOR,CCHARQUOTE,
CLPAREN,CRPAREN,COPERATOR,COPERATOR,CCOMMA,COPERATOR,CDOT,COPERATOR,
CDIGIT,CDIGIT,CDIGIT,CDIGIT,CDIGIT,CDIGIT,CDIGIT,CDIGIT,
CDIGIT,CDIGIT,CCOLON,CILLEGAL,COPERATOR,COPERATOR,COPERATOR,COPERATOR,
COPERATOR,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLSQUARE,CILLEGAL,CRSQUARE,COPERATOR,CLETTER,
CILLEGAL,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLCURLY,COPERATOR,CRCURLY,COPERATOR,CILLEGAL,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,
CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER,CLETTER
}

	operation readLine
	  nextPosition <- ~1
	  lineBuffer.readString[stdin, EOF]
	end readLine
  
	operation getNextChar
	  var c : Character
	  if needIncLineNumber then
	    nextLineNumber <- nextLineNumber + 1
	    self.readline[]
	  end if
	  nextPosition <- nextPosition + 1
	  c <- lineBuffer[nextPosition]
	  needIncLineNumber <- c == '\n' or c == EOF
	  nextChar <- c
	end getNextChar
      
	operation doAChar -> [r : Character]
	  var num : integer <- 0
	  if nextChar = '\\' then
	    self.getNextChar[]
	    if nextChar = '^' then
	      self.getNextChar[]
	      num <- nextChar.ord # 32
	      self.getNextChar[]
	    elseif '0' <= nextChar and nextChar <= '7' then
	      % a C octal escape
	      num <- nextChar.ord - '0'.ord
	      self.getNextChar[]
	      if '0' <= nextChar and nextChar <= '7' then
		num <- num * 8 + nextChar.ord - '0'.ord
		self.getNextChar[]
		if '0' <= nextChar and nextChar <= '7' then
		  num <- num * 8 + nextChar.ord - '0'.ord
		  self.getNextChar[]
		end if
	      end if
	    else
	      if nextChar == 'n' then
		num <- '\n'.ord
	      elseif nextChar == 'b' then
		num <- '\b'.ord
	      elseif nextChar == 't' then
		num <- '\t'.ord
	      elseif nextChar == 'r' then
		num <- '\r'.ord
	      elseif nextChar == 'f' then
		num <- '\f'.ord
	      else
		num <- nextChar.ord
	      end if
	      self.getNextChar[]
	    end if
	  else
	    num <- nextChar.ord
	    self.getNextChar[]
	  end if
	  r <- Character.literal[num]
	end doAChar

	operation doaccept
	  nextTokenBuffer.reset
	  nextTokenValue <- nil
	  self.scan[]
	end doaccept

	operation scan
	  var cc : Integer
	  loop
	    if nextChar = EOF then
	      nextToken <- 0
	      currentPosition <- 0	      
	      return
	    end if
	    currentPosition <- nextPosition
	    cc <- charClass[nextChar.ord]
      
	    if cc = CILLEGAL then
  %	    IllegalCharacter[nextChar]
	      self.getNextChar[]
	    elseif cc = CLETTER then
	      var id : Ident
	      loop
%ifdef CASESENSITIVITY
%		nextTokenBuffer.collect[nextChar]
%else
		if 'A' <= nextChar and nextChar <= 'Z' then
		  nextTokenBuffer.collect[
		    Character.literal[nextChar.ord - 'A'.ord + 'a'.ord]]
		else
		  nextTokenBuffer.collect[nextChar]
		end if
%endif CASESENSITIVITY
		self.getNextChar[]
		cc <- charClass[nextChar.ord]
		exit when cc != CLETTER and cc != CDIGIT
	      end loop
	      id <- it.Lookup[nextTokenBuffer.asString, 999]
	      if id$value <= lastKeyword then
		nextToken <- id$value
	      else
		nextToken <- TIDENTIFIER
		nextTokenValue <- sym.create[nextLineNumber, id]
	      end if
	      exit
	    elseif cc = COPERATOR then
	      var id : Ident
	      loop
		nextTokenBuffer.collect[nextChar]
		self.getNextChar[]
		cc <- charClass[nextChar.ord]
		exit when cc != COPERATOR
	      end loop
	      id <- it.Lookup[nextTokenBuffer.asString, 999]
	      if id$value <= lastKeyword then
		nextToken <- id$value
	      else
		nextToken <- TOPERATOR
	      end if
	      nextTokenValue <- Sym.create[nextLineNumber, id]
	      exit
	    elseif cc = CWHITE then
	      self.getNextChar[]
	    elseif cc = CCOLON then
	      self.getNextChar[]
	      nextToken <- TCOLON
	      exit
	    elseif cc = CLPAREN then
	      self.getNextChar[]
	      nextToken <- TLPAREN
	      exit
	    elseif cc = CRPAREN then
	      self.getNextChar[]
	      nextToken <- TRPAREN
	      exit
	    elseif cc = CDIGIT then
	      loop
		nextTokenBuffer.collect[nextChar]
		self.getNextChar[]
		cc <- charClass[nextChar.ord]
		exit when cc != CDIGIT and !(nextChar = 'x' or nextChar >= 'a' and nextChar <= 'f' or nextChar >= 'A' and nextChar <= 'F')
	      end loop
	      if nextChar == '.' then
		loop
		  nextTokenBuffer.collect[nextChar]
		  self.getNextChar[]
		  cc <- charClass[nextChar.ord]
		  exit when cc != CDIGIT
		end loop
		nextToken <- TREALLITERAL
		nextTokenvalue <- Literal.RealL[nextLineNumber, nextTokenBuffer.asString]
	      else
		nextToken <- TINTEGERLITERAL
		nextTokenvalue <- Literal.IntegerL[nextLineNumber, nextTokenBuffer.asString]
	      end if
	      exit
	    elseif cc = CDOT then
	      self.getNextChar[]
	      if nextChar == '*' then
		self.getNextChar[]
		nextToken <- TDOTSTAR
	      elseif nextChar == '?' then
		self.getNextChar[]
		nextToken <- TDOTQUESTION
	      else
		nextToken <- TDOT
	      end if
	      exit
	    elseif cc = CCOMMA then
	      self.getNextChar[]
	      nextToken <- TCOMMA
	      exit
	    elseif cc = CLSQUARE then
	      self.getNextChar[]
	      nextToken <- TLSQUARE
	      exit
	    elseif cc = CRSQUARE then
	      self.getNextChar[]
	      nextToken <- TRSQUARE
	      exit
	    elseif cc = CLCURLY then
	      self.getNextChar[]
	      nextToken <- TLCURLY
	      exit
	    elseif cc = CRCURLY then
	      self.getNextChar[]
	      nextToken <- TRCURLY
	      exit
	    elseif cc = CDOLLAR then
	      self.getNextChar[]
	      nextToken <- TDOLLAR
	      exit
	    elseif cc = CCOMMENT then
	      loop
		self.getNextChar[]
		exit when nextChar == '\n' or nextChar == EOF
	      end loop
	    elseif cc = CSTRINGQUOTE then
	      var c : Character
	      self.getNextChar[]
	      loop
		if nextChar == EOF then
  % 		UnexpectedEndOfFile
		  exit
		elseif nextChar == '"' then
		  self.getNextChar[]
		  exit
		end if
		c <- self.doAChar[]
		nextTokenBuffer.collect[c]
	      end loop
	      nextToken <- TSTRINGLITERAL
	      nextTokenValue <- Literal.StringL[nextLineNumber, nextTokenBuffer.asString]
	      exit
	    elseif cc = CCHARQUOTE then
	      var c : Character
	      self.getNextChar[]
	      if nextChar == EOF then
  % 	      UnexpectedEndOfFile
		nextTokenBuffer.collect['a']
	      else
		c <- self.doAChar[]
		nextTokenBuffer.collect[c]
		if nextChar != '\'' then
  %		UnexpectedEndOfCharLiteral
		end if
		self.getNextChar[]
	      end if
	      nextToken <- TCHARACTERLITERAL
	      nextTokenValue <- Literal.CharacterL[nextLineNumber, nextTokenBuffer.asString]
	      exit
	    elseif cc = CEOF then
	      nextToken <- TEOF
	      exit 
	    elseif cc = CNL then
	      self.getNextChar[]
	    end if
	  end loop
	  nextToken <- nextToken + 257
	end scan

	export operation lex -> [thissym : token, yylval : yystype]
	  var d : Integer
	  self.doaccept[]
	  yylval <- nextTokenValue
	  thissym <- nextToken
% #ifdef DEBUGSCAN
% 	  d <- thissym - 257
% 	  out.putstring["Lex returning "]
% 	  out.putint[d, 0]
% 	  out.putstring[" ("]
% 	  if d < tokenNameTable.lowerbound | d > tokenNameTable.upperbound then
% 	    out.putstring["no name"]
% 	  else
% 	    out.putstring[tokenNameTable[d]]
% 	  end if
% 	  out.putstring[") - "]
% 	  if yylval == nil then
% 	    out.putstring["nil"]
% 	  else
% 	    out.putstring[yylval.asString]
% 	  end if
% 	  out.putchar['\n']
% #endif
	end lex

	export function lineNumber -> [r : Integer]
	  r <- nextLineNumber
	end lineNumber
	
	export function line -> [r : String]
	  r <- lineBuffer.asString
	end line
	
	export function position -> [r : Integer]
	  r <- currentPosition
	end position
	
	export operation reset [f : InputThing]
	  stdin <- f
	  nextLineNumber <- 0
	  needIncLineNumber <- true
	  nextChar <- ' '
	  nextTokenBuffer.reset
	  lineBuffer.reset
	end reset

	initially
	  var id : Ident
	  for i : integer <- firstKeyword while i <= lastKeyword by i <- i + 1
	    id <- it.Lookup[tokenNameTable[i], i]
	  end for
	end initially

    end aScanner
  end create
end scanner

@


1.15
log
@'./EC'
@
text
@d150 1
a150 1
	operation accept
d154 1
a154 1
	end accept
d333 1
a333 1
	  self.accept[]
@


1.14
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d71 17
a87 1
CLETTER,CLETTER,CLETTER,CLCURLY,COPERATOR,CRCURLY,COPERATOR,CILLEGAL
@


1.13
log
@Checkpoint of DIKU August 94 changes
@
text
@d224 1
a224 1
		nextTokenvalue <- Literal.RealL[nextTokenBuffer.asString]
d227 1
a227 1
		nextTokenvalue <- Literal.IntegerL[nextTokenBuffer.asString]
d286 1
a286 1
	      nextTokenValue <- Literal.StringL[nextTokenBuffer.asString]
d303 1
a303 1
	      nextTokenValue <- Literal.CharacterL[nextTokenBuffer.asString]
@


1.12
log
@First attempt at abcons
@
text
@d11 1
a74 2
	  var c : Character
	  lineBuffer.reset
d76 1
a76 9
	  loop
	    if stdin.eos then
	      lineBuffer.collect[EOF]
	      exit
	    end if
	    c <- stdin.getchar
	    lineBuffer.collect[c]
	    exit when c = '\n'
	  end loop
d193 1
a193 1
	      nextTokenValue <- opname.create[nextLineNumber, id]
d224 1
a224 1
		nextTokenvalue <- reallit.create[nextLineNumber, nextTokenBuffer.asString]
d227 1
a227 1
		nextTokenvalue <- intlit.create[nextLineNumber, nextTokenBuffer.asString]
d286 1
a286 1
	      nextTokenValue <- stringlit.create[nextLineNumber, nextTokenBuffer.asString]
d303 1
a303 1
	      nextTokenValue <- charlit.create[nextLineNumber, nextTokenBuffer.asString]
@


1.11
log
@Convert to the new subscript syntax a[b]
@
text
@d4 1
a4 1
  const token == integer
d6 1
a6 1
  const scannerType == typeobject scannerType
@


1.10
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d95 1
a95 1
	  c <- lineBuffer(nextPosition)
d102 1
a102 1
	  if (nextChar == '\\') then
d104 1
a104 1
	    if (nextChar == '^') then
d108 1
a108 1
	    elseif ('0' <= nextChar and nextChar <= '7') then
d112 1
a112 1
	      if ('0' <= nextChar and nextChar <= '7') then
d115 1
a115 1
		if ('0' <= nextChar and nextChar <= '7') then
d158 1
a158 1
	    cc <- charClass(nextChar.ord)
d177 1
a177 1
		cc <- charClass(nextChar.ord)
d193 1
a193 1
		cc <- charClass(nextChar.ord)
d222 1
a222 1
		cc <- charClass(nextChar.ord)
d229 1
a229 1
		  cc <- charClass(nextChar.ord)
d337 1
a337 1
% 	    out.putstring[tokenNameTable(d)]
d373 1
a373 1
	    id <- it.Lookup[tokenNameTable(i), i]
@


1.9
log
@Start implementing .? invocations
@
text
@d92 1
a92 1
	    readline[]
d103 1
a103 1
	    getNextChar[]
d105 1
a105 1
	      getNextChar[]
d107 1
a107 1
	      getNextChar[]
d111 1
a111 1
	      getNextChar[]
d114 1
a114 1
		getNextChar[]
d117 1
a117 1
		  getNextChar[]
d134 1
a134 1
	      getNextChar[]
d138 1
a138 1
	    getNextChar[]
d146 1
a146 1
	  scan[]
d162 1
a162 1
	      getNextChar[]
d176 1
a176 1
		getNextChar[]
d192 1
a192 1
		getNextChar[]
d205 1
a205 1
	      getNextChar[]
d207 1
a207 1
	      getNextChar[]
d211 1
a211 1
	      getNextChar[]
d215 1
a215 1
	      getNextChar[]
d221 1
a221 1
		getNextChar[]
d228 1
a228 1
		  getNextChar[]
d240 1
a240 1
	      getNextChar[]
d242 1
a242 1
		getNextChar[]
d245 1
a245 1
		getNextChar[]
d252 1
a252 1
	      getNextChar[]
d256 1
a256 1
	      getNextChar[]
d260 1
a260 1
	      getNextChar[]
d264 1
a264 1
	      getNextChar[]
d268 1
a268 1
	      getNextChar[]
d272 1
a272 1
	      getNextChar[]
d277 1
a277 1
		getNextChar[]
d282 1
a282 1
	      getNextChar[]
d288 1
a288 1
		  getNextChar[]
d291 1
a291 1
		c <- doAChar[]
d299 1
a299 1
	      getNextChar[]
d304 1
a304 1
		c <- doAChar[]
d309 1
a309 1
		getNextChar[]
d318 1
a318 1
	      getNextChar[]
d326 1
a326 1
	  accept[]
@


1.8
log
@Implement eval
@
text
@d244 3
@


1.7
log
@Start to implement .* invocs
@
text
@d17 1
a17 1
  export operation create [xstdin : InStream, it : IdentTable] -> [r : scannerType]
d19 1
a19 1
	var stdin : InStream <- xstdin
d358 1
a358 1
	export operation reset [f : InStream]
@


1.6
log
@Removed all monitors
@
text
@d241 6
a246 1
	      nextToken <- TDOT
@


1.5
log
@Got rid of monitors and fix
@
text
@a18 1
      monitor 
d73 1
a73 1
	private operation readLine
d88 1
a88 1
	private operation getNextChar
d100 1
a100 1
	private operation doAChar -> [r : Character]
d143 1
a143 1
	private operation accept
d149 1
a149 1
	private operation scan
a367 1
      end monitor
@


1.4
log
@Fix a crash on missing final newline
@
text
@d209 1
a209 6
	      if nextChar = '=' then
		getNextChar[]
		nextToken <- TSUGARASSIGN
	      else
		nextToken <- TCOLON
	      end if
@


1.3
log
@Allow the reuse of a scanner
@
text
@d27 1
a27 1
	const EOF <- Character.literal[255]
@


1.2
log
@type -> typeobject sed
@
text
@d17 1
a17 1
  export operation create [stdin : InStream, it : IdentTable] -> [r : scannerType]
d20 1
d30 4
a33 3
	const here <- locate aScanner
	const out <- here.getStdOut
  
d359 9
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
  const scannerType == type scannerType
@
