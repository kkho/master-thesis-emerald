head	1.30;
access;
symbols
	105alpha:1.30
	104alpha:1.30
	103alpha:1.30
	102alpha:1.30
	101alpha:1.30
	100alpha:1.30
	DIKU_0:1.22
	carlton_start:1.16
	immel_start:1.5;
locks; strict;


1.30
date	98.02.09.18.16.08;	author norm;	state Exp;
branches;
next	1.29;

1.29
date	95.06.22.04.45.16;	author norm;	state Exp;
branches;
next	1.28;

1.28
date	95.03.29.18.19.54;	author norm;	state Exp;
branches;
next	1.27;

1.27
date	95.03.03.05.44.23;	author norm;	state Exp;
branches;
next	1.26;

1.26
date	94.12.19.07.19.47;	author norm;	state Exp;
branches;
next	1.25;

1.25
date	94.12.06.20.12.48;	author norm;	state Exp;
branches;
next	1.24;

1.24
date	94.10.14.15.33.20;	author norm;	state Exp;
branches;
next	1.23;

1.23
date	94.09.16.21.03.55;	author norm;	state Exp;
branches;
next	1.22;

1.22
date	94.08.22.23.43.42;	author norm;	state Exp;
branches;
next	1.21;

1.21
date	94.08.17.16.50.34;	author norm;	state Exp;
branches;
next	1.20;

1.20
date	94.06.16.05.13.30;	author norm;	state Exp;
branches;
next	1.19;

1.19
date	94.03.02.19.00.09;	author norm;	state Exp;
branches;
next	1.18;

1.18
date	94.02.01.16.46.15;	author norm;	state Exp;
branches;
next	1.17;

1.17
date	93.12.20.21.09.00;	author norm;	state Exp;
branches;
next	1.16;

1.16
date	93.06.25.15.50.57;	author norm;	state Exp;
branches;
next	1.15;

1.15
date	93.06.16.05.20.24;	author norm;	state Exp;
branches;
next	1.14;

1.14
date	93.06.15.15.29.04;	author norm;	state Exp;
branches;
next	1.13;

1.13
date	93.06.11.03.18.47;	author norm;	state Exp;
branches;
next	1.12;

1.12
date	93.06.05.07.45.34;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	93.06.02.22.50.35;	author mueller;	state Exp;
branches;
next	1.10;

1.10
date	93.03.11.00.14.51;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	93.03.04.07.22.12;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	93.02.16.01.01.53;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	92.12.23.15.30.15;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	92.12.10.17.06.51;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	92.04.07.18.09.23;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	91.04.22.22.51.09;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.51.07;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.51.05;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.51.04;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.30
log
@Cleaned up
@
text
@
const ByteCodeReader <- immutable object ByteCodeReader
  const codes : SITable <- SITable.create[512]
  const initialized <- object init
      field initialized : Boolean <- false
  end init

  export operation Lookup [s : String] -> [r : Character]
    const v : Integer <- codes.Lookup[s]
    if v == nil then
      r <- Character.Literal[255]
    else 
      r <- Character.Literal[v]
    end if
  end Lookup

  operation tryopen [fn : String] -> [infile : InStream]
    infile <- InStream.fromUnix[fn, "r"]
    failure infile <- nil end failure
  end tryopen

  operation tryread [infile : InStream] -> [s : String]
    s <- infile.getString
    failure s <- nil end failure
  end tryread

  export operation read
    const names <- { "lib/bcdef", "lib/jsdef", "lib/ccdef" }
    var s, def, name, value : String
    var infile : InStream
    var root : String
    if initialized$initialized then return end if
    initialized$initialized <- true
    primitive "GETROOTDIR" [root] <- []
    for n : Integer <- 0 while n <= names.upperbound by n <- n + 1
      const inputfilename : String <- root||"/"||names[n]
      infile <- self.tryopen[inputfilename]
      if infile == nil then
	const env : EnvironmentType <- Environment$env
	env.SemanticError[1, "Can't open required file \"%s\"",{inputfilename}]
      else
	loop
	  s <- self.tryread[infile]
	  exit when s == nil
	  const separators <- " \n\r\t"
	  def, s <- s.token[separators]
	  if def !== nil and def = "#define" then
	    name, s <- s.token[separators]
	    value, s <- s.token[separators]
	    codes.Insert[name, Integer.literal[value]]
	  end if
	end loop
	infile.close
      end if
    end for
  end read
end ByteCodeReader

const Patch <- record Patch
  var loc  : Integer
  var size : Integer
end Patch

const aop <- Array.of[Patch]

const LabelRec <- class LabelRec
    field value : Integer <- ~1
    field refs : aop
end LabelRec

const HandlerRecord <- class HandlerRecord[xcode : Tree, xstart: Integer]
  field code : Tree <- xcode
  field startAddress : Integer <- xstart
  field endAddress   : Integer
  field codeAddress  : Integer
  field name : Integer <- 0
  field varOffset : Integer <- -1
end HandlerRecord

const aoh <- Array.of[HandlerRecord]
const aolr <- Array.of[LabelRec]

const ByteCode <- class ByteCode [pliterals : aoip]
    field slength : Integer <- 0
    var   ssize   : Integer <- 512
    field s : VectorOfChar <- VectorOfChar.create[ssize]
    const labels <- aolr.create[~16]
    const bc <- BitChunk.create[4]
    const nesting : aoi <- aoi.create[~4]
    field others : aoa
    field usedPrimitive : Boolean <- false
    const field literals : aoip <- pliterals
    const field sizes : aoi <- aoi.create[~8]
    const field expectedATs : aoi <- aoi.create[~8]
    field lnlength : Integer <- 0
    var   lnsize   : Integer <- 64
    var   lnInfo : VectorOfChar <- VectorOfChar.create[lnsize]
    var   lastLineNumber : Integer <- ~1
    var   lastLineNumberAt : Integer <- ~1
    var   handlers : aoh
    var   padChar : Character <- ':'
    const env : EnvironmentType <- Environment$env
    const tracecode : Boolean <- env$tracecode
    const padByteCodes : Boolean <- env$padByteCodes
    const useAbCons : Boolean <- env$useAbCons
    var localSize : Integer <- 0

    export operation setLocalSize [n : Integer]
      localSize <- n
      if n > 0 then
        if n < 255 * 4 then
	  self.addCode["LINKB"]
	  self.addValue[n / 4, 1]
	else
	  self.addCode["LINK"]
	  self.addValue[n, 2]
	end if
      end if
    end setLocalSize

    operation padTo[size : Integer]
      if padByteCodes then
	var padding : Integer
	padding <- size - (slength # size)
	if padding != size and padding != 0 then
	  if slength + padding > ssize then self.grow end if
	  loop
	    s[slength] <- padChar
	    slength <- slength + 1
	    padding <- padding - 1
	    exit when padding = 0
	  end loop
	end if
      end if
    end padTo
	
    operation grow
      const nsize <- ssize * 2
      const ns <- VectorOfChar.create[nsize]
      var i : Integer <- 0
      loop
	ns[i] <- s[i]
	i <- i + 1
	exit when i >= slength
      end loop
      s <- ns
      ssize <- nsize
    end grow

    operation growln
      const nsize <- lnsize * 2
      const nln <- VectorOfChar.create[nsize]
      var i : Integer <- 0
      loop
	nln[i] <- lninfo[i]
	i <- i + 1
	exit when i >= lnlength
      end loop
      lninfo <- nln
      lnsize <- nsize
    end growln

    export operation getLnInfo -> [r : String]
      if lnlength > 0 then
	r <- String.FLiteral[lnInfo, 0, lnlength]
      end if
    end getLnInfo

    operation WriteLn [n : Integer]
      const rem <- n # 10
      const div <- n / 10
      if div > 0 then self.writeLN[div] end if
      if lnlength >= lnsize then self.growln end if
      lnInfo[lnlength] <- Character.Literal[rem + '0'.ord]
      lnlength <- lnlength + 1
    end WriteLn

    operation WriteLnChar [c : Character]
      var i : Integer <- 0
      if lnlength >= lnsize then self.growln end if
      lnInfo[lnlength] <- c
      lnlength <- lnlength + 1
    end WriteLnChar

    % We call this just before generating code for line number ln.  If we
    % have generated code for the previous line (difference > 0) we output
    % ;difference.  If ln > lastLineNumber + 1 then we output +(ln -
    % lastLineNumber).

    export operation LineNumber [ln : Integer]
      if !env$generateDebugInfo then return end if
      if lastLineNumber = ~1 then
	self.writeLNChar['#']
	self.writeLN[ln]
	lastLineNumber <- ln
	lastLineNumberAt <- 0
      elseif ln != lastLineNumber then
	const difference <- slength - lastLineNumberAt
	if difference > 0 then
	  self.WriteLnChar[';']
	  self.writeLN[difference]
	  lastLineNumber <- lastLineNumber + 1
	end if
	if lastLineNumber < ln then
	  self.WriteLnChar['+']
	  self.WriteLn[ln - lastLineNumber]
	  lastLineNumber <- ln
	elseif lastLineNumber > ln then
	  self.WriteLnChar['#']
	  self.WriteLn[ln]
	  lastLineNumber <- ln
	end if
	lastLineNumberAt <- slength
       end if
    end LineNumber

    export function asString -> [r : String]
      r <- "bytecode"
    end asString

    % The next three operations help maintain a stack telling us what
    % size object we want to generate.  An object consists of both
    % some data storing the values of variables referred to by
    % that object and a concrete type object containing the code for
    % the object.  The elements on this stack should be 4's and 8's.
    % If the top element of the stack (accesible through the getSize
    % function below) is 4, then only the data should be generated;
    % otherwise they both should, with the ctype ending up on top of
    % the stack.  

    % After generating what needs to be generated, all code should call
    % bc.finishExpr which will fix up the reference as necessary.

    export operation pushSize [size : Integer]
      sizes.addUpper[size]
    end pushSize

    export operation popSize
      const x : Any <- sizes.removeUpper
    end popSize

    export operation pushExpectedAT [ExpectedAT : Integer]
      expectedATs.addUpper[ExpectedAT]
    end pushExpectedAT

    export operation popExpectedAT
      const x : Any <- expectedATs.removeUpper
    end popExpectedAT

    % Clean up any mismatch between the size and type expected by the
    % environment and what was generated by the produced code.  If the size
    % generated was 4 and the size expected was 8, then push the second
    % thing.  If the size generated was 8 and the size expected was 4 then
    % POOP the second thing.  If the size generated was 8 and the size
    % expected was 8 but the expectedAT doesn't match the generated one,
    % then fix the abcon.
    export operation finishExpr[generatedSize : Integer,
      cty : Integer, aty : Integer]
      const neededSize <- sizes[sizes.upperbound]
      if neededSize = 8 and generatedSize = 4 then
	self.fetchVariableSecondThing[cty, aty]
      elseif neededSize = 4 and generatedSize = 8 then
	self.addCode["POOP"]
      end if
    end finishExpr
      
    export function getSize -> [size : Integer]
      size <- sizes[sizes.upperbound]
    end getSize

    export operation nest [a : Integer]
      nesting.addUpper[a]
    end nest
    
    export operation addOther [a : Any]
      if others == nil then others <- aoa.create[~4] end if
      others.addUpper[a]
    end addOther
    
    export function fetchNest -> [a : Integer]
      if nesting.upperbound > 0 then
	a <- nesting[nesting.upperbound]
      end if
    end fetchNest
    
    export operation unNest 
      const x : Any <- nesting.removeUpper
    end unNest

    % For implementing return 

    export operation nestBase -> [a : Integer]
      if nesting.upperbound >= 0 then
	a <- nesting[0]
      end if
    end nestBase

    % Add an operation to the instruction stream.
    export operation addCode [name : String]
      if tracecode then env.printf["  Code: %s\n", {name}] end if
      if slength >= ssize then self.grow end if
      s[slength] <- ByteCodeReader.Lookup[name]
      if s[slength] = Character.Literal[255] then
	env.Warning[lastLineNumber, "Undefined bytecode \"%s\"", {name}]
      end if
      slength <- slength + 1
    end addCode

    export operation addChar [c : Character]
      if slength >= ssize then self.grow end if
      s[slength] <- c
      slength <- slength + 1
    end addChar

    operation writeat[loc : Integer, val : Integer, size : Integer]
      var l : Integer <- loc
      bc.setunsigned[0, 32, val]
      if size >= 4 then
	s[l] <- Character.Literal[bc.getunsigned[0, 8]]
	l <- l + 1
	s[l] <- Character.Literal[bc.getunsigned[8, 8]]
	l <- l + 1
      end if
      if size >= 2 then
	s[l] <- Character.Literal[bc.getunsigned[16, 8]]
	l <- l + 1
      end if
      s[l] <- Character.Literal[bc.getunsigned[24, 8]]
    end writeat

    operation write [val : Integer, size : Integer]
      if slength + size > ssize then self.grow end if
      self.writeat[slength, val, size]
      slength <- slength + size
    end write

    % Add a literal value to the instruction stream.  The first
    % argument is the value, the second is its length in bytes.
    export operation addValue [val : Integer, size : Integer]
      self.padTo[size]
      self.write[val, size]
    end addValue

    export operation alignTo [size : Integer]
      self.padTo[size]
    end alignTo

    export operation declareLabel -> [r : Integer]
      labels.addUpper[LabelRec.create]
      r <- labels.upperbound
    end declareLabel

    export operation addLabelReference [label : Integer, size : Integer]
      var value, here : Integer
      const x <- labels[label]
      self.padTo[size]
      here <- slength
      if x$value < 0 then
	if x$refs == nil then
	  x$refs <- aop.create[~4]
	end if
	x$refs.addUpper[Patch.create[here, size]]
	value <- 0
      else
	value <- x$value - (here + size)
      end if
      self.write[value, size]
    end addLabelReference
    
    export operation defineLabel[w : Integer]
      const x <- labels[w]
      const r <- x$refs
      x$value <- slength
      
      if r !== nil then		% Backpatch
	for i : Integer <- 0 while i <= r.upperbound by i <- i + 1
	  const p <- r[i]
	  const newval <- x$value - p$loc - p$size
	  self.writeat[p$loc, newval, p$size]
	end for
	x$refs <- nil
      end if
    end defineLabel

%    export function fetchIndex -> [r : Integer]
%      r <- cs.fetchIndex
%    end fetchIndex
%    export operation getIndex [start : Integer, q : CPQueue]
%      cs$s <- String.FLiteral[s, 0, slength]
%      cs.getIndex[start, q]
%    end getIndex
%
%    export operation cpoint [file : OutStream]
%      cs.cpoint[file]
%    end cpoint

  % This is used to put builtins on the stack, as well as their subparts
  % (concrete type, etc.)  Look in builtins.info, ids.m, ../Builtins/*,
  % literal.m for more info on what the numbers mean.
  export operation fetchLiteral [oid : Integer]
    var index : Integer 
    const a <- self$literals

    for i : Integer <- 0 while i <= a.upperbound by i <- i + 1
      if a[i].first = oid and a[i].second = 0 then
	index <- i
	exit
      end if
    end for
    if index == nil then
      a.addUpper[IntPair.create[oid, 0]]
      index <- a.upperbound
      assert index < 256
    end if
    self.addCode["LDLITB"]
    self.addValue[index, 1]
  end fetchLiteral

  % This is used to put either concrete types or abcons on the stack as the
  % second part of a variable.
  export operation fetchVariableSecondThing [ctoid : Integer, atoid : Integer]
    var index : Integer 
    const a <- self$literals
    const limit : Integer <- a.upperbound
    if useAbCons then
      for i : Integer <- 0 while i <= limit by i <- i + 1
	if a[i].first = atoid and a[i].second = 1 and i < limit and
	   a[i+1].first = ctoid and a[i+1].second = 1 then
	  index <- i
	  exit
	end if
      end for
      if index == nil then
	a.addUpper[IntPair.create[atoid, 1]]
	index <- a.upperbound
	a.addUpper[IntPair.create[ctoid, 1]]
	assert index < 256
      end if
    else
      for i : Integer <- 0 while i <= limit by i <- i + 1
	if a[i].first = ctoid and a[i].second = 0 then
	  index <- i
	  exit
	end if
      end for
      if index == nil then
	a.addUpper[IntPair.create[ctoid, 0]]
	index <- a.upperbound
	assert index < 256
      end if
    end if
    self.addCode["LDLITB"]
    self.addValue[index, 1]
  end fetchVariableSecondThing
  
  export operation getString -> [r : String]
    padChar <- '\377' self.padTo[4] padChar <- ':'
    % Deal with failure handlers here
    if handlers !== nil then
      for i : Integer <- handlers.upperbound while i >= handlers.lowerbound by i <- i - 1
	const h <- handlers[i]
	self.addValue[h$startAddress, 2]
	self.addValue[h$endAddress, 2]
	self.addValue[h$codeAddress, 2]
	self.addValue[h$varOffset, 2]
	self.addValue[h$name, 4]
      end for
      self.addValue[handlers.upperbound - handlers.lowerbound + 1, 2]
      self.addChar['h']
      self.addChar['c']
    end if
    r <- String.FLiteral[self$s, 0, self$slength]
  end getString

  export operation beginHandlerBlock[t : Tree] -> [h : HandlerRecord]
    h <- HandlerRecord.create[t, slength]
    if handlers == nil then handlers <- aoh.create[~4] end if
    handlers.addUpper[h]
    handlers.addLower[h]
  end beginHandlerBlock
  
  export operation endHandlerBlock
    const h <- handlers.removeUpper
    h$endAddress <- slength
    const l <- self.declareLabel
    self.addCode["BR"]
    self.addLabelReference[l, 2]
    h$codeAddress <- slength
    h$code.generate[self]
    self.defineLabel[l]
  end endHandlerBlock
  
  initially
    ByteCodeReader.read
    sizes.addUpper[8]
  end initially

end ByteCode

export ByteCode, HandlerRecord
@


1.29
log
@Implement unavailable handers
@
text
@d17 10
d37 1
a37 6
      begin
	infile <- InStream.fromUnix[inputfilename, "r"]
	failure
	  infile <- nil
	end failure
      end
d43 1
a43 6
	  begin
	    s <- infile.getString
	    failure
	      s <- nil
	    end failure
	  end
d377 3
a379 5
	  begin
	    const p <- r[i]
	    const newval <- x$value - p$loc - p$size
	    self.writeat[p$loc, newval, p$size]
	  end
@


1.28
log
@Get rid of split, and make execute now and eval work again
@
text
@d76 2
d79 1
d106 14
d459 2
d464 5
a468 5
	h$codeAddress <- slength
	h$code.generate[self]
	self.addCode["BR"]
	self.padTo[2]
	self.addValue[h$endAddress - (slength + 2), 2]
d470 3
d474 1
a474 18
    begin
      padChar <- '\377' self.padTo[4] padChar <- ':'
      % Deal with failure handlers here
      if handlers !== nil then
	for i : Integer <- handlers.upperbound while i >= handlers.lowerbound by i <- i - 1
	  const h <- handlers[i]
	  self.addValue[h$startAddress, 2]
	  self.addValue[h$endAddress, 2]
	  self.addValue[h$codeAddress, 2]
	  self.addChar['h']
	  self.addChar['r']
	end for
	self.addValue[handlers.upperbound - handlers.lowerbound + 1, 2]
	self.addChar['h']
	self.addChar['c']
      end if
      r <- String.FLiteral[self$s, 0, self$slength]
    end
d477 2
a478 2
  export operation beginHandlerBlock[t : Tree]
    const h <- HandlerRecord.create[t, slength]
d487 6
d502 1
a502 1
export ByteCode
@


1.27
log
@Use new streams code
@
text
@a16 32
  operation Split [s : String] -> [x : String, y : String, z : String]
    var first, last : Integer
    var c : Character

    first <- 0
    last <- 0
    for which : Integer <- 0 while which < 3 by which <- which + 1
      loop
	exit when first >= s.length
	c <- s[first]
	exit when c != ' ' and c != '\^I' and c != '\n'
	first <- first + 1
      end loop
      if first >= s.length then return end if
      last <- first + 1
      loop
	exit when last >= s.length
	c <- s[last]
	exit when c = ' ' or c = '\^I' or c = '\n'
	last <- last + 1
      end loop
      if which =0 then
	x <- s[first, last - first]
      elseif which = 1 then
	y <- s[first, last - first]
      else
	z <- s[first, last - first]
      end if
      first <- last + 1
    end for
  end Split

d45 2
a46 1
	  def, name, value <- self.split[s]
d48 2
a467 5
      % TODO: This writes the number of literals, which is not required any 
      % more, but I'll wait to delete it.
      % Wait no more
      % self.addValue[0, 4]

@


1.26
log
@Deal with file open errors more gracefully
@
text
@d59 6
a64 1
      infile <- InStream.fromUnix[inputfilename, "r"]
d70 6
a75 1
	  s <- infile.getString
@


1.25
log
@Clean up generating the second things in references
@
text
@d58 16
a73 10
      infile <- InStream.fromUnix[root||"/"||names[n], "r"]
      loop
	s <- infile.getString
	exit when s == nil
	def, name, value <- self.split[s]
	if def !== nil and def = "#define" then
	  codes.Insert[name, Integer.literal[value]]
	end if
      end loop
      infile.close
@


1.24
log
@Fix a problem with fetching literals when using abcons
@
text
@d104 1
d225 5
a229 10
    % the stack.  The reason that there are lines like
    % 'if bc$size != 4 then bc.fetchLiteral[0x1803] end if'
    % is to add on the concrete type object if necessary.
    %
    % Things have changed.  I am now attempting to implement abcons, and so
    % depending on how options are set we either generate the concrete type
    % or we generate the abcon.
    % The second part of a variable is therefore generated by a call to 
    %   bc.fetchVariableSecondThing[ctoid, atoid]
    % which will either generate the concrete type or the abcon as necessary.
d238 25
@


1.23
log
@Inserted a number of additional type checks, put line numbers in literals
@
text
@d243 1
a243 6
      const u : Integer <- sizes.upperbound
      if u >= 0 then
	size <- sizes[u]
      else
	size <- 8
      end if
a372 3
    initially
      ByteCodeReader.read
    end initially
d382 1
a382 1
      if a[i].first == oid then
d481 5
@


1.22
log
@August 94 Checkpoint II
@
text
@d3 1
a3 1
  const codes <- SITable.create[512]
d9 1
a9 1
    const v <- codes.Lookup[s]
d99 1
a99 1
    const nesting <- aoi.create[~4]
d111 4
a114 4
    const env <- Environment$env
    const tracecode <- env$tracecode
    const padByteCodes <- env$padByteCodes
    const useAbCons <- env$useAbCons
d239 1
a239 1
      const x <- sizes.removeUpper
d243 1
a243 1
      const u <- sizes.upperbound
d267 1
a267 1
      const x <- nesting.removeUpper
d409 1
a409 1
    const limit <- a.upperbound
@


1.21
log
@Checkpoint of DIKU August 94 changes
@
text
@d39 1
a39 1
	x <- s.getSlice[first, last - first]
d41 1
a41 1
	y <- s.getSlice[first, last - first]
d43 1
a43 1
	z <- s.getSlice[first, last - first]
@


1.20
log
@Changed names to 8.3 format
@
text
@d50 1
a50 1
    const names <- { "lib/bcdef", "vm/jsys.h", "lib/ccdef" }
a59 1
	exit when infile.eos
d61 1
a83 3
const aoa <- Array.of[Any]
const aoi <- Array.of[Integer]

d212 2
a213 2
    export function asString -> [s : String]
      s <- "bytecode"
d384 1
a384 1
  % intlit.m, boollit.m, etc. for more info on what the numbers mean.
d470 2
a471 1
      self.addValue[0, 4]
@


1.19
log
@Prepare to generate ab/cons and invokes by index
@
text
@d50 1
a50 1
    const names <- { "lib/bytecodedefs", "vm/jsys.h", "lib/ccalldefs" }
@


1.18
log
@Preparatory work for Ab/Cons
@
text
@d86 1
d96 1
a96 1
const ByteCode <- class ByteCode [pliterals : aoi]
d98 1
a98 1
    var   ssize   : Integer <- 64
d105 1
a105 1
    const field literals : aoi <- pliterals
d117 1
d287 1
a287 1
	Environment$env.Warning[lastLineNumber, "Undefined bytecode \"%s\"", {name}]
d393 1
a393 1
      if a[i] == oid then
d399 1
a399 1
      a.addUpper[oid]
d407 2
a408 1
  % This is used to put concrete types on the stack, or abcons as necessary
d412 14
a425 5

    for i : Integer <- 0 while i <= a.upperbound by i <- i + 1
      if a[i] == ctoid then
	index <- i
	exit
d427 12
a438 5
    end for
    if index == nil then
      a.addUpper[ctoid]
      index <- a.upperbound
      assert index < 256
d443 1
a443 1

@


1.17
log
@Finalized merge with Mark Immels version
@
text
@d228 7
d404 20
@


1.16
log
@Cleaned up the definition of nesting in bytecodes
@
text
@d77 2
d81 1
a81 1
    field refs : Array.of[Patch]
d93 1
d99 1
a99 1
    const labels <- Array.of[LabelRec].create[~16]
d216 12
a227 1
    
d272 1
d311 2
d334 1
a334 1
	  x$refs <- Array.of[Patch].create[~4]
d375 4
@


1.15
log
@Convert to the new subscript syntax a[b]
@
text
@d98 1
a98 1
    const nesting <- aoa.create[~4]
d231 1
a231 1
    export operation nest [a : Any]
d240 1
a240 1
    export function fetchNest -> [a : Any]
d252 1
a252 1
    export operation nestBase -> [a : Any]
d262 1
a262 1
      if s[slength] = 255 then
@


1.14
log
@Eliminate a[b] as shorthand for self.a[b]
@
text
@d26 1
a26 1
	c <- s(first)
d34 1
a34 1
	c <- s(last)
d58 1
a58 1
      infile <- InStream.fromUnix[root||"/"||names(n), "r"]
d121 1
a121 1
	    s(slength) <- padChar
d135 1
a135 1
	ns(i) <- s(i)
d148 1
a148 1
	nln(i) <- lninfo(i)
d167 1
a167 1
      lnInfo(lnlength) <- Character.Literal[rem + '0'.ord]
d174 1
a174 1
      lnInfo(lnlength) <- c
d225 1
a225 1
	size <- sizes(u)
d242 1
a242 1
	a <- nesting(nesting.upperbound)
d254 1
a254 1
	a <- nesting(0)
d261 2
a262 2
      s(slength) <- ByteCodeReader.Lookup[name]
      if s(slength) = 255 then
d270 1
a270 1
      s(slength) <- c
d278 1
a278 1
	s(l) <- Character.Literal[bc.getunsigned[0, 8]]
d280 1
a280 1
	s(l) <- Character.Literal[bc.getunsigned[8, 8]]
d284 1
a284 1
	s(l) <- Character.Literal[bc.getunsigned[16, 8]]
d287 1
a287 1
      s(l) <- Character.Literal[bc.getunsigned[24, 8]]
d312 1
a312 1
      const x <- labels(label)
d328 1
a328 1
      const x <- labels(w)
d335 1
a335 1
	    const p <- r(i)
d363 1
a363 1
      if a(i) == oid then
d380 1
a380 1
	const h <- handlers(i)
d393 1
a393 1
	  const h <- handlers(i)
@


1.13
log
@Report undefined bytecodes
@
text
@d62 1
a62 1
	def, name, value <- split[s]
d292 1
a292 1
      writeat[slength, val, size]
d297 2
a298 2
      padTo[size]
      write[val, size]
d302 1
a302 1
      padTo[size]
d313 1
a313 1
      padTo[size]
d324 1
a324 1
      write[value, size]
d337 1
a337 1
	    writeat[p$loc, newval, p$size]
d384 1
a384 1
	padTo[2]
d389 1
a389 1
      padChar <- '\377' padTo[4] padChar <- ':'
@


1.12
log
@Byte load/stores, literals on CT basis
@
text
@d262 3
@


1.11
log
@bytecodes sourced from lib/bytecodedefs
sourced files can contain comments and blank lines
fromUnix calls changed to new syntax
@
text
@d92 1
a92 1
const ByteCode <- class ByteCode
d101 2
a102 3
    field literals : aoi <- aoi.create[~4]
    field literallabels : aoi <- aoi.create[~4]
    field sizes : aoi <- aoi.create[~8]
d356 1
a356 1
    var label : Integer 
d361 1
a361 1
	label <- self$literallabels(i)
d365 1
a365 1
    if label == nil then
d367 2
a368 2
      label <- self.declareLabel
      self$literallabels.addUpper[label]
d370 2
a371 2
    self.addCode["LDIRS"]
    self.addLabelReference[label, 2]
a385 3
      const literals <- self$literals
      const labels   <- self$literallabels
      const nLiterals<- literals.upperbound + 1
d401 4
a404 8
      % Write the literal frame
      for i : Integer <- 0 while i < nLiterals by i <- i + 1
	self.addChar['*'] self.addChar['*'] self.addChar['*'] self.addChar['*']
	self.addValue[literals(i), 4]
	self.defineLabel[labels(i)]
	self.addValue[0, 4]
      end for
      self.addValue[nLiterals, 4]
@


1.10
log
@Optimize away setting of result CT on some invocs
@
text
@d50 1
a50 1
    const names <- { "Vm/vm.h", "Vm/jsys.h"}
d58 2
a59 2
      infile <- InStream.fromUnix[root||"/"||names(n), 0, 0]
      for i : Integer <- 0 while true by i <- i + 1
d63 4
a66 5
	exit when def == nil
	assert i.asString = value
	assert def = "#define"
	codes.Insert[name, i]
      end for
@


1.9
log
@Allow better line number info
@
text
@d101 1
@


1.8
log
@Implemented failure handling
@
text
@d181 2
a182 1
    % ;difference.  If ln > lastLineNumber + 1 then we output +difference.
d191 1
a191 1
      elseif ln > lastLineNumber then
d202 4
d208 1
a208 5
%     elseif ln < lastLineNumber then
	% TODO:  what do you do?
%     else
        % same line number, ignore it
      end if
@


1.7
log
@Use nameof rather than asString
@
text
@d85 7
d109 2
a110 1

d122 1
a122 1
	    s(slength) <- ':'
d375 9
a383 6
    const literals <- self$literals
    const labels   <- self$literallabels
    const nLiterals<- literals.upperbound + 1
    var x : Integer <- self$slength # 4
    if x != 0 then
      x <- 4 - x
d385 29
a413 13
    loop
      exit when x = 0
      self.addChar['\377']
      x <- x - 1
    end loop
    for i : Integer <- 0 while i < nLiterals by i <- i + 1
      self.addChar['*'] self.addChar['*'] self.addChar['*'] self.addChar['*']
      self.addValue[literals(i), 4]
      self.defineLabel[labels(i)]
      self.addValue[0, 4]
    end for
    self.addValue[nLiterals, 4]
    r <- String.FLiteral[self$s, 0, self$slength]
d416 12
@


1.6
log
@Removed all monitors
@
text
@d171 4
d184 2
a185 4
	self.WriteLnChar[';']
	if difference = 0 then
	  self.writeLNChar['0']
	else
d187 6
a193 6
	loop
	  lastLineNumber <- lastLineNumber + 1
	  exit when lastLineNumber = ln
	  self.WriteLnChar[';']
	  self.WriteLnChar['0']
	end loop
d195 1
a195 1
      elseif ln < lastLineNumber then
d197 1
a197 1
      else
@


1.5
log
@Implement padded bytecodes (operands aligned)
@
text
@d4 1
a4 2
  const initialized <- object initialized
    monitor
d6 1
a6 2
    end monitor
  end initialized
a78 1
  monitor
a80 1
  end monitor
a86 1
  monitor
d107 1
a107 1
    private operation padTo[size : Integer]
d123 1
a123 1
    private operation grow
d136 1
a136 1
    private operation growln
d155 1
a155 1
    private operation WriteLn [n : Integer]
d164 1
a164 1
    private operation WriteLnChar [c : Character]
d261 1
a261 1
    private operation writeat[loc : Integer, val : Integer, size : Integer]
d277 1
a277 1
    private operation write [val : Integer, size : Integer]
a344 1
  end monitor
@


1.4
log
@Made generation of debugging info optional
@
text
@d110 1
d112 16
d289 1
d293 4
d303 1
a303 2
      var value : Integer
      const here <- slength
d305 2
@


1.3
log
@type -> typeobject sed
@
text
@d160 1
@


1.2
log
@Got rid of the absolute paths
@
text
@a0 2
import SITable from "Jekyll"
import Environment from "Jekyll"
d371 1
a371 1
export ByteCode to "Jekyll"
@


1.1
log
@Initial revision
@
text
@d54 1
a54 1
    const names <- { "/usr/norm/jekyll/Vm/vm.h", "/usr/norm/jekyll/Vm/jsys.h"}
d57 1
d60 1
d62 1
a62 1
      infile <- InStream.fromUnix[names(n), 0, 0]
@
