head	1.5;
access;
symbols
	105alpha:1.5
	104alpha:1.5
	103alpha:1.5
	102alpha:1.5
	101alpha:1.5
	100alpha:1.5
	DIKU_0:1.5
	carlton_start:1.5
	immel_start:1.3;
locks; strict;


1.5
date	92.12.12.05.03.16;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.17.07.10;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.22.53.48;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.22.53.47;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.22.53.46;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.5
log
@Get rid of return on generate
@
text
@export Initdef

const initdef <- class Initdef (Tree) [xxbody : Tree]
    field body : Tree <- xxbody

    export function upperbound -> [r : Integer]
      r <- 0
    end upperbound
    export function getElement [i : Integer] -> [r : Tree]
      if i = 0 then
	r <- body
      end if
    end getElement
    export operation setElement [i : Integer, r : Tree]
      if i = 0 then
	body <- r
      end if
    end setElement
    export operation copy [i : Integer] -> [r : Tree]
      var nbody : Tree
      if body !== nil then nbody <- body.copy[i] end if
      r <- initdef.create[ln, nbody]
    end copy

  export operation generateInitially [ct : Printable]
    self.generate[ct]
  end generateInitially

  export function asString -> [r : String]
    r <- "initdef"
  end asString
end Initdef
@


1.4
log
@Removed all monitors
@
text
@d26 1
a26 1
    const junk <- self.generate[ct]
@


1.3
log
@type -> typeobject sed
@
text
@a3 1
  monitor
a23 1
  end monitor
@


1.2
log
@Make generate return something (currently nothing interesting)
@
text
@d1 1
a1 3
import Tree, FTree, Printable from "Jekyll"
import SymbolTable from "Jekyll"
export Initdef to "Jekyll"
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
    self.generate[ct]
@
