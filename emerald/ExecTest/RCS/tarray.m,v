head	1.3;
access;
symbols
	105alpha:1.3
	104alpha:1.3
	103alpha:1.3
	102alpha:1.3
	101alpha:1.3
	100alpha:1.3
	DIKU_0:1.2;
locks; strict;
comment	@# @;


1.3
date	97.01.22.00.05.57;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	93.06.16.05.25.40;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	93.06.01.23.28.18;	author mueller;	state Exp;
branches;
next	;


desc
@Emerald compiler test
@


1.3
log
@Fix to use <- instead of ==, better tests of vectors
@
text
@const tarray <- object tarray
  const myTest <- runtest.create[stdin, stdout, "tarray"]
  initially
    const aoi <- Array.of[Integer]
    var a, b : aoi
    var i : Integer
    a <- aoi.empty
    myTest.check[a.lowerbound = 0, "a.lowerbound = 0"]
    myTest.check[a.upperbound = ~1, "a.upperbound = ~1"]

    a.addUpper[0]
    myTest.check[a.lowerbound = 0, "a.lowerbound = 0"]
    myTest.check[a.upperbound = 0, "a.upperbound = 0"]
    
    i <- 1
    loop
      exit when i >= 10
      a.addUpper[i]
      i <- i + 1
    end loop

    i <- 0
    loop
      exit when i >= 10
      myTest.check[a[i] = i, "a[i] = i"]
      i <- i + 1
    end loop

    b <- a.getSlice[4, 0]
    myTest.check[b.lowerbound = 4, "b.lowerbound = 4"]
    myTest.check[b.upperbound = 3, "b.upperbound = 3"]
    
    b <- a.getSlice[4, 5]
    myTest.check[b.lowerbound = 4, "b.lowerbound = 4"]
    myTest.check[b.upperbound = 8, "b.upperbound = 8"]
    i <- b.lowerbound
    loop
      exit when i > b.upperbound
      myTest.check[b[i] = i, "b[i] = i"]
      i <- i + 1
    end loop
    myTest.done
  end initially
end tarray
@


1.2
log
@Convert to the new subscript syntax a[b]
@
text
@d2 1
a2 1
  const myTest == runtest.create[stdin, stdout, "tarray"]
d4 1
a4 1
    const aoi == Array.of[Integer]
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
      myTest.check[a(i) = i, "a(i) = i"]
d39 1
a39 1
      myTest.check[b(i) = i, "b(i) = i"]
@
