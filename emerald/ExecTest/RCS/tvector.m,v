head	1.5;
access;
symbols
	105alpha:1.5
	104alpha:1.5
	103alpha:1.5
	102alpha:1.5
	101alpha:1.5
	100alpha:1.5
	DIKU_0:1.3;
locks; strict;
comment	@# @;


1.5
date	97.01.22.00.05.57;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	96.03.06.17.42.06;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	94.08.17.17.02.58;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	93.06.16.05.25.40;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	93.06.01.23.28.18;	author mueller;	state Exp;
branches;
next	;


desc
@Emerald compiler test
@


1.5
log
@Fix to use <- instead of ==, better tests of vectors
@
text
@const tvector <- object tvector
  const myTest <- runtest.create[stdin, stdout, "tvector"]
  initially
    const v <- { 4 }
    const w <- { }
    const y <- { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
    const z <- Vector.of[Integer].create[10]

    var i : Integer
    myTest.check[v.lowerbound = 0, "v.lowerbound = 0"]
    myTest.check[v.upperbound = 0, "v.upperbound = 0"]

    myTest.check[w.lowerbound = 0, "w.lowerbound = 0"]
    myTest.check[w.upperbound = ~1, "w.upperbound = ~1"]
    
    myTest.check[y.lowerbound = 0, "y.lowerbound = 0"]
    myTest.check[y.upperbound = 9, "y.upperbound = 9"]

    i <- 0
    loop
      exit when i > y.upperbound
      myTest.check[i = y[i], "y[i] = i (i = " || i.asString || ")"]
      i <- i + 1
    end loop

    i <- 0
    loop
      exit when i > y.upperbound
      z[i] <- y[i] * y[i] + y[i] + y[i]
      myTest.check[z[i] = i*i+i+i, "z[i] = i*i+i+i"]
      z[i] <- i * i + i + i
      myTest.check[z[i] = i*i+i+i, "z[i] = i*i+i+i"]
      i <- i + 1
    end loop

    const newthing <- ImmutableVectorOfInt.literal[z]
    i <- 0
    loop
      exit when i > newthing.upperbound
      myTest.check[newthing[i] = i*i+i+i, "newthing[i] = i*i+i+i"]
      i <- i + 1
    end loop
    
    myTest.done
  end initially
end tvector
@


1.4
log
@Re-enable empty vector tests
@
text
@d2 1
a2 1
  const myTest == runtest.create[stdin, stdout, "tvector"]
d4 4
a7 4
    const v == { 4 }
    const w == { }
    const y == { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
    const z == Vector.of[Integer].create[10]
@


1.3
log
@Checkpoint of DIKU August 94 changes
@
text
@d5 1
a5 1
%    const w == { }
d13 2
a14 2
%    myTest.check[w.lowerbound = 0, "w.lowerbound = 0"]
%    myTest.check[w.upperbound = ~1, "w.upperbound = ~1"]
@


1.2
log
@Convert to the new subscript syntax a[b]
@
text
@d35 8
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
      myTest.check[i = y(i), "y(i) = i (i = " || i.asString || ")"]
d29 4
a32 4
      z(i) <- y(i) * y(i) + y(i) + y(i)
      myTest.check[z(i) = i*i+i+i, "z(i) = i*i+i+i"]
      z(i) <- i * i + i + i
      myTest.check[z(i) = i*i+i+i, "z(i) = i*i+i+i"]
@
