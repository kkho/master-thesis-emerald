head	1.3;
access;
symbols
	105alpha:1.3
	104alpha:1.3
	103alpha:1.3
	102alpha:1.3
	101alpha:1.3
	100alpha:1.3
	DIKU_0:1.2;
locks; strict;
comment	@# @;


1.3
date	97.01.22.00.05.57;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	93.06.16.05.25.40;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	93.06.01.23.28.18;	author mueller;	state Exp;
branches;
next	;


desc
@Emerald compiler test
@


1.3
log
@Fix to use <- instead of ==, better tests of vectors
@
text
@const tv <- object tv
  const myTest <- runtest.create[stdin, stdout, "tv"]
  initially
    const voi <- Vector.of[Integer]
    const voc <- Vector.of[Character]
    const voa <- Vector.of[Any]
    const v <- voi.create[10]
    const vc<- voc.create[4]
    const va<- voa.create[6]
    vc[2] <- 'x'
    v[0] <- 87
    va[5] <- "abc"
    myTest.check[v.lowerbound = 0, "v.lowerbound = 0"]
    myTest.check[v.upperbound = 9, "v.upperbound = 9"]

    myTest.check[v[0] = 87, "v[0] = 87"]
    myTest.check[vc[2] = 'x', "vc[2] = 'x'"]
    myTest.check[(view va[5] as String) = "abc", "va[5] = \"abc\""]
    myTest.done
  end initially
end tv
@


1.2
log
@Convert to the new subscript syntax a[b]
@
text
@d2 1
a2 1
  const myTest == runtest.create[stdin, stdout, "tv"]
@


1.1
log
@Initial revision
@
text
@d10 3
a12 3
    vc(2) <- 'x'
    v(0) <- 87
    va(5) <- "abc"
d16 3
a18 3
    myTest.check[v(0) = 87, "v(0) = 87"]
    myTest.check[vc(2) = 'x', "vc(2) = 'x'"]
    myTest.check[(view va(5) as String) = "abc", "va(5) = \"abc\""]
@
