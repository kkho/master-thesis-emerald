head	1.6;
access;
symbols
	105alpha:1.6
	104alpha:1.6
	103alpha:1.6
	102alpha:1.6
	101alpha:1.6
	100alpha:1.6
	DIKU_0:1.3;
locks; strict;
comment	@# @;


1.6
date	98.02.23.16.20.26;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	96.03.16.06.50.43;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	95.03.15.05.12.40;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	93.06.18.00.33.45;	author mueller;	state Exp;
branches;
next	1.2;

1.2
date	93.06.16.22.36.54;	author mueller;	state Exp;
branches;
next	1.1;

1.1
date	93.06.15.01.50.02;	author mueller;	state Exp;
branches;
next	;


desc
@Build an Emerald component on all supported architectures
@


1.6
log
@'./bin'
@
text
@#!/bin/csh -f
#
# forallarch : do an Emerald specific command once on a particular
#              machine of each supported architecture.  Supported
#              architectures are found in $EMERALDROOT/lib/systems
#              an alternative file can be given after the -f flag
#
# EMERALDROOT is expected to be set on rlogin
# EMERALDARCH will be set on rlogin
#
# currently supported commands:
#  ccalls - build all ccalls libraries, needed to build interpreters
#  emx    - build all Emerald interpreters
#  emxnt  - build, but do not test, all Emerald interpreters
#  emxntp - build, but do not test, all Emerald interpreters in parallel
#  emyacc - build and install emyacc on all systems
#  vmc    - build and install vmc on all systems
#

set sysfile = $EMERALDROOT/lib/systems
if ($#argv >= 2 && .$1 == .-f) then
    set sysfile = $2
    shift
    shift
endif

if ($#argv != 1) then
    echo "Usage: forallarch [-f sysfile] <command>"
    exit 1
endif

set systems = `sed -e "/^#/d" $sysfile`
while ($#systems > 1) 
    set arch = $systems[1]
    shift systems
    set host = $systems[1]
    shift systems
    
    echo "Making $1 for $arch on $host"
    switch ($1)
    case fullemx:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/vm/$arch \;  rm Makefile \; ln -s ../src/Makefile . \; emmake links \; emmake clean \; emmake emx \; \
	  cd $EMERALDROOT/ExecTest \; emmake test 
        breaksw
    case emx:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/vm/$arch \; emmake emx \; \
	  cd $EMERALDROOT/ExecTest \; emmake test 
        breaksw
    case test:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/ExecTest \; emmake test 
        breaksw
    case testp:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/ExecTest \; emmake test &
        breaksw
    case emxnt:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/vm/$arch \; emmake emx \;
        breaksw
    case emxntp:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/vm/$arch \; emmake emx \; &
        breaksw
    case emyacc:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/emyacc \; emmake clean \; emmake install
	breaksw
    case vmc:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/vmc \; emmake clean \; emmake install
	breaksw
    case speed:
        rsh $host -n eval \`setarch -q $arch\` \; \
	  cd $EMERALDROOT/Example \; set time=0 \; emx -v count.x
	breaksw
    default:
	echo "$1 : Unknown forallarch command"
	exit 1
	breaksw
    endsw
end

exit 0

@


1.5
log
@Added the speed alternative
@
text
@d15 1
d41 1
a41 1
    case ccalls:
d43 3
a45 2
	  cd $EMERALDROOT/ccalls \; emmake clean \; emmake install
	breaksw
d48 5
a52 1
	  cd $EMERALDROOT/vm/$arch \;  emmake emx \; \
d55 4
d61 5
a65 1
	  cd $EMERALDROOT/vm/$arch \; emmake emx &
@


1.4
log
@Do some in parallel
@
text
@d61 4
@


1.3
log
@added -f flag to allow specifying alternate systems file
cleaned up commands to properly handling of non-default architectures
@
text
@d47 1
a47 1
	  cd $EMERALDROOT/ExecTests \; emmake test
d51 1
a51 1
	  cd $EMERALDROOT/vm/$arch \; emmake emx
@


1.2
log
@renamed from forallsys
@
text
@d1 1
a1 1
#! /bin/csh -f
d6 1
d19 7
d27 1
a27 1
    echo "Usage: forallarch <command>"
d31 1
a31 1
set systems = `sed -e "/^#/d" $EMERALDROOT/lib/systems`
d38 1
d41 2
a42 2
        echo "Making $1 for $arch on $host"
        rsh $host -n cd $EMERALDROOT/ccalls \; emmake clean \; emmake install
d45 3
a47 2
        echo "Making $1 for $arch on $host"
        rsh $host -n cd $EMERALDROOT/vm/$arch \; eval \`setarch -q $arch\` \; emmake emx \; cd $EMERALDROOT/ExecTests \; emmake test
d50 2
a51 2
        echo "Making $1 for $arch on $host (no tests)"
        rsh $host -n cd $EMERALDROOT/vm/$arch \; eval \`setarch -q $arch\` \; emmake emx
d54 2
a55 2
        echo "Making $1 for $arch on $host"
        rsh $host -n cd $EMERALDROOT/emyacc \; make clean \; make install
d58 2
a59 2
        echo "Making $1 for $arch on $host"
        rsh $host -n cd $EMERALDROOT/vmc \; make clean \; make install
@


1.1
log
@Initial revision
@
text
@d3 3
a5 2
# forallsys : do an Emerald specific command once on each supported system
#             supported systems are found in $EMERALDROOT/lib/systems
d11 1
d19 1
a19 1
    echo "Usage: forallsys <command>"
d52 1
a52 1
	echo "$1 : Unknown forallsys command"
@
