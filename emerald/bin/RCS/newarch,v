head	1.4;
access;
symbols
	105alpha:1.4
	104alpha:1.4
	103alpha:1.4
	102alpha:1.4
	101alpha:1.4
	100alpha:1.4
	DIKU_0:1.2;
locks; strict;
comment	@# @;


1.4
date	98.02.23.16.20.26;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	98.02.09.18.10.29;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	93.08.12.22.14.21;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	93.06.18.01.00.47;	author mueller;	state Exp;
branches;
next	;


desc
@automate creation of directory structure necessary to support
a new architecture
@


1.4
log
@'./bin'
@
text
@#!/bin/csh -fv
#
# newarch
#
# create appropriate directories to support a new architecture for
# Emerald use.  Run this script on a machine of the new architecture.
# A new architecture is called for when a new instance of emx, for
# new hardware, or using a different compiler or options, is needed.
#
# usage: newarch [newarch [parentarch]]
#
# where newarch is the name of the new architecture, and parentarch
# is the name of an existing architecture to use for templates and
# make links to.  If no newarch is specified, the arch command is
# used to determine it.  If no parent arch is specified and the new
# architecture is an obvious derivative from the standard architecure, then
# use the standard architecture as the parent.
#
# ToDo:
# - deal better with existing files/directories
# - add -f switch to force recreation from scratch, deleting existing stuff
# - add -c switch to do compilation, rather than just print out what
#   needs doing
#

unset needvmc
unset needemyacc
unset docompilation

# if an architecture is supplied, use it.  Otherwise, use output of arch
if ($#argv >= 1) then
  set arch = $argv[1]
  shift argv
else
  set arch = `arch`
endif

# if an existing architecture is supplied, use it to inherit from
if ($#argv >= 1) then
  set parent = $argv[1]
  shift argv
else if ($arch != `arch` && $arch =~ `arch`* && -d $EMERALDROOT/lib/`arch`) then
  set parent = `arch`
else
  set parent = no
endif

# Check for -c switch
while ($#argv >= 1)
  switch ($argv[1])
    case "-c":
      set docompilation
      breaksw
    default:
      echo "Unknown flag $argv[1]"
      breaksw
  endsw
  shift argv
end

# setarch checks that architecture exists, mkdir bin/$arch fools it
mkdir $EMERALDROOT/bin/$arch
chmod 775 $EMERALDROOT/bin/$arch
chmod g+s $EMERALDROOT/bin/$arch
eval `$EMERALDROOT/bin/setarch $arch`

# inform about intentions
echo "EMERALDROOT is $EMERALDROOT"
echo "Architecture is $arch"
if ($parent == no) then
  echo "No parent architecture"
else
  echo "Parent architecture is $parent"
endif

# fill newly created bin directory
echo "creating bin/$arch..."
cd $EMERALDROOT/bin/$arch
ln -s ../../vm/$arch/emx .
if ($parent == no) then
  ln -s ../issymlink-ls issymlink
  set needvmc
  set needemyacc
else
  ln -s ../$parent/issymlink .
  ln -s ../$parent/vmc .
  ln -s ../$parent/emyacc .
endif

# make a lib directory and fill it
# copy the macroMf from i386freebsd, changing the name of the architecture
echo "creating lib/$arch..."
mkdir $EMERALDROOT/lib/$arch
chmod 775 $EMERALDROOT/lib/$arch
chmod g+s $EMERALDROOT/lib/$arch
cd $EMERALDROOT/lib/$arch
if ($parent == no) then
  sed -e "s/# i386freebsd specific/# $EMERALDARCH specific/" \
      ../i386freebsd/macroMf >macroMf
else
  cp ../$parent/macroMf .
endif

# make a vm directory and fill it.  Since a new architecture always
# implies a new emx, we don't care if there's a parent architecture
echo "creating vm/$arch..."
mkdir $EMERALDROOT/vm/$arch
chmod 775 $EMERALDROOT/vm/$arch
chmod g+s $EMERALDROOT/vm/$arch
cd $EMERALDROOT/vm/$arch
ln -s ../src/Makefile .
(cd $EMERALDROOT/vm/$arch ; emmake links)
# (cd $EMERALDROOT/vm/$arch ; emmake install)

if ($?docompilation) then
  if ($?needvmc) then
    (cd $EMERALDROOT/vmc ; emmake clean ; emmake install)
  endif
  if ($?needemyacc) then
    (cd $EMERALDROOT/emyacc ; emmake clean ; emmake install)
  endif
  (cd $EMERALDROOT/vm/$arch ; emmake emx install)
else
  echo "You still need to:"
  echo "  execute emarch"
  if ($parent == no) then
    echo "  make sure $EMERALDROOT/bin/$arch/issymlink is right"
    ls -ld $EMERALDROOT/bin/$arch/issymlink
    echo "  cd $EMERALDROOT/vmc ; emmake clean ; emmake install"
    echo "  cd $EMERALDROOT/emyacc ; emmake clean ; emmake install"
  endif
  echo "  edit $EMERALDROOT/lib/$arch/macroMf"
  echo "  cd $EMERALDROOT/vm/$arch ; emmake emx install"
endif
@


1.3
log
@Cleaned up
@
text
@d1 1
a1 1
#!/bin/csh -f
d15 3
a17 1
# used to determine it.
d26 4
d42 2
d48 13
d82 2
a83 2
  # (cd $EMERALDROOT/vmc ; emmake clean ; emmake install)
  # (cd $EMERALDROOT/emyacc ; emmake clean ; emmake install)
d115 17
a131 5
echo "You still need to:"
echo "  execute emarch"
if ($parent == no) then
  echo "  make sure $EMERALDROOT/bin/$arch/issymlink is right"
  ls -ld $EMERALDROOT/bin/$arch/issymlink
d133 1
a133 2
  echo "  cd $EMERALDROOT/vmc ; emmake clean ; emmake install"
  echo "  cd $EMERALDROOT/emyacc ; emmake clean ; emmake install"
a134 2
echo "  cd $EMERALDROOT/vm/$arch ; emmake install"

@


1.2
log
@Updated for new directory structure
@
text
@d70 1
a70 1
# copy the macroMakefile from vax, changing the name of the architecture
d77 2
a78 3
  # (cd $EMERALDROOT/ccalls ; emmake clean ; emmake install)
  sed -e "s/# vax specific/# $EMERALDARCH specific/" \
      ../vax/macroMakefile >macroMakefile
d80 1
a80 2
  ln -s ../$parent/libccalls.a .
  ln -s ../$parent/macroMakefile .
d90 1
a90 1
ln -s ../Makefile $EMERALDROOT/vm/$arch/Makefile
d97 3
a99 2
  echo "  edit $EMERALDROOT/bin/$arch/issymlink"
  echo "  edit $EMERALDROOT/lib/$arch/macroMakefile"
a101 1
  echo "  cd $EMERALDROOT/ccalls ; emmake clean ; emmake install"
@


1.1
log
@Initial revision
@
text
@a39 2
# initialize user environment
setenv EMERALDROOT /project3/phoenix
@
