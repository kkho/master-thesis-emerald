head	1.4;
access;
symbols
	105alpha:1.4
	104alpha:1.4
	103alpha:1.4
	102alpha:1.4
	101alpha:1.4
	100alpha:1.4
	DIKU_0:1.3
	immel_start:1.3;
locks; strict;


1.4
date	97.01.21.23.51.09;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	92.06.03.10.14.09;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.13.45.08;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.13.45.06;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.4
log
@Cleanup syntax, new ccalls, time fixes
@
text
@% 
% @@(#)Real.m	1.2  3/6/91
%
const Real <- immutable object Real builtin 0x100a
  const RealType <- immutable typeobject RealType builtin 0x160a
    function + [o : Real] -> [r : Real]
      % r <- self + o
    function - [o : Real] -> [r : Real]
      % r <- self - o
    function * [o : Real] -> [r : Real]
      % r <- self * o
    function / [o : Real] -> [r : Real]
      % r <- self / o
    function ^ [o : Real] -> [r : Real]
      % r <- self ^ o (self raised to the exponent o)
    function > [o : Real] -> [r : Boolean]
      % r <- self > o
    function >= [o : Real] -> [r : Boolean]
      % r <- self >= o
    function < [o : Real] -> [r : Boolean]
      % r <- self < o
    function <= [o : Real] -> [r : Boolean]
      % r <- self <= o
    function = [o : Real] -> [r : Boolean]
      % r <- self = o
    function != [o : Real] -> [r : Boolean]
      % r <- self != o
    function asString -> [r : String]
      % s is set to a string with no leading 0's, decimal rep.
    function asInteger -> [r : Integer]
      % s is set to an integer (rounded)
    function ~ -> [r : Real]
      % r <- negate self
    function - -> [r : Real]
      % r <- negate self
  end RealType
  export function getSignature -> [result : Signature]
    result <- RealType
  end getSignature
  export function create -> [result : RealType]
    result <- immutable object aReal builtin 0x140a
      export function + [o : Real] -> [r : Real]
	primitive self "FADD" [r] <- [o]
      end +
      export function - [o : Real] -> [r : Real]
	primitive self "FSUB" [r] <- [o]
      end -
      export function * [o : Real] -> [r : Real]
	primitive self "FMUL" [r] <- [o]
      end *
      export function / [o : Real] -> [r : Real]
	primitive self "FDIV" [r] <- [o]
      end /
      export function ^ [o : Real] -> [r : Real]
	primitive self "FPOW" [r] <- [o]
      end ^
      export function > [o : Real] -> [r : Boolean]
	primitive self  "FCMP" "GT" [r] <- [o]
      end >
      export function >= [o : Real] -> [r : Boolean]
	primitive self  "FCMP" "GE" [r] <- [o]
      end >=
      export function < [o : Real] -> [r : Boolean]
	primitive self  "FCMP" "LT" [r] <- [o]
      end <
      export function <= [o : Real] -> [r : Boolean]
	primitive self  "FCMP" "LE" [r] <- [o]
      end <=
      export function = [o : Real] -> [r : Boolean]
	primitive self  "FCMP" "EQ" [r] <- [o]
      end =
      export function != [o : Real] -> [r : Boolean]
	primitive self  "FCMP" "NE" [r] <- [o]
      end !=
      export function asString -> [r : String]
	primitive self "FSTR" [r] <- []
      end asString
      export function asInteger -> [r : Integer]
	primitive self "FINT" [r] <- []
      end asInteger
      export function ~ -> [r : Real]
	primitive self "FNEG" [r] <- []
      end ~
      export function - -> [r : Real]
	primitive self "FNEG" [r] <- []
      end -
    end aReal
  end create
  export function literal [rep : String] -> [result : RealType]  
    primitive "STRF" [result] <- [rep]
  end literal
end Real

export Real to "Builtins"
@


1.3
log
@Implement literal and unary -, repair create
@
text
@d4 2
a5 2
const Real == immutable object Real builtin 0x100a
  const RealType == immutable typeobject RealType builtin 0x160a
d14 2
d54 3
@


1.2
log
@type -> typeobject sed
@
text
@d32 2
d38 1
a38 1
  export function create [rep : String] -> [result : RealType]
d79 3
d84 3
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
% @@(#)Real.m	1.1  3/6/91
d5 1
a5 1
  const RealType == immutable type RealType builtin 0x160a
@
