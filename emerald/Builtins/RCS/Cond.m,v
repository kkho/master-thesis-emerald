head	1.6;
access;
symbols
	105alpha:1.6
	104alpha:1.6
	103alpha:1.6
	102alpha:1.6
	101alpha:1.6
	100alpha:1.6
	DIKU_0:1.3
	immel_start:1.3;
locks; strict;


1.6
date	97.01.21.23.51.09;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	96.09.03.04.15.29;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	96.03.06.17.40.59;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	92.06.04.05.35.23;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.13.44.12;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.13.44.11;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.6
log
@Cleanup syntax, new ccalls, time fixes
@
text
@% 
% @@(#)Condition.m	1.2  3/6/91
%
const Condition <- immutable object Condition builtin 0x1005
  % Conditions implement Hoare style condition semantics, with the following
  % exceptions:
  %     1.  There is no urgent queue, signalers are placed at the head of 
  %         the monitor entry queue, and thus successive signals are 
  %         rescheduled in LIFO order.
  const ConditionType <- typeobject ConditionType builtin 0x1605
  end ConditionType
  export function getSignature -> [result : Signature]
    result <- ConditionType
  end getSignature
  export operation create -> [result : ConditionType]
    result <- immutable object aCondition builtin 0x1405
      %
      % Each condition holds a (4 byte) pointer to the object that contains
      % it as well as a pointer to an squeue of blocked processes.  Claiming
      % that the object is a string works to generate the right template.
      %
      attached var myObject : String
      var waitingQueue : Integer
      
      initially
	primitive "CONDINIT" [] <- []
      end initially
    end aCondition
  end create
end Condition

export Condition to "Builtins"
@


1.5
log
@Fix attached for builtins
@
text
@d4 1
a4 1
const Condition == immutable object Condition builtin 0x1005
d10 1
a10 1
  const ConditionType == typeobject ConditionType builtin 0x1605
d16 1
a16 1
    result <- object aCondition builtin 0x1405
@


1.4
log
@Add an object reference to conditions in order to generate the right template
@
text
@d22 1
a22 1
      var myObject : String
@


1.3
log
@Gave better names to the instance vars of Conditions
@
text
@d17 6
a22 1
      var myObject : Integer
@


1.2
log
@type -> typeobject sed
@
text
@d17 2
a18 2
      var x : Integer
      var y : Integer
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
% @@(#)Condition.m	1.1  3/6/91
d10 1
a10 1
  const ConditionType == type ConditionType builtin 0x1605
@
