head	1.4;
access;
symbols
	105alpha:1.4
	104alpha:1.4
	103alpha:1.4
	102alpha:1.4
	101alpha:1.4
	100alpha:1.4
	DIKU_0:1.2
	immel_start:1.2;
locks; strict;


1.4
date	97.01.21.23.51.09;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	95.03.15.05.18.49;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.13.44.02;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.13.44.00;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.4
log
@Cleanup syntax, new ccalls, time fixes
@
text
@% 
% @@(#)Character.m	1.2  3/6/91
%
const Character <- immutable object Character builtin 0x1004

  const CharacterType <- immutable typeobject CharacterType builtin 0x1604
    function ord -> [r : Integer]
    function > [o : Character] -> [r : Boolean]
      % r <- self > o
    function >= [o : Character] -> [r : Boolean]
      % r <- self >= o
    function < [o : Character] -> [r : Boolean]
      % r <- self < o
    function <= [o : Character] -> [r : Boolean]
      % r <- self <= o
    function = [o : Character] -> [r : Boolean]
      % r <- self = o
    function != [o : Character] -> [r : Boolean]
      % r <- self != o
    function asString -> [s : String]
      % s <- "c" where c is the character
    function hash -> [r : Integer]
    function isalpha -> [r : Boolean]
    function isupper -> [r : Boolean]
    function islower -> [r : Boolean]
    function isdigit -> [r : Boolean]
    function isxdigit -> [r : Boolean]
    function isalnum -> [r : Boolean]
    function isspace -> [r : Boolean]
    function ispunct -> [r : Boolean]
    function isprint -> [r : Boolean]
    function isgraph -> [r : Boolean]
    function iscntrl -> [r : Boolean]
    function toupper -> [r : Character]
    function tolower -> [r : Character]
  end CharacterType
  export function getSignature -> [result : Signature]
    result <- CharacterType
  end getSignature
  export function literal [x : Integer] -> [r : CharacterType]
    primitive [r] <- [x]
  end literal
  export function create -> [result : CharacterType]
    result <- immutable object aCharacter builtin 0x1404
      export function > [o : Character] -> [r : Boolean]
	primitive self  "SUB" "GT" [r] <- [o]
      end >
      export function >= [o : Character] -> [r : Boolean]
	primitive self  "SUB" "GE" [r] <- [o]
      end >=
      export function < [o : Character] -> [r : Boolean]
	primitive self  "SUB" "LT" [r] <- [o]
      end <
      export function <= [o : Character] -> [r : Boolean]
	primitive self  "SUB" "LE" [r] <- [o]
      end <=
      export function = [o : Character] -> [r : Boolean]
	primitive self  "SUB" "EQ" [r] <- [o]
      end =
      export function != [o : Character] -> [r : Boolean]
	primitive self  "SUB" "NE" [r] <- [o]
      end !=
      export function asString -> [s : String]
	primitive self "CSTR" [s] <- []
      end asString
      export function ord -> [r : Integer]
	primitive self [r] <- []
      end ord
      export function hash -> [r : Integer]
	primitive self [r] <- []
      end hash
      export function isalpha -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISALPHA" [r] <- []
      end isalpha
      export function isupper -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISUPPER" [r] <- []
      end isupper
      export function islower -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISLOWER" [r] <- []
      end islower
      export function isdigit -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISDIGIT" [r] <- []
      end isdigit
      export function isxdigit -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISXDIGIT" [r] <- []
      end isxdigit
      export function isalnum -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISALNUM" [r] <- []
      end isalnum
      export function isspace -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISSPACE" [r] <- []
      end isspace
      export function ispunct -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISPUNCT" [r] <- []
      end ispunct
      export function isprint -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISPRINT" [r] <- []
      end isprint
      export function isgraph -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISGRAPH" [r] <- []
      end isgraph
      export function iscntrl -> [r : Boolean]
	primitive self "NCCALL" "STRING" "EMCH_ISCNTRL" [r] <- []
      end iscntrl
      export function toupper -> [r : Character]
	primitive self "NCCALL" "STRING" "EMCH_TOUPPER" [r] <- []
      end toupper
      export function tolower -> [r : Character]
	primitive self "NCCALL" "STRING" "EMCH_TOLOWER" [r] <- []
      end tolower
    end aCharacter
      
  end create
end Character

export Character to "Builtins"
@


1.3
log
@Implement new ctype.h like functions
@
text
@d4 1
a4 1
const Character == immutable object Character builtin 0x1004
d6 1
a6 1
  const CharacterType == immutable typeobject CharacterType builtin 0x1604
d73 1
a73 1
	primitive self "CCALL" "EMCHAR_ISALPHA" [r] <- []
d76 1
a76 1
	primitive self "CCALL" "EMCHAR_ISUPPER" [r] <- []
d79 1
a79 1
	primitive self "CCALL" "EMCHAR_ISLOWER" [r] <- []
d82 1
a82 1
	primitive self "CCALL" "EMCHAR_ISDIGIT" [r] <- []
d85 1
a85 1
	primitive self "CCALL" "EMCHAR_ISXDIGIT" [r] <- []
d88 1
a88 1
	primitive self "CCALL" "EMCHAR_ISALNUM" [r] <- []
d91 1
a91 1
	primitive self "CCALL" "EMCHAR_ISSPACE" [r] <- []
d94 1
a94 1
	primitive self "CCALL" "EMCHAR_ISPUNCT" [r] <- []
d97 1
a97 1
	primitive self "CCALL" "EMCHAR_ISPRINT" [r] <- []
d100 1
a100 1
	primitive self "CCALL" "EMCHAR_ISGRAPH" [r] <- []
d103 1
a103 1
	primitive self "CCALL" "EMCHAR_ISCNTRL" [r] <- []
d106 1
a106 1
	primitive self "CCALL" "EMCHAR_TOUPPER" [r] <- []
d109 1
a109 1
	primitive self "CCALL" "EMCHAR_TOLOWER" [r] <- []
@


1.2
log
@type -> typeobject sed
@
text
@d23 13
d72 39
d112 1
a112 1
    
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
% @@(#)Character.m	1.1  3/6/91
d6 1
a6 1
  const CharacterType == immutable type CharacterType builtin 0x1604
@
