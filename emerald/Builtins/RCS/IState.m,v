head	1.6;
access;
symbols
	105alpha:1.6
	104alpha:1.6
	103alpha:1.6
	102alpha:1.6
	101alpha:1.6
	100alpha:1.6
	DIKU_0:1.5
	immel_start:1.2;
locks; strict;


1.6
date	95.03.03.05.46.47;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	94.08.17.17.02.23;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	94.03.01.22.19.09;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	92.12.24.18.57.05;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.13.44.23;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.13.44.21;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.6
log
@Make an IState a real object
@
text
@% 
% @@(#)IState.m	1.2  3/6/91
%
const InterpreterState <- immutable object InterpreterState builtin 0x101f
  const InterpreterStateType <- typeobject InterpreterStateType builtin 0x161f
    function  getPC -> [ Integer ]
    operation setPC [ Integer ]
    function  getSP -> [ Integer ]
    operation setSP [ Integer ]
    function  getFP -> [ Integer ]
    operation setFP [ Integer ]
    function  getSB -> [ Integer ]
    operation setSB [ Integer ]
    function  getO -> [ Any ]
    operation setO [ Any ]
    function  getE -> [ Any ]
    operation setE [ Any ]
  end InterpreterStateType

  export function getSignature -> [ result : Signature ]
    result <- InterpreterStateType
  end getSignature
  export operation create [
    xpc : Integer,
    xsp : Integer,
    xfp : Integer,
    xsb : Integer,
    xo  : Any,
    xe  : Any]
  -> [ n : InterpreterStateType ]
    n <- object anInterpreterState builtin 0x141f
	var pc : Integer <- xpc
	var sp : Integer <- xsp
	var fp : Integer <- xfp
	var sb : Integer <- xsb
	var o  : Any <- xo
	var e  : Any <- xe
	export function  getPC -> [r : Integer]
	  r <- pc
	end getPC
	export operation setPC [r : Integer]
	  pc <- r
	end setPC
	export function  getSP -> [r : Integer]
	  r <- sp
	end getSP
	export operation setSP [r : Integer]
	  sp <- r
	end setSP
	export function  getFP -> [r : Integer]
	  r <- fp
	end getFP
	export operation setFP [r : Integer]
	  fp <- r
	end setFP
	export function  getSB -> [r : Integer]
	  r <- sb
	end getSB
	export operation setSB [r : Integer]
	  sb <- r
	end setSB
	export function  getO -> [r : Any]
	  r <- o
	end getO
	export operation setO [r : Any]
	  o <- r
	end setO
	export function  getE -> [r : Any]
	  r <- e
	end getE
	export operation setE [r : Any]
	  e <- r
	end setE
    end anInterpreterState
  end create
end InterpreterState

export InterpreterState to "Builtins"
@


1.5
log
@Checkpoint of DIKU August 94 changes
@
text
@d12 2
a13 2
    function  getSB -> [ VectorOfInt ]
    operation setSB [ VectorOfInt ]
d27 1
a27 1
    xsb : VectorOfInt,
d35 1
a35 1
	var sb : VectorOfInt <- xsb
d56 1
a56 1
	export function  getSB -> [r : VectorOfInt]
d59 1
a59 1
	export operation setSB [r : VectorOfInt]
d63 1
a63 1
	  r <- xo
d66 1
a66 1
	  xo <- r
@


1.4
log
@Fix up the object, implement environments
@
text
@d62 1
a62 1
	export function  getO -> [r : Integer]
d65 1
a65 1
	export operation setO [r : Integer]
d68 1
a68 1
	export function  getE -> [r : ConcreteType]
d71 1
a71 1
	export operation setE [r : ConcreteType]
@


1.3
log
@Eliminated monitor
@
text
@a11 2
    function  getOP -> [ Integer ]
    operation setOP [ Integer ]
d14 4
a17 2
    function  getCP -> [ ConcreteType ]
    operation setCP [ ConcreteType ]
a26 1
    xxop : Integer,
d28 2
a29 1
    xcp : ConcreteType]
a34 1
	var xop : Integer <- xxop
d36 2
a37 1
	var cp : ConcreteType <- xcp
a55 6
	export function  getOP -> [r : Integer]
	  r <- xop
	end getOP
	export operation setOP [r : Integer]
	  xop <- r
	end setOP
d62 12
a73 6
	export function  getCP -> [r : ConcreteType]
	  r <- cp
	end getCP
	export operation setCP [r : ConcreteType]
	  cp <- r
	end setCP
@


1.2
log
@type -> typeobject sed
@
text
@a31 1
      monitor
a73 1
      end monitor
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
% @@(#)IState.m	1.1  3/6/91
d5 1
a5 1
  const InterpreterStateType <- type InterpreterStateType builtin 0x161f
@
