head	1.5;
access;
symbols
	105alpha:1.5
	104alpha:1.5
	103alpha:1.5
	102alpha:1.5
	101alpha:1.5
	100alpha:1.5
	DIKU_0:1.3
	immel_start:1.2;
locks; strict;


1.5
date	97.01.21.23.51.09;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	96.09.03.04.15.29;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	93.02.17.00.09.58;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.13.43.25;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.13.43.24;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.5
log
@Cleanup syntax, new ccalls, time fixes
@
text
@% 
% @@(#)AOpVectorE.m	1.2  3/6/91
%
const AOpVectorE <- immutable object AOpVectorE builtin 0x101c
  const AOpVectorEType <- typeobject AOpVectorEType builtin 0x161c
    function  getID -> [Integer]
    function  getNArgs -> [Integer]
    function  getNRess -> [Integer]
    function  getIsFunction -> [Boolean]
    function  getName -> [String]
    function  getArguments -> [AParamList]
    function  getResults   -> [AParamList]
  end AOpVectorEType

  export function getSignature -> [ result : Signature ]
    result <- AOpVectorEType
  end getSignature

  export operation create [
    pid : Integer,
    pisFunction : Boolean,
    pname : String,
    parguments : AParamList,
    presults : AParamList] ->  [ n : AOpVectorEType ]

    n <- immutable object aAOpVectorE builtin 0x141c
      const id <- pid
      const isFunction <- pisFunction
      attached const name <- pname
      attached const arguments <- parguments
      attached const results <- presults
      
      export function  getid -> [r : Integer]
	r <- id
      end getid
      export function  getNArgs -> [r : Integer]
	if arguments == nil then
	  r <- 0
	else
	  r <- arguments.upperbound + 1
	end if
      end getNArgs
      export function  getNRess -> [r : Integer]
	if results == nil then
	  r <- 0
	else
	  r <- results.upperbound + 1
	end if
      end getNRess
      export function  getIsFunction -> [r : Boolean]
	r <- IsFunction
      end getIsFunction
      export function  getName -> [r : String]
	r <- name
      end getName
      export function  getArguments -> [r : AParamList]
	r <- arguments
      end getArguments
      export function  getResults -> [r : AParamList]
	r <- results
      end getResults
    end aAOpVectorE
  end create
end AOpVectorE
  
export AOpVectorE to "Builtins"
@


1.4
log
@Fix attached for builtins
@
text
@d26 1
a26 1
    n <- object aAOpVectorE builtin 0x141c
@


1.3
log
@Generate type objects for concretetypes
@
text
@d29 3
a31 3
      const name <- pname
      const arguments <- parguments
      const results <- presults
@


1.2
log
@type -> typeobject sed
@
text
@a20 2
    pNArgs : Integer,
    pNRess : Integer,
a27 2
      const NArgs <- pNArgs
      const NRess <- pNRess
d37 5
a41 1
	r <- NArgs
d44 5
a48 1
	r <- NRess
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
% @@(#)AOpVectorE.m	1.1  3/6/91
d5 1
a5 1
  const AOpVectorEType <- type AOpVectorEType builtin 0x161c
@
