head	1.7;
access;
symbols
	105alpha:1.7
	104alpha:1.7
	103alpha:1.7
	102alpha:1.7
	101alpha:1.7
	100alpha:1.7
	DIKU_0:1.5
	immel_start:1.2;
locks; strict;


1.7
date	96.09.03.04.15.29;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	96.03.19.22.42.38;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	93.06.10.15.54.59;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	93.02.17.00.09.58;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	92.12.23.15.36.02;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.13.44.07;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	91.04.22.13.44.06;	author norm;	state Exp;
branches;
next	;


desc
@
@


1.7
log
@Fix attached for builtins
@
text
@% 
% @@(#)ConcreteType.m	1.2  3/6/91
%
const ConcreteType <- immutable object ConcreteType builtin 0x1018
  const ConcreteTypeType <- typeobject ConcreteTypeType builtin 0x1618
    function  getInstanceSize -> [Integer]
    function  getInstanceFlags -> [Integer]
    function  getOps -> [COpVector]
    function  getName -> [String]
    function  getFileName -> [String]
    function  getTemplate -> [String]
    function  getType -> [Signature]
    function  getLiterals -> [ImmutableVectorOfInt]
  end ConcreteTypeType

  export function getSignature -> [ result : Signature ]
    result <- ConcreteTypeType
  end getSignature
  export operation create [
    pinstanceSize : Integer,
    pinstanceFlags : Integer,
    pops : COpVector,
    pname : String,
    pfilename : String,
    ptemplate : String,
    pmytype : Signature,
    pLiterals : ImmutableVectorOfInt] ->  [ n : ConcreteTypeType ]

    n <- immutable object aConcreteType builtin 0x1418
      const instanceSize <- pinstanceSize
      const instanceFlags <- pinstanceFlags
      attached const ops <- pops
      attached const name <- pname
      attached const filename <- pfilename
      attached const template <- ptemplate
      attached const mytype <- pmytype
      attached const literals <- pLiterals
      
      export function  getInstanceSize -> [r : Integer]
	r <- instanceSize
      end getInstanceSize
      export function  getInstanceFlags -> [r : Integer]
	r <- instanceFlags
      end getInstanceFlags
      export function  getOps -> [r : COpVector]
	r <- ops
      end getOps
      export function  getName -> [r : String]
	r <- name
      end getName
      export function  getFileName -> [r : String]
	r <- fileName
      end getFileName
      export function  getTemplate -> [r : String]
	r <- template
      end getTemplate
      export function  getType -> [r : Signature]
	r <- mytype
      end getType
      export function  getLiterals -> [r : ImmutableVectorOfInt]
	r <- literals
      end getLiterals
    end aConcreteType
  end create
end ConcreteType
  
export ConcreteType to "Builtins"
@


1.6
log
@Stop using mutable objects with no state, changed the name of instanceFlags
@
text
@d32 6
a37 6
      const ops <- pops
      const name <- pname
      const filename <- pfilename
      const template <- ptemplate
      const mytype <- pmytype
      const literals <- pLiterals
@


1.5
log
@Support new literal structure in concrete types
@
text
@d7 1
a7 1
    function  getInstanceTagMask -> [Integer]
d21 1
a21 1
    pinstanceTagMask : Integer,
d31 1
a31 1
      const instanceTagMask <- pinstanceTagMask
d42 3
a44 3
      export function  getInstanceTagMask -> [r : Integer]
	r <- instanceTagMask
      end getInstanceTagMask
@


1.4
log
@Generate type objects for concretetypes
@
text
@d13 1
d26 2
a27 1
    pmytype : Signature] ->  [ n : ConcreteTypeType ]
d37 1
d60 3
@


1.3
log
@Made instance immutable
@
text
@d12 1
d24 2
a25 1
    ptemplate : String] ->  [ n : ConcreteTypeType ]
d34 1
d54 3
@


1.2
log
@type -> typeobject sed
@
text
@d25 1
a25 1
    n <- object aConcreteType builtin 0x1418
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
% @@(#)ConcreteType.m	1.1  3/6/91
d5 1
a5 1
  const ConcreteTypeType <- type ConcreteTypeType builtin 0x1618
@
