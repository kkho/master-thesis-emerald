head	1.3;
access;
symbols
	105alpha:1.3
	104alpha:1.3
	103alpha:1.3
	102alpha:1.3
	101alpha:1.3
	100alpha:1.3;
locks; strict;
comment	@ * @;


1.3
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.02.23.16.20.39;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	97.01.21.23.59.53;	author norm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@'./vm/src'
@
text
@/*
 * Trivial dynamic read-only arrays
 */

#ifndef _EMERALD_ARRAY_H
#define _EMERALD_ARRAY_H

#ifndef _EMERALD_STORAGE_H
#include "storage.h"
#endif

typedef struct array {
  int *base, *limit, *cp;
} *array;

#define ASUB(a,i) (*((a)->base + (int)(i)))
#define REF(a,i) ((a)->base + (int)(i))
#define ARRAYSIZE(a) ((a)->cp - (a)->base)
extern array arrayCreate(int);
extern void arrayAppend(array, int);
extern void arrayDestroy(array);

#endif /* _EMERALD_ARRAY_H */
@


1.2
log
@'./vm/src'
@
text
@d8 4
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
#ifndef _ARRAY_H
#define _ARRAY_H
d19 1
a19 1
#endif /* _ARRAY_H */
@
