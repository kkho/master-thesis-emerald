head	1.3;
access;
symbols
	105alpha:1.3
	104alpha:1.3
	103alpha:1.3
	102alpha:1.3
	101alpha:1.3
	100alpha:1.3;
locks; strict;
comment	@ * @;


1.3
date	98.03.24.16.25.58;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	98.02.23.16.30.33;	author norm;	state Exp;
branches;
next	;


desc
@Inline insert function.
@


1.3
log
@'.'
@
text
@#ifndef _EMERALD_INSERT_H
#define _EMERALD_INSERT_H

#ifndef _EMERALD_TYPES_H
#include "types.h"
#endif

#ifdef E_NEEDS_INSERT_BITS8
static inline void InsertBits8(Bits8 *theByte, Bits8 *data)
{
  *data = *theByte;
}
#endif

static inline void InsertBits16(Bits16 *theWord, Bits8 *data)
{
  *((Bits16 *) data) = htons(*theWord);
}

static inline void InsertBits32(Bits32 *theLong, Bits8 *data)
{
  *((Bits32 *) data) = htonl(*theLong);
}

static inline void InsertOID(OID *theOID, Bits8 *data)
{
  InsertBits32(&theOID->ipaddress, data);
  InsertBits16(&theOID->port, data + 4);
  InsertBits16(&theOID->epoch, data + 6);
  InsertBits32(&theOID->Seq, data + 8);
}

#endif /* _EMERALD_INSERT_H */
@


1.2
log
@'./vm/src'
@
text
@d8 1
d13 1
@


1.1
log
@Initial revision
@
text
@d25 3
a27 3
  InsertBits32(&theOID->IPAddress, data);
  InsertBits16(&theOID->EmeraldInstance, data + 4);
  InsertBits16(&theOID->Epoch, data + 6);
@
