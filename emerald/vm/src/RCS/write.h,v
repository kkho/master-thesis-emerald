head	1.3;
access;
symbols
	105alpha:1.3
	104alpha:1.3
	103alpha:1.3
	102alpha:1.3
	101alpha:1.3
	100alpha:1.3;
locks; strict;
comment	@ * @;


1.3
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.02.23.16.20.39;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	97.01.21.23.59.53;	author norm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@'./vm/src'
@
text
@/* comment me!
 */

#ifndef _EMERALD_WRITE_H
#define _EMERALD_WRITE_H

#include "types.h"
#include "read.h"
#include "streams.h"

extern int checkpointBuiltins;
extern void (*checkpointCallback)(Object);
extern void (*checkpointCTCallback)(Object);
void (*checkpointCTIntermediateCallback)(int (*)(IISc, Object), IISc);
extern int isABuiltin(Object);
extern void Checkpoint(Object o, ConcreteType ct, Stream theFile);
extern void CheckpointToFile(Object o, ConcreteType ct, String file);
extern void FigureSize(Object o, ConcreteType c);
extern void WriteOID(OID *oid, Stream theStream);
extern Stream OpenCheckpointFile(char *cpfile);
extern void WriteTheCheckpointStream(Stream theStream, 
				     CheckpointData *theContents);

#endif /* _EMERALD_WRITE_H */
@


1.2
log
@'./vm/src'
@
text
@a9 7
#pragma warning(disable: 4068)
#pragma pointer_size save
#pragma pointer_size long
#ifndef WIN32
#include <netinet/in.h>
#endif
#pragma pointer_size restore
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
#ifndef _WRITE_H
#define _WRITE_H
d10 1
d13 1
d15 1
d31 1
a31 24
static inline void InsertBits8(Bits8 *theByte, Bits8 *data)
{
  *data = *theByte;
}

static inline void InsertBits16(Bits16 *theWord, Bits8 *data)
{
  *((Bits16 *) data) = htons(*theWord);
}

static inline void InsertBits32(Bits32 *theLong, Bits8 *data)
{
  *((Bits32 *) data) = htonl(*theLong);
}

static inline void InsertOID(OID *theOID, Bits8 *data)
{
  InsertBits32(&theOID->IPAddress, data);
  InsertBits16(&theOID->EmeraldInstance, data + 4);
  InsertBits16(&theOID->Epoch, data + 6);
  InsertBits32(&theOID->Seq, data + 8);
}

#endif /* _WRITE_H */
@
