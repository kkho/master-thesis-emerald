head	1.12;
access;
symbols
	105alpha:1.11
	104alpha:1.11
	103alpha:1.9
	102alpha:1.7
	101alpha:1.5
	100alpha:1.5;
locks; strict;
comment	@ * @;


1.12
date	2007.06.11.02.35.58;	author norm;	state Exp;
branches;
next	1.11;

1.11
date	98.05.22.15.49.12;	author norm;	state Exp;
branches;
next	1.10;

1.10
date	98.05.08.19.38.21;	author norm;	state Exp;
branches;
next	1.9;

1.9
date	98.05.01.04.47.38;	author norm;	state Exp;
branches;
next	1.8;

1.8
date	98.04.30.20.45.12;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	98.04.20.13.19.44;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	98.04.15.04.25.25;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	98.03.24.16.25.58;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	98.02.23.16.20.39;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.02.09.18.13.24;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	97.01.21.23.59.53;	author norm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Check in current version
@
text
@#define E_NEEDS_SOCKET
#define E_NEEDS_SIGNAL
#include "system.h"

#include "vm_exp.h"
#include "types.h"
#include "iisc.h"
#include "trace.h"
#include "assert.h"
#include "trace.h"
#include "iset.h"
#include "globals.h"
#include "misc.h"
#include "read.h"
#include "io.h"
#include "dist.h"
#include "gaggle.h"
#include "mqueue.h"
#include "timer.h"

extern MQueue incoming;
ISet allProcesses;
ISet running;
extern int traceprocess;

#include "squeue.h"
SQueue ready;
extern char *gRootNode;
int doDistribution = 0;
#ifdef PROFILEINVOKES
IISc invokeprofile, opvectorentry2ct;
#endif

int beVerbose = 0, doInvokeProfiling = 0, dontExecute = 0;
int activelyInitialize = 1;
extern int errno;
int doCompression = 0, writeCP = 0;
int runningProcesses = 0;
int debugInteractively = 0;
int gotsigint = 0;
int checkSameUser = 1;
int offsetbyuserid = 1;
int fakeUnavailable = 0;
int debugFirst = 0;
extern int checkpointBuiltins;
extern void statistics(void);

void die(void)
{
  statistics();
  TraceFin();
  exit(1);
}

#if !defined(EMERALD_MYRINET)
void sigdie(int signalnumber)
{
#ifdef SINGLESTEP
  if (debugInteractively) {
    if (ISetSize(running) > 0) {
      if (instructionsToExecute != 1) {
	instructionsToExecute = 1;
	gotsigint = 1;
      }
    } else if (ISetSize(allProcesses) > 0) {
      debug((State *)ISetSelect(allProcesses), "Interrupt");
    } else {
      fprintf(stderr, "Can't debug (no processes)\n");
      beVerbose = 1;
      die();
    }
  } else {
#endif
    beVerbose = 1;
    showAllProcesses(0, 1);
    die();
#ifdef SINGLESTEP
  }
#endif
}
#endif

extern int p_bytesPerGeneration, p_copyCount, p_old_size, 
           p_guaranteeInterGcInterval;
extern int bytesPerGeneration, copyCount, old_size;
extern void gc_init(void (*)(void), void (*)(void), void (*)(void), void (*)(void));
extern void gc_stats (int *tg, int *og, int *n, int *no, int *nd, int *ndr);
extern void init_nodeinfo(void), sysinit(void);
extern int parseTraceFlag(char *), init_upcall(void), interpret(struct State *);

int ac;
char **av;

void startProcesses(void)
{
  IISc temp;
  int why;
  Object anElem;

  if (!processes) return;
  temp = processes;
  processes = 0;
  while (IIScSize(temp) > 0) {
    anElem = (Object) IIScSelect(temp, &why);
    run(anElem, why, 1);
    IIScDelete(temp, (int)anElem);
  }
  IIScDestroy(temp);
  {
    extern int activelyInitialize;
    extern IISc tobeinitialized;
    int value;
    Object o;

    if (activelyInitialize && tobeinitialized) {
      while (IIScSize(tobeinitialized) > 0) {
	o = (Object)IIScSelect(tobeinitialized, &value);
	tryToInit(o);
	IIScDelete(tobeinitialized, (int)o);
      }
      IIScDestroy(tobeinitialized);
      tobeinitialized = 0;
    }
  }
}

void processEverythingOnce(void)
{
  State *r;
  extern int timeAdvanced, inDebugger;

  checkForIO(MQueueSize(incoming) == 0 && SQueueSize(ready) == 0 ? 1 : 0);
  if (timeAdvanced) { timeAdvanced = 0 ; checkForTimeouts(); }
#ifdef DISTRIBUTED
  if (MQueueSize(incoming) > 0) serveRequest();
#endif
  if (SQueueSize(ready) > 0 && !inDebugger) {
    r = SQueueRemove(ready);
    assert(r);
    TRACE(process, 3, ("Running process %x", r));
    ISetInsert(running, (int)r);
    interpret(r);
    ISetDelete(running, (int)r);
  }
}

extern int nProcessesDelayed;

int stuffToDo(void)
{
  return SQueueSize(ready) > 0 || nProcessesDelayed > 0;
}

void processEverything(void)
{
  while (doDistribution ? 1 : stuffToDo()) {
    processEverythingOnce();
  }
}

#ifdef DISTRIBUTED
int nMessagesSent, nMessagesReceived, nBytesSent, nBytesReceived;
#endif

void makeReady(State *state)
{
  assert((int)state != -1);
  if (RESDNT(state->op->flags)) {
    SQueueInsert(ready, state);
#if DISTRIBUTED
  } else {
    returnToForeignObject(state, JNIL);
#endif
  }
}

int isReady(State *state)
{
  State *astate;
  assert((int)state != -1);
  SQueueForEach(ready, astate) {
    if (astate == state) return 1;
  } SQueueNext();
  return 0;
}

void hack_mainp(void *arg)
{
  int doDefault = 1, x, value;

  assert(sizeof(Bits32) == 4);
  assert(sizeof(Bits16) == 2);
  assert(sizeof(Bits8)  == 1);
  assert(sizeof(void *) >= 4);

  ready = SQueueCreate();

  start_times();
  CallInit();
  ReadInit();
  OIDToObjectInit();
#ifdef DISTRIBUTED
  initGaggle();
#endif
  allProcesses = ISetCreate();
  running = ISetCreate();

  ac--;
  av++;
  while (ac > 0) {
    if (av[0][0] == '-') {
      x = 1;
      value = 1;
      if (av[0][x] == '-') {
	value = ! value;
	x++;
      }
      switch (av[0][x]) {
      case '1':
	activelyInitialize = value;
	break;
      case 'f':
	++x;
	value = mstrtol(&av[0][x], 0, 0);
	fakeUnavailable = value;
	if (fakeUnavailable < 1) fakeUnavailable = 1;
	if (fakeUnavailable > 100) fakeUnavailable = 100;
	break;
      case 'F':
	SetTraceFile(&av[0][x+1]);
	break;
      case 'T':
	parseTraceFlag(av[0]);
	break;
      case 'v':
	beVerbose = value;
	break;
      case 'x':
	dontExecute = value;
	break;
      case 'P':
	p_guaranteeInterGcInterval = value;
	break;
      case 'p':
#ifdef PROFILEINVOKES
	if (invokeprofile == NULL)
	  invokeprofile = IIScCreate();
	if (opvectorentry2ct == NULL)
	  opvectorentry2ct = IIScCreate();
	doInvokeProfiling = value;
#else
	ftrace("Sorry, not configured for profiling");
#endif
	break;
      case 'b':
	checkpointBuiltins = value;
	break;
      case 'B':
	doDefault = ! value;
	break;
      case 'c':
	doCompression = value;
	break;
      case 't':
	x++;
	if (av[0][x]) {
	  char *rest;
	  int t = mstrtol(&av[0][x], &rest, 0);
	  if (*rest == 'k' || *rest == 'K') t *= 1024;
	  if (*rest == 'm' || *rest == 'M') t *= 1024 * 1024;
	  SetTraceBufferSize(t);
	}
	break;
      case 'g':
	x++;
	if (av[0][x]) {
	  char *rest;
	  int t = mstrtol(&av[0][x], &rest, 0);
	  if (*rest == 'k' || *rest == 'K') t *= 1024;
	  if (*rest == 'm' || *rest == 'M') t *= 1024 * 1024;
	  p_bytesPerGeneration = (t + 3) & ~3;
	}
	break;
      case 's':
	x++;
	if (av[0][x]) {
	  char *rest;
	  int t = mstrtol(&av[0][x], &rest, 0);
	  if (*rest == 'k' || *rest == 'K') t *= 1024;
	  if (*rest == 'm' || *rest == 'M') t *= 1024 * 1024;
	  stackSize = (t + 1023) & ~1023;
	}
	break;
      case 'O':
	x++;
	if (av[0][x]) {
	  char *rest;
	  int t = mstrtol(&av[0][x], &rest, 0);
	  if (*rest == 'k' || *rest == 'K') t *= 1024;
	  if (*rest == 'm' || *rest == 'M') t *= 1024 * 1024;
	  p_old_size = t;
	}
	break;
      case 'G':
	x++;
	if (av[0][x]) {
	  char *rest;
	  int t = mstrtol(&av[0][x], &rest, 0);
	  p_copyCount = t;
	}
	break;
      case 'i':
	debugInteractively = value;
	break;
      case 'I':
	debugFirst = value;
	if (value) debugInteractively = 1;
	break;
      case 'u':
	offsetbyuserid = value;
	break;
      case 'U':
	checkSameUser = 0;
	break;
      case 'C':
	if (doDefault) {
	  gc_init(0, 0, 0, 0);
	  DoCheckpointFromFile(0);
	  doDefault = 0;
	}
	writeCP = value;
	doCompression = 1;
	dontExecute = 1;
	beVerbose = 1;
	break;
      case 'S':
#if defined(DISTRIBUTED)
	doDistribution = 1;
	gRootNode = "search";
#else
	fprintf(stderr, "emx: not compiled for distribution (DISTRIBUTED)\n");
#endif
	break;
      case 'R':
#if defined(DISTRIBUTED)
	doDistribution = 1;
	x++;
	if (av[0][x]) {
	  gRootNode = &av[0][x];
	} else {
	  gRootNode = "here";
	}
#else
	fprintf(stderr, "emx: not compiled for distribution (DISTRIBUTED)\n");
#endif
	break;
      default:
	ftrace("emx: Unknown flag \"%s\"", av[0]);
      }
    } else if ((av[0][0] == ' ' && av[0][1] == '\0') ||
               (av[0][0] == ' ' && av[0][1] == ' ' && av[0][2] == '\0')) {
      /* ignore it */
    } else {
      if (doDefault) {
	gc_init(0, 0, 0, 0);
	DoCheckpointFromFile(0);
	doDefault = 0;
      }
      gc_init(0, 0, 0, 0);
      DoCheckpointFromFile(av[0]);
    }
    ac--;
    av++;
  }
  if (doDefault) {
    gc_init(0, 0, 0, 0);
    DoCheckpointFromFile(0);
    doDefault = 0;
  }

  if (dontExecute) { return; }
  initGlobals();
  init_nodeinfo();
  init_upcall();
  sysinit();

  runningProcesses = 1;
  startProcesses();
  /*
   * Don't actively initialize moved in objects, this is only interesting
   * for initially reading the checkpoint file.
   */
  activelyInitialize = 0;
  receivingObjects = 1;

  processEverything();
  statistics();
  TraceFin();
  exit(0);
}

int main( int argc, char **argv )
{
#ifdef alpha
  /* Try to get these right */
  int i;
  ac = argc;
  av = vmCalloc(ac, sizeof(char *));
  for (i = 0; i < ac; i++) {
    av[i] = argv[i];
  }
#else
  ac = argc; av = argv;
#endif

  srandom(time(0));
#ifdef WIN32
  {
	  WORD wVersionRequested = MAKEWORD(1, 1);
	  WSADATA wsaData;
	  if (WSAStartup(wVersionRequested, &wsaData)) {
		  fprintf(stderr, "WSA Startup failed.\n");
		  exit(1);
	  }
  }
#endif /* WIN32 */
  TraceInit();
  DInit();
  IOInit();
  if( InitDist() < 0 ) abort();
  TimerInit();
  hack_mainp(0);
  return 0;
}

IISc processes;

void scheduleProcess(Object o, int opIndex)
{
  if (runningProcesses) {
    run(o, opIndex, 1);
  } else {
    if (!(int)processes) processes = IIScCreate();
    IIScInsert(processes, (int)o, opIndex);
  }
}

#if defined(_SC_PAGE_SIZE) && !defined(ibm) && !defined(sgi) && !defined(alpha)
size_t getpagesize(void)
{
  return sysconf(_SC_PAGE_SIZE);
}
#endif

#if defined(m88k)
getpagesize()
{
  return 4096;
}
#endif

void statistics(void)
{
  if (beVerbose) {
    int tg, og, time;
    int n, no, nd, ndremoved;
    extern int totalbytecodes;

    time = currentCpuTime();
    
    printf("Executed %d bytecodes in %d.%02d seconds\n", 
	   totalbytecodes, time/100, time%100);
    gc_stats(&tg, &og, &n, &no, &nd, &ndremoved);
    if (n > 0) {
      if (bytesPerGeneration % 1024 == 0) {
	printf("%d gcs in %d*%d*%dk = %d Kbytes, time %d.%02d\n", n,
	       copyCount==1?1:2, copyCount, bytesPerGeneration / 1024, 
	       bytesPerGeneration * copyCount * (copyCount==1?1:2)/1024,
	       tg/100,tg%100);
      } else {
	printf("%d gcs in %d*%d*%d = %d bytes, time %d.%02d\n", n,
	       copyCount==1?1:2, copyCount, bytesPerGeneration, 
	       bytesPerGeneration * copyCount * (copyCount==1?1:2), 
	       tg/100,tg%100);
      }
    }
    if (no > 0) {
      if (old_size % 1024 == 0) {
	printf("%d old generation gcs in %d Kbytes, time %d.%02d\n", 
	       no, old_size/1024, og/100, og%100);
      } else {
	printf("%d old generation gcs in %d bytes, time %d.%02d\n", 
	       no, old_size, og/100, og%100);
      }
    }
#ifdef DISTRIBUTED
    if (nd > 0) {
		printf("%d distributed gcs freed %d objects\n", nd, ndremoved);
	}
    printf("Received %d messages (%d bytes), sent %d messages (%d bytes)\n",
	   nMessagesReceived, nBytesReceived, nMessagesSent, nBytesSent);
#endif
#ifdef PROFILEINTERPRET
    outputProfile();
#endif
  }
#ifdef PROFILEINVOKES
  if (doInvokeProfiling)
    outputInvokeProfile();
#endif
  return;
}

#undef abort
void myabort(void)
{
  abort();
}

void FatalError(char *ErrorMessage)
{
  perror(ErrorMessage);
  die();
}
@


1.11
log
@Detect and respond to more node failure conditions during locate and move
@
text
@d42 2
d87 1
a87 1
extern void gc_stats (int *tg, int *og, int *n, int *no);
d222 7
d319 3
d466 1
a466 1
    int n, no;
d473 1
a473 1
    gc_stats(&tg, &og, &n, &no);
d497 3
@


1.10
log
@Cleanups to remove useless leftover drivel found by cxref
@
text
@d483 1
a487 1
  }
@


1.9
log
@Eradicated all vestiges of the old TRACE0-7 macros
@
text
@d30 1
d32 1
a32 19

void printcode(char *base, int len)
{
  char *b, *pos = base + len;
  for (b = base; b < pos; b++) {
    printf("%4d: %d %02X\n", b - base, *b, *(unsigned char *)b);
  }
}

void syntaxerror(char *s, int v)
{
  if (*s == '*') {
    fprintf(stderr, "syntax error: ");
    fprintf(stderr, s+1, v);
  } else {
    fprintf(stderr, s, v);
  }
  fprintf(stderr, "\n");
}
d44 1
a44 1
extern void vmStats(void), statistics(void);
d53 1
d79 1
d83 1
a83 1
extern int bytesPerGeneration, copyCount, old_size, guaranteeInterGcInterval;
a124 13
void runReady(void)
{
  State *r;
  while (SQueueSize(ready) > 0) {
    if ((r = SQueueRemove(ready))) {
      TRACE(process, 3, ("Running process %x", r));
      ISetInsert(running, (int)r);
      interpret(r);
      ISetDelete(running, (int)r);
    }
  }
}

d160 1
a160 1
int nMessagesSent, nMessagesReceived, nBytesSent, nBytesReceived, nBytesSentSinceLastReceive;
d243 1
a243 1
	fprintf(stderr, "Sorry, not configured for profiling\n");
a245 4
      case 'D':
	/* this option has been superseded by the console interface */
	fprintf( stderr, "warning: -D has been superseded by console\n" );
	break;
d346 1
a346 1
	fprintf(stderr, "emx: Unknown flag \"%s\"\n", av[0]);
a369 1
  /*  checkFunnyBuiltinTemplates(); */
a389 13
void vmStats(void)
{
  showAllProcesses(0, 1);
  statistics();
  TraceFin();
#ifdef DISTRIBUTED
  if (beVerbose) {
    printf("Received %d messages (%d bytes), sent %d messages (%d bytes)\n",
	   nMessagesReceived, nBytesReceived, nMessagesSent, nBytesSent);
  }
#endif
}

d483 5
a487 1
    }
a496 22
}

void bweDumpObject( Object ob, ConcreteType ct )
{
  printf( "### BEGIN OBJECT %#x DUMP ###\n", (u32)ob );
  printf( "Object %#x, ConcreteType %#x (%.*s)\n",
	 (u32)ob, (u32)ct, ct->d.name->d.items, ct->d.name->d.data );
  printf( "Flags: " );
  if( HASODP( ct->d.instanceFlags ) ) {
    if( !BROKEN(ob->flags) ) { printf("!"); } printf("BROKEN ");
    if( !HASOID(ob->flags) ) { printf("!"); } printf("HASOID ");
    if( !RESDNT(ob->flags) ) { printf("!"); } printf("RESDNT ");
    if( !REMSET(ob->flags) ) { printf("!"); } printf("REMSET ");
  } else {
    if( !HASODP(ct->d.instanceFlags) ) { printf("!"); } printf("HASODP ");
    if( !ISIMUT(ct->d.instanceFlags) ) { printf("!"); } printf("ISIMUT ");
  } printf( "\n" );
  if( HASINITIALLY(ct) ) { printf( "HASINITIALLY " ); }
  if( HASPROCESS(ct) ) { printf( "HASPROCESS " ); }
  if( HASRECOVERY(ct) ) { printf( "HASRECOVERY " ); }
  printf( "opVector.items=%d\n", ct->d.opVector->d.items );
  printf( "### END OBJECT %#x DUMP ###\n", (u32)ob );
@


1.8
log
@Added deferred tracing support
@
text
@d145 1
a145 1
      TRACE1(process, 3, "Running process %x", r);
d166 1
a166 1
    TRACE1(process, 3, "Running process %x", r);
@


1.7
log
@Made unavailable much more reliable, move correctly moves attached objects
@
text
@d66 1
d287 10
d419 1
d427 1
@


1.6
log
@Make XForms free objects work, improve support for debugging
@
text
@d57 1
d71 22
a92 3
  beVerbose = 1;
  showAllProcesses(0, 1);
  die();
d187 1
a187 1
int nMessagesSent, nMessagesReceived, nBytesSent, nBytesReceived;
d200 10
@


1.5
log
@'.'
@
text
@d71 1
d135 1
a135 1
  extern int timeAdvanced;
d142 1
a142 1
  if (SQueueSize(ready) > 0) {
@


1.4
log
@'./vm/src'
@
text
@d151 7
d160 1
a160 1
  while (1) {
d172 7
a178 1
  SQueueInsert(ready, state);
a192 1
  TraceInit();
d216 3
d375 1
a375 9
#ifdef DISTRIBUTED
  if (doDistribution) {
    processEverything();
  } else {
#endif
    runReady();
#ifdef DISTRIBUTED
  }
#endif
d417 1
@


1.3
log
@'./vm/src'
@
text
@d1 3
a3 6
#pragma warning(disable: 4068)
#pragma pointer_size long
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <signal.h>
a4 1
#pragma pointer_size short
d15 2
a16 1
#include "threads.h"
d18 2
d21 1
d60 1
a60 1
extern void statistics(void);
d131 1
a131 9
#ifdef MTHREADS
int nMessagesSent, nMessagesReceived, nBytesSent, nBytesReceived;
static int nReadyServersWaiting = 0;
static semaphore waitForReady;
#ifdef WIN32
semaphore theBigLock;
#endif /* not WIN32 */

void workerBody(void *arg)
d134 14
a147 26
  TRACE(process, 5, ("New worker thread running"));
  
  if (doDistribution) {
    nReadyServersWaiting--;
    while (nReadyServersWaiting <= 0) {
      nReadyServersWaiting ++;
      TRACE(process, 5, ("Worker thread waiting..."));
      MTSemP(&waitForReady);
      GainExclusive();
      TRACE(process, 6, ("Worker thread continuing"));
      nReadyServersWaiting --;
      if ((r = SQueueRemove(ready))) {
	TRACE1(process, 3, "Running process %x", r);
	ISetInsert(running, (int)r);
	interpret(r);
	ISetDelete(running, (int)r);
      }
      LoseExclusive();
    }
  } else {
    while ((r = SQueueRemove(ready))) {
      TRACE1(process, 3, "Running process %x", r);
      ISetInsert(running, (int)r);
      interpret(r);
      ISetDelete(running, (int)r);
    }
a148 2
  TRACE(process, 5, ("Worker thread dying"));
  if (!doDistribution) nReadyServersWaiting--;
d151 1
a151 1
void WNotUseful()
d153 2
a154 6
  TRACE(process, 8, ("Worker not useful"));
  if (!doDistribution) nReadyServersWaiting--;
  if (nReadyServersWaiting <= 0) {
    nReadyServersWaiting ++;
    TRACE(process, 8, ("Forking new worker thread"));
    vmCreateThread(workerBody, 0);
a155 1
  LoseExclusive();
d158 2
a159 12
void WUseful()
{
  TRACE(process, 8, ("Worker useful"));
  if (!doDistribution) nReadyServersWaiting++;
  GainExclusive();
}

void keepRunningReady(void)
{
  nReadyServersWaiting++;
  vmCreateThread(workerBody, 0);
}
a165 13
#ifdef MTHREADS
  if (doDistribution) {
    MTSemV(&waitForReady);
  } else {
    if (nReadyServersWaiting <= 0) {
      nReadyServersWaiting ++;
      TRACE(process, 8, ("Forking new worker thread"));
      vmCreateThread(workerBody, 0);
    } else {
      TRACE(process, 8, ("makeReady, already have %d worker threads", nReadyServersWaiting));
    }
  }
#endif
a176 1
  signal(SIGINT, sigdie);
d184 1
a184 1
#ifdef MTHREADS
d300 1
a300 1
#if defined(USETHREADS)
d304 1
a304 1
	fprintf(stderr, "emx: not compiled for distribution (USETHREADS)\n");
d308 1
a308 1
#if defined(USETHREADS)
d317 1
a317 1
	fprintf(stderr, "emx: not compiled for distribution (USETHREADS)\n");
d360 9
a368 4
#ifdef MTHREADS
  keepRunningReady();
#else
  runReady();
a370 1
#endif
a372 1
#ifdef USETHREADS
d377 1
d382 1
a383 3
#endif

#include <locale.h>
a398 1
  setlocale(LC_ALL, "C");
d410 4
a413 12
#ifdef MTHREADS
  MTSetDebugLevel(0);
  MTInit();
  vmSemInit(&waitForReady, 0);
#ifdef WIN32
  vmSemInit(&theBigLock, 1);
#endif
  if( vmInitThreads() < 0 ) abort();
  MTRegisterExitRoutine(vmStats);
  if (vmCreateThread(hack_mainp, 0) < 0) abort();
  MTStart();
#else
a414 1
#endif
d430 1
a430 7
#if defined(hp700) || defined(ibm) || defined(linux) || defined(__FreeBSD__)
#pragma pointer_size long
#include <unistd.h>
#pragma pointer_size short
#endif

#if defined(_SC_PAGE_SIZE) && !defined(ibm)
d444 1
a444 1
void statistics()
a485 3
#ifdef COLLECTSYSSTATS
  jfinalize();
#endif
d515 6
@


1.2
log
@Cleaned up
@
text
@d1 1
d4 1
d6 1
a7 1
#include <sys/times.h>
d20 1
a50 7
#pragma pointer_size long
#include <sys/time.h>
#ifndef SYSTYPE_SYSV
#include <sys/resource.h>
#endif
#pragma pointer_size short

a63 5
#ifdef MTHREADS
  MTDeregisterFD(0);
  MTDeregisterFD(1);
  MTDeregisterFD(2);
#endif
d68 6
d135 3
d150 1
d159 1
d182 1
d189 1
a220 3
#ifdef DOS
  extern void start_times(void);
#endif
d227 1
a229 1
#ifdef DOS
a230 1
#endif
a422 1
  MTDeregisterFD(0);
d432 2
d448 1
d450 10
a459 1

d462 5
a466 1

d469 1
a469 4
  if( vmCreateThread(hack_mainp, 0) < 0 ) abort();
#   ifdef ASYNCHSTDIN
  MTRegisterFD(0);
#   endif
d495 2
a496 10
int getclocktick(void)
{
#if defined(_SC_CLK_TCK) || defined(linux)
  return sysconf(_SC_CLK_TCK);
#endif
  return 60;
}

#if defined(_SC_PAGE_SIZE)
int getpagesize(void)
a514 1
    struct tms time_buf;
d516 1
a516 5
    times(&time_buf);
    time = ((time_buf.tms_utime + time_buf.tms_stime) * 100)/ getclocktick();
#ifdef ASYNCHSTDIN
    MTDeregisterFD(0);
#endif
d577 6
@


1.1
log
@Initial revision
@
text
@d126 1
a126 1
      TRACE1(process, 1, "Running process %x", r);
d153 1
a153 1
	TRACE1(process, 1, "Running process %x", r);
d161 1
a161 1
      TRACE1(process, 1, "Running process %x", r);
d350 8
d424 1
@
