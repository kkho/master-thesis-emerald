head	1.5;
access;
symbols
	105alpha:1.5
	104alpha:1.5
	103alpha:1.4
	102alpha:1.4
	101alpha:1.3
	100alpha:1.3;
locks; strict;
comment	@ * @;


1.5
date	98.05.08.19.37.48;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	98.04.20.13.19.44;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.02.23.16.20.39;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	97.01.21.23.59.53;	author norm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Reply to stranded messages when a location fails to find the object
@
text
@/* comment me!
 */

#ifndef _EMERALD_BUFFERSTREAMS_H
#define _EMERALD_BUFFERSTREAMS_H

#include "streams.h"

/*
 *
 * Stream       WriteToReadStream(Stream theStream, int dodestroy);
 *   This routine turns the write stream around so it can be read.
 */

extern Stream       WriteToReadStream(Stream theStream, int dodestroy);
extern StreamConstructor ReadBufferStream;
extern StreamConstructor FreeBufferStream;
extern StreamConstructor WriteBufferStream;
void BufferToIovec( Stream str, struct iovec *iov );
int BufferLength( Stream str );
char *BufferData( Stream str );

#endif /* _EMERALD_BUFFERSTREAMS_H */
@


1.4
log
@Made unavailable much more reliable, move correctly moves attached objects
@
text
@d11 1
a11 1
 * Stream       WriteToReadStream(Stream theStream);
d15 1
a15 1
extern Stream       WriteToReadStream(Stream theStream);
@


1.3
log
@'./vm/src'
@
text
@d9 7
@


1.2
log
@'./vm/src'
@
text
@a6 13
#pragma warning(disable: 4068)
#pragma pointer_size save
#pragma pointer_size long
#include <sys/types.h>
#ifndef DOS
#include <sys/uio.h>
#else
struct iovec {
  void *iov_base;
  int   iov_len;
};
#endif
#pragma pointer_size restore
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
#ifndef _BUFFERSTREAMS_H
#define _BUFFERSTREAMS_H
d7 1
d29 1
a29 3
#endif /* _BUFFERSTREAMS_H */

/* EOF */
@
