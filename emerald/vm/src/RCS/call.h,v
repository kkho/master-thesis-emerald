head	1.8;
access;
symbols
	105alpha:1.8
	104alpha:1.8
	103alpha:1.7
	102alpha:1.7
	101alpha:1.6
	100alpha:1.5;
locks; strict;
comment	@ * @;


1.8
date	98.05.08.19.38.21;	author norm;	state Exp;
branches;
next	1.7;

1.7
date	98.04.20.13.19.44;	author norm;	state Exp;
branches;
next	1.6;

1.6
date	98.04.08.21.45.27;	author norm;	state Exp;
branches;
next	1.5;

1.5
date	98.03.26.22.28.29;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	98.03.24.16.25.58;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.02.23.16.20.39;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	97.01.21.23.59.53;	author norm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Cleanups to remove useless leftover drivel found by cxref
@
text
@#ifndef _EMERALD_CALL_H
#define _EMERALD_CALL_H

#ifndef _EMERALD_IISC_H
#include "iisc.h"
#endif

#ifndef _EMERALD_TYPES_H
#include "types.h"
#endif

typedef enum { RFine = 0,
	       RInitially = 1,
	       RRemote = 2,
	       RDead = 4 }
    Reason;

extern IISc allfrozen;

extern int isReason(int why, Reason r);
extern int reasonToIndex(int why);

OpVectorElement findOpVectorElement(ConcreteType cp, unsigned int pc);
int findOpVectorIndex(ConcreteType cp, unsigned int pc);
void CallInit(void);
void returnToForeignObject(struct State *state, int answer);
int returnToBrokenObject(struct State *state);
void pushAR(struct State *state, Object obj, ConcreteType ct, int opindex);
void pushBottomAR(struct State *state);
void dependsOn(struct State *, struct State *, int);
struct State *stateFetch(OID oid, Node loc);
extern int isBroken(Object obj);
extern int duringInitialization(Object obj);
extern int findHandler(struct State *state, int name, Object o);
#endif /* _EMERALD_CALL_H */
@


1.7
log
@Made unavailable much more reliable, move correctly moves attached objects
@
text
@d3 9
a19 1
extern Reason why(int r);
a28 1
void popAR(struct State *state);
@


1.6
log
@More reliable process management, got xforms working
@
text
@a14 2
extern IISc outstandingInvokes;

@


1.5
log
@Implement broken objects better
@
text
@a14 1
extern IISc whattodonext;
a16 10
typedef enum { DoAnotherState, DoRemoteReturn } ThingToDo;

typedef struct whatnext {
  ThingToDo action;
  struct State *state;
  Node loc;
  short nargs, nress;
  int *ress;
} whatnext;

d25 1
a25 1
void dependsOn(struct State *, struct State *, ThingToDo, int *, int, int);
@


1.4
log
@'.'
@
text
@d32 1
@


1.3
log
@'./vm/src'
@
text
@d6 1
a6 2
	       RMoving = 4,
	       RDead = 8 }
d16 1
d18 1
a18 1
typedef enum { DoAnotherState, DoRemoteReturn, DoResumeThread } ThingToDo;
d24 1
a24 1
  int nress;
a25 1
  struct semaphore *waiting;
d31 1
a31 1
void returnToForeignObject(struct State *state);
d35 1
a35 1
void dependsOn(struct State *, struct State *, ThingToDo, int *, int);
d37 3
a39 1
int duringInitialization(Object obj);
@


1.2
log
@'./vm/src'
@
text
@d23 1
a23 1
  vmThreadId loc;
d37 1
a37 3
void threadDependsOn(struct State *, semaphore *w, int *ress, int nress);
int noDependentThreads(struct State *);
struct State *stateFetch(OID oid, vmThreadId loc);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
#ifndef _CALL_H
#define _CALL_H
d12 3
a14 19
static inline Reason why(int r)
{
  return
    r & (int) RInitially ? RInitially :
    r & (int) RRemote ? RRemote :
    r & (int) RMoving ? RMoving :
    r & (int) RDead ? RDead :
    0;
}

static inline int isReason(int why, Reason r)
{
  return (why & (int) r) == (int) r;
}

static inline int reasonToIndex(int why)
{
  return why == RInitially ? OVE_INITIALLY : OVE_RECOVERY;
}
d18 1
a18 1
typedef enum { AnotherState, RemoteReturn, ResumeThread } ThingToDo;
d41 1
a41 1
#endif
@
