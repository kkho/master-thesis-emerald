head	1.5;
access;
symbols
	105alpha:1.4
	104alpha:1.4
	103alpha:1.4
	102alpha:1.4
	101alpha:1.4
	100alpha:1.4;
locks; strict;
comment	@ * @;


1.5
date	2007.06.11.02.35.58;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	98.02.23.16.20.39;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.02.09.17.55.17;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	97.01.21.23.59.53;	author norm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Check in current version
@
text
@/*
 * upcall.c - call from the runtime into Emerald
 */
#include "system.h"

#include "vm_exp.h"
#include "gc.h"

Object upcallStub = (Object) JNIL;

void init_upcall(void)
{
  unsigned int *stack = (unsigned int*) vmMalloc(stackSize);
  ConcreteType ct = BuiltinInstCT(STUBI);

  assert(ct);
  inhibit_gc++;
  upcallStub = CreateObjectFromOutside(ct, (u32)stack);
  vmFree(stack);
  inhibit_gc--;
}

int
upcall(Object o, int fn, int *fail, int argc, int retc, int *args)
{
  extern int interpret(State *state);
  int i, sp;
  State *state;
  ConcreteType ct = CODEPTR(o->flags);
  state = newState(o, ct);
  sp = state->sb;

  /* build the stack */
  for (i = 0 ; i < 2 * (argc + retc) ; i++) PUSH(int, args[i]);
  state->sp = sp;
  pushBottomAR(state);

  /* set up the interpreter state */
  state->pc = (u32) ct->d.opVector->d.data[fn]->d.code->d.data;

  /* make it go */
  makeReady(state);
  return 0;
}
@


1.4
log
@'./vm/src'
@
text
@d1 3
a3 2
/* upcall.c - call from the runtime into Emerald
*/
@


1.3
log
@'./vm/src'
@
text
@d3 2
a4 1
#include <stdlib.h>
a28 4
#ifdef MTHREADS
  semaphore towaiton;
  MTSemInit(&towaiton, 0);
#endif
d41 1
a41 14
#ifdef MTHREADS
  threadDependsOn(state, &towaiton, args, retc);
#endif
  if (interpret(state) == 0) {
    /* It is all done */
  } else {
#ifdef MTHREADS
    vmSemP(&towaiton);
    MTSemFree(&towaiton);
#else
    assert(0);
#endif
  }
  assert(!ISetMember(allProcesses, (int)state));
a43 2

/* EOF */
@


1.2
log
@Checkpoint
@
text
@d3 1
a3 1

a12 1
  int old_inh = inhibit_gc;
d15 1
a15 1
  inhibit_gc = 1;
d17 2
a18 1
  inhibit_gc = old_inh;
d52 1
@


1.1
log
@Initial revision
@
text
@d5 1
d13 1
d16 1
d18 1
@
