head	1.5;
access;
symbols
	105alpha:1.5
	104alpha:1.5
	103alpha:1.4
	102alpha:1.4
	101alpha:1.4
	100alpha:1.4;
locks; strict;
comment	@ * @;


1.5
date	98.05.08.19.38.21;	author norm;	state Exp;
branches;
next	1.4;

1.4
date	98.03.24.16.25.58;	author norm;	state Exp;
branches;
next	1.3;

1.3
date	98.03.02.16.37.40;	author norm;	state Exp;
branches;
next	1.2;

1.2
date	98.02.23.16.20.39;	author norm;	state Exp;
branches;
next	1.1;

1.1
date	97.01.21.23.59.53;	author norm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Cleanups to remove useless leftover drivel found by cxref
@
text
@/* comment me!
 */

#ifndef _EMERALD_RINVOKE_H
#define _EMERALD_RINVOKE_H

#ifndef _EMERALD_TYPE_H
#include "types.h"
#endif

#ifndef _EMERALD_DIST_H
#include "dist.h"
#endif

#ifndef _EMERALD_STREAMS_H
#include "streams.h"
#endif

#ifndef _EMERALD_VM_I_H
#include "vm_exp.h"
#endif

extern int receivingObjects;
extern char *gRootNode;

void init_nodeinfo(void);

typedef struct noderecord noderecord;
struct noderecord {
  int up;
  OID node, inctm;
  Node srv;
  noderecord *p;
};

#ifdef DISTRIBUTED
Object doObjectRequest( Node srv, OID *oid, ConcreteType ct );
int doMoveRequest( OID *oid, ConcreteType CT, OID *doid );

typedef struct {
  Node srv;
  Stream str;
} msgrec;

noderecord *getNodeRecordFromSrv(Node srv);
void updateLocation(Object obj, Node srv);
Object getNodeFromObj(Object obj);
Object getNodeFromSrv(Node srv);
Object whereIs(Object obj, ConcreteType ct);
void findLocation(Object obj, ConcreteType ct, struct State *, struct Stream *);
#endif
extern noderecord *getNodeRecordFromObj(Object obj);
Node getMyLoc(void);
Node getLocFromObj(Object obj);

int rinvoke(struct State *state, Object obj, int fn);
void ReadInt(u32 *n, Stream theStream);
void WriteInt( u32 n, Stream str);
Vector getnodes(int onlyactive);
extern void invokeHandleDown(struct noderecord *);
void performReturn(struct State *state);
#endif
@


1.4
log
@'.'
@
text
@a46 1
void writeLocation(Object obj, Stream str);
@


1.3
log
@'./vm/src'
@
text
@d51 1
a51 1
void findLocation(Object obj, ConcreteType ct, struct State *);
d61 1
@


1.2
log
@'./vm/src'
@
text
@d11 2
a12 2
#ifndef _EMERALD_THREADS_H
#include "threads.h"
d32 1
a32 1
  vmThreadId srv;
d36 2
a37 2
#ifdef USETHREADS
Object doObjectRequest( vmThreadId srv, OID *oid, ConcreteType ct );
d41 1
a41 1
  vmThreadId srv;
d45 2
a46 5
extern noderecord *getNodeRecordFromObj(Object obj);
vmThreadId getMyLoc(void);
vmThreadId getLocFromObj(Object obj);
noderecord *getNodeRecordFromSrv(vmThreadId srv);
void updateLocation(Object obj, vmThreadId srv);
d49 1
a49 1
Object getNodeFromSrv(vmThreadId srv);
a51 2
#else
#define getLocFromObj(x) 6
d53 4
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
#ifndef __RINVOKE_H
#define __RINVOKE_H
d7 1
d9 3
d13 9
d54 1
a54 1
int findLocation(Object obj, ConcreteType ct, struct State *);
@
